{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Home", "text": "<p>Welcome to the course website where you can find all the material for the class. Remember to use the Discord , GitHub discussion board , email , or utilize office hours if you have any questions!</p>"}, {"location": "#class-links", "title": "Class Links", "text": "Description Link Group Project Sheet https://docs.google.com/spreadsheets/d/1ZAr9Hd9fmtevEGRadA_a4xl-AoXM8eZJ3VQFygXnT5o/edit#gid=0 GitHub Discussions https://github.com/albertkun/23S-ASIAAM-191A/discussions Anonymous Feedback https://docs.google.com/spreadsheets/d/1ZAr9Hd9fmtevEGRadA_a4xl-AoXM8eZJ3VQFygXnT5o/edit#gid=0 Discord Server Invite Link Online Office Hours https://calendly.com/aa191a/office-hours"}, {"location": "finaldetails/", "title": "Final Details", "text": "<p>June 13th, 3pm - 6pm PST</p> <p>Public Affairs 2400A, UCLA</p> <p>FOOD INSECURITY AT UCLA - Dietary restrictions, resources, and student experiences</p> <ul> <li>Aris Corpus, Emma Lee, Paige Lee</li> </ul> <p>UCLA First-Generation College Pilipinx Stories - Support for Pilipinx students </p> <ul> <li>Stephanie Cheung, Elsa Mai, Rebecca Suen </li> </ul> <p>Girls Just Wanna Have Fun - Women UCLA faculty and worklife balance</p> <ul> <li>Stella Kang, Trinh Le, Cassidy Tu</li> </ul> <p>Community Narratives: Neighborhood Oil Drilling - Health impacts of oil drilling in Inglewood Oilfields</p> <ul> <li>Maizah Ali, Catherine Hu, Jonathan Lopez </li> </ul> <p>FQH-Seeing Health Access For Bruins - Federal Qualified Health Centers and their usage UCLA students</p> <ul> <li>Amanda Lau, James Falkenroth, Kyle Tsujimoto</li> </ul> <p>Student Housing 4 All - Housing insecurity and UCLA students</p> <ul> <li>Mohammed Azad, Cassius \u201cCasey\u201d Carandang, Josy Law</li> </ul> <p>PREP.LA - UCLA students from Los Angeles and college preparedness</p> <ul> <li>Victoria Delk, Zack Pakin, Charles Zhang</li> </ul> <p>The Oilies - Civic engagement and oil drilling in Santa Barbara</p> <ul> <li>Angelica Alcantar, Enyi Emuka, Danielle Goldwirth</li> </ul> <p>UCLA Southeast Asian Experiences - Reaffirmation of Southeast Asian identity and UCLA students</p> <ul> <li>Mandy Lai, Joanne Luong, Alana Malika</li> </ul> <p>Westwood Reimagined - Sustainable Transportation in Westwood</p> <ul> <li>Sage Luong, Dylan Wan</li> </ul>"}, {"location": "syllabus/", "title": "Syllabus", "text": "<p>Welcome to the syllabus and course material for Web Development and GIS for Social Change: Critical Data for Transforming Civil Society.</p>"}, {"location": "syllabus/#class-details", "title": "Class Details", "text": "<p>Asian American Studies Department, Spring, 2023</p> <p>Tuesdays, Thursdays 2:00PM \u2013 3:15PM</p> <p>Public Affairs 2400A</p>"}, {"location": "syllabus/#instructor", "title": "Instructor", "text": "<p>Albert S. Kochaphum (albertkun@ucla.edu)</p>"}, {"location": "syllabus/#office-hours", "title": "Office Hours", "text": "<p>Tuesdays, Thursdays 3:15pm \u2013 4pm in Public Affairs 2400A and online by appointment below:</p> <ul> <li>https://calendly.com/aa191a/office-hours</li> </ul>"}, {"location": "syllabus/#preparation", "title": "Preparation", "text": "<ul> <li>Fill out the pre-course survey before the first day of instruction (4/4/2023).</li> </ul>"}, {"location": "syllabus/#please-note-this-syllabus-is-subject-to-change", "title": "Please note: This syllabus is subject to change.", "text": "<p>(Lam, C., Kochaphum, A., UCLA HateCrimeMap, 2020)</p> <p>\u201cMaps have always been made; they may have been one of the first forms of human communication. Maps exist in many forms, can represent different ideas and are used for many purposes. In choosing what to represent, how to represent it and what not to represent, maps are expressions of power.\u201d </p> <p>\u2013Logan Cochrane, Jon Corbett and Peter Keller, Impact of Community-based and Participatory Mapping</p>"}, {"location": "syllabus/#course-description", "title": "Course Description", "text": "<p>Welcome to our journey into web programming and mapping! This course is designed for non-mappers and non-coders to bridge the divide between spatial data and using it in the non-profit world for activism.</p> <p>Spatial data is all around us, whether its survey information with zip codes or the various landmarks that comprise what people consider their neighborhood. While maps, like census tracts or political boundaries are traditionally extensions of authorities of power, participatory mapping seeks to break down those barriers. The objective of this course is to put mapping into the hands of students so that they can transfer these skills and frameworks to civil society.</p> <p>The way COVID-19 played out in the United States underscored the institutional problems related to health, inequality, and the environment in the United States of America. The global crisis of climate change reinforces the institutional racism and environmental issues that have proliferated far beyond the U.S. national borders. Given all these issues, more so than ever, civil society is needed to build the coalitions and reassess priorities to usher in an era of political change.</p> <p>Mapping and data are transformative tools that strengthen these connections between coalitions because they are representations of the physical world around us. However, in non-profits and other fields of civic engagement, these tools are underutilized or simply seen as tools \u201cleft to the experts\u201d. This course prepares students to be informed digital citizens and transfer these tools for practical application in civil society. The two main objectives for this course are: </p> <ol> <li>To walk away with technical web development skills relevant to mapping for civil society</li> <li>To apply an ethical mapping framework to such projects.</li> </ol>"}, {"location": "syllabus/#course-objectives", "title": "Course Objectives", "text": "<ul> <li> <p>Undertake analysis that are informed by critical data studies,     participatory frameworks, social fieldwork, and ethical     considerations.</p> </li> <li> <p>Learn transferable technical data and mapping skills as applied     through action-oriented, collaborative, and project-based research.</p> </li> <li> <p>Learn to critically assess datasets, digital mapping/ visualization     technologies for use in non-profits</p> </li> <li> <p>Learn to create an interactive web map that uses community-based     data from a non-profit or community-based organization</p> </li> <li> <p>Perform a data needs assessment for non-profits for an interactive     map that enhances the mission/goals of the organization</p> </li> <li> <p>Learn to work in research teams in order to conceptualize, design,     carry out, and deliver persuasive arguments through presenting a web     site that includes a web map and other digital media.</p> </li> </ul>"}, {"location": "syllabus/#course-materials", "title": "Course materials", "text": "<p>Dougherty, J. and Ilyankou, I. \u201cHands-On Data Visualization: Interactive Storytelling from Spreadsheets to Code\u201d O\u2019Reilly Media, Inc. (2021). Available at https://handsondataviz.org/</p>"}, {"location": "syllabus/#remote-learning-expectations-for-students", "title": "Remote Learning Expectations for Students", "text": "<p>Info</p> <p>Though in-person attendence is recommended, lectures will be recorded and provided to students.</p> <p>Even though remote learning has been in session for a few years now, we find ourselves in a hybrid situation. For students attending online, please respectful of various difficulties associated with teaching both in an offline and online setting that others may have. I hope that you will communicate with me if you experience anything in this course that does not support an inclusive environment. You can also report any incidents you may witness or experience online the Office of Equity, Diversity, and Inclusion on their website. Basic Zoom protocols for this course are as follows:</p> <ul> <li> <p>Mute microphones when not talking</p> </li> <li> <p>Feel free to use the chat to ask questions at any time</p> </li> <li> <p>Ensure that your preferred name and pronouns are included in your     Zoom name</p> </li> <li> <p>Though encouraged, video cameras are optional</p> <ul> <li>If cameras are turned off, please provide a profile picture, this will help me to identify you throughout the course </li> </ul> </li> </ul>"}, {"location": "syllabus/#lab-requirements", "title": "Lab Requirements", "text": "<p>Lab assignments will require Microsoft Visual Studio Code in addition to Git and a GitHub account. Firefox is the official web browser for the class. Use of other software is allowed but not supported (i.e. you are on your own to troubleshoot).</p> <p>Please be sure to have required software installed prior to lab sessions. Reach out if there are any installation issues or concerns before labs.</p>"}, {"location": "syllabus/#lab-assistance", "title": "Lab Assistance", "text": "<p>While the goal in the course is to ease everyone into GIS and writing code, I understand that the process may be intimidating and difficult. Rest assured that your success is my success, and I will try my best in making a learning environment that breaks down these initial barriers. We all have gone through the same struggles learning new technology, and I strongly encourage you get help as often as possible. Steps for troubleshooting technical problems can often be solved by a quick online search or reviewing lab materials for a misstep. The class community discussion forums is another resource for help. Regardless, do not hesitate to reach out to me for help.</p>"}, {"location": "syllabus/#assignments-and-evaluation", "title": "Assignments and Evaluation", "text": "<p>Students will be evaluated based on individual lab assignments, participation, and team based final project. Students are expected to attend all lectures and labs each week.</p> <ul> <li>45% = Group project and assignments</li> <li>45% = Individual class assignments</li> <li>10% = Preparation and participation in class</li> </ul> Task Number of items Points Total Points Total Grade Individual assignments 15 30 450 45% Final Project and Presentation 1 250 250 25% Group Project Assignments 4 50 200 20% Participation 100 10% Grand Total 1000 100%"}, {"location": "syllabus/#participation", "title": "Participation", "text": "<p>While participation is somewhat subjective, as long as you are active in the course you should not worry. The following are examples of active participation:   - Participating in class discussions    - Asking questions on the GitHub discussion board   - Helping other students on the discussion board   - Coming to office hours   - Overall class attendence</p>"}, {"location": "syllabus/#extra-credit", "title": "Extra Credit", "text": "<p>Extra credit will be given to students that provide exceptional work or contributions throughout the course. Optional assignments are opportunities for extra credit as well.</p>"}, {"location": "syllabus/#course-expectations", "title": "Course Expectations", "text": "<p>UCLA\u2019s Office for Equity, Diversity, and Inclusion provides resources, events, and information about current initiatives at UCLA to support equality for all members of the UCLA community. I hope that you will communicate with me if you experience anything in this course that does not support an inclusive environment, and you can also report any incidents you may witness or experience on campus to the Office of Equity, Diversity, and Inclusion.</p> <p>I expect you to take advantage of the opportunities that this course offers you by being an active and thoughtful participant in all sections and lectures, by coming to lecture and section prepared, and by trying your best on the various elements of the course. I expect you to take ownership of your learning and to reach out to me if you are struggling or have concerns. I expect you to take the opportunity to learn from your peers through activities in lecture and section, and I expect you to be respectful and courteous to one another. Finally, I expect you to hold yourself to the highest standards for academic honesty and integrity in your work.</p>"}, {"location": "syllabus/#course-outline", "title": "Course Outline", "text": "Week Topics 1 Introduction to GIS, data, and ethics 2 Critical Cartography and Civil Society 3 Open Source and Web Mapping 4 Society, Technology, and Ethics 5 Developing for Civil Society 6 Human-Centered Design 7 From Design to Data Justice 8 Mentorship and Collaboration 9 Connecting Activism and Technology 10 Beyond Web Development and Social Change Finals Final presentations"}, {"location": "syllabus/#student-resources-for-support-and-learning", "title": "Student Resources for Support and Learning", "text": ""}, {"location": "syllabus/#providing-feedback", "title": "Providing feedback", "text": "<p>I encourage your feedback at any time throughout the quarter about things that are helping you learn or difficult concepts. Please communicate with me if there are ways that we can improve the course to better support student learning.</p>"}, {"location": "syllabus/#covid-19-accomodations", "title": "COVID-19 Accomodations", "text": "<p>While in-person learning and attendence is strongly encouraged, class lectures will be recorded and provided to all students. To make up for in-person attendence, students are expected to be active on the class discussion board and/or Discord. Feel free to reach out at any point in the quarter if your situation changes and you require further accomodations.</p>"}, {"location": "syllabus/#personal-problems", "title": "Personal Problems", "text": "<p>I understand that sometimes life makes it difficult to focus on schoolwork, especially during COVID-19 times. If you are having a personal problem that affects your participation in this course, please talk to me to create a plan. Please do not wait until the end of the quarter to share any challenges that have negatively impacted your engagement and academic performance.\u00a0The sooner we meet, the more options we will have available\u00a0able to discuss to support your overall academic success.</p>"}, {"location": "syllabus/#academic-accommodations-based-on-a-disability", "title": "Academic Accommodations Based on a Disability", "text": "<p>Students needing academic accommodations based on a disability should contact the Center for Accessible Education (CAE) at (310)825-1501 or in person at Murphy Hall A255. When possible, students should contact the CAE within the first two weeks of the term as reasonable notice is needed to coordinate accommodations. For more information visit www.cae.ucla.edu.</p>"}, {"location": "assignments/", "title": "Index", "text": "", "tags": ["Assignments"]}, {"location": "assignments/#current-assignments", "title": "Current Assignments", "text": "Assignment Type Due Final Group Assignment Tuesday 6/13", "tags": ["Assignments"]}, {"location": "assignments/#past-assignments", "title": "Past Assignments", "text": "Assignment Type Due Final Thinking Cap Thinking Cap Thursday 6/8 Final Lab Assignment Lab Assignment Thursday 6/8 Rough Draft Group Assignment Thursday 6/1 In-Class Thinking Cap Thinking Cap Tuesday 5/30 Conditional Visual Design Lab Assignment Thursday 5/25 Survey Diagram and Wireframe Group Assignment Thursday 5/25 Data Justice Weekly Reading Tuesday 5/23 The connection between Data Justice, Design Justice, and us Thinking Cap Tuesday 5/23 CSS Design Decisions Lab Assignment Thursday 5/18 Survey and Memo Revision Group Assignment Thursday 5/11 CSS and CSS Grid Prelab Pre-lab Thursday 5/11 Loops and APIs Lab Assignment Tuesday 5/16 Technology and Ethics Weekly Reading Tuesday 5/2 What are your ethics with technology and society? Thinking Cap Tuesday 5/2 GeoJSON and User Experience Lab Assignment Thursday 4/27 Project Memo Group Assignment Thursday 4/27 Prelab Pre-lab Thursday 4/27 Looking Beyond OpenSource Weekly Reading Tuesday 4/25 How are closed source tools harmful for civil society? What about open source tools? Thinking Cap Tuesday 4/25 Your First Web Map (for real!) Lab Assignment Thursday 4/20 Optional: Prelab Prelab Thursday 4/20 Whose map? Who is empowered and who is disempowered? Weekly Reading Tuesday 4/18 How can we improve Critical Cartography? Thinking Cap Tuesday 4/18 Intro to Web Maps Pre-lab Thursday 4/13 Simple Portfolio Lab Assignment Thursday 4/13 Repository and Readme Group Assignment Thursday 4/13 ** What are problems with the way we use data and GIS?** Thinking Cap Tuesday 4/11 An Introduction to Critical Cartography [PDF] Weekly Reading Tuesday 4/11 Intro to Web Dev Pre-lab Thursday 4/6 Pre-course Survey and reading Survey Tuesday 4/4", "tags": ["Assignments"]}, {"location": "assignments/final/", "title": "Final Group Assignment", "text": ""}, {"location": "assignments/final/#due-613-3pm-6pm", "title": "Due 6/13 3pm - 6pm", "text": "<p>As our course nears the end, the final group project is the way to practice implementing the skills and ethical frameworks in the class. Your task as a group is to work together to complete the community empowerment web application based off of the rough draft from Week 9. The final project should be fully functional with no bugs and must have an intuitive interface for the user stories outlined in the project memo.</p> <p>Groups will give a 10-12 minute presentation with another 5 minutes for questions and answers. Everyone must speak. Please see the requirements below for more details. </p> <p>Between 6/8 and 6/16, each member must individually take this group evaluation:</p> <ul> <li>https://forms.office.com/r/TaNcM3RckD [Available week 10]</li> </ul>"}, {"location": "assignments/final/#evaluation", "title": "Evaluation", "text": "Criteria Points Empowerment of civil society 55 Technical originality 55 Final Presentation 50 User story/interface/experience 40 Individual Group Evaluation 30 Repository Documentation 20 Total 250"}, {"location": "assignments/final/#rubric", "title": "Rubric", "text": ""}, {"location": "assignments/final/#1-empowerment-of-civil-society", "title": "1. Empowerment of civil society", "text": "<p>Who is the mapplication empowering and how? What ethical considerations did your group take in creating this application? For example, does it reflect design justice, data justice, etc.? </p>"}, {"location": "assignments/final/#2-technical-originality", "title": "2. Technical Originality", "text": "<p>Does the project have a unique identity beyond what was offered in the labs or already existing examples? Is the code easy to understand? Were you able to create your own functions that work specifically for your project? </p>"}, {"location": "assignments/final/#3-user-interface-user-experience-design", "title": "3. User interface, user experience, design:", "text": "<p>How well does your website consider the user stories and the user experience for community members? Does your website flow well from when a user first lands on it? Is the layout and design elements intuitive? Is it easy to use? </p>"}, {"location": "assignments/final/#4-final-presentation", "title": "4. Final Presentation", "text": "<p>Give a 12 to 15 minute presentation explaining the application, who it\u2019s designed to empower, and how it is a unique contribution to the transforming civil society. All members are required to speak roughly equal amounts of time. You are free to use any presentation platforms, like Powerpoint, GoogleSlides, etc., but be sure to set aside some time to demo the project and/or take screenshots of it. Rehearse the presentation at least once or twice and time it. Presentations that go over the 15 minutes will lose 5 points per minute.</p>"}, {"location": "assignments/final/#5-individual-group-evaluation", "title": "5. Individual Group Evaluation", "text": "<p>This course is designed around the principles of collaboration. In order to get a sense of how the group dynamics were and to reflect your own contributions to the group, each member must evaluate themselves and their groupmates using this form:</p> <ul> <li>https://forms.office.com/r/TaNcM3RckD [Available week 10]</li> </ul>"}, {"location": "assignments/final/#6-repository-documentation", "title": "6. Repository Documentation", "text": "<p>Complete the <code>readme.md</code> for the project repository by including a table of contents, a screenshot of the mapplication in action and what features/interactivity exists. Provide a simple explanation of the file structure. The <code>readme.md</code> should read as one cohesive documentation. Refer to this article for guidance. </p> <p>Your final <code>readme.md</code> should have the following parts:</p> <ul> <li> <p>Table of Contents</p> </li> <li> <p>Objective (Assignment #1)</p> </li> <li> <p>Who is being empowered (Assignment #2)</p> </li> <li> <p>What technology was used (Assignment #5)</p> </li> <li> <p>How it can be repurposed (Assignment #5)</p> </li> <li> <p>Features and a screenshot(s) of the mapplication</p> </li> <li> <p>Utilize the above article\u2019s <code>readme.md</code> template or something similar</p> </li> </ul>"}, {"location": "assignments/final/#presentation-guidelines", "title": "Presentation Guidelines", "text": "<p>Overall, you should be pitching the project to the audience, not simply demoing your website!</p> <ol> <li> <p>Introduce the project (1 minute)</p> </li> <li> <p>Who is the project for and why is it important? (2-3 mins) </p> </li> <li> <p>What does your website do, and how does it empower people? (2-3 mins)</p> </li> <li> <p>Demo of the website (or screenshots) (2-3 mins)</p> </li> <li> <p>How would you like your project to be used in the future or by the community members? (3 mins)</p> </li> </ol>"}, {"location": "assignments/final/#submission", "title": "Submission", "text": "<ul> <li>Select a presentation slot on the final sheet</li> <li>Separately take the individual group evaluation</li> <li>Post your group\u2019s repository and website link in this thread:</li> <li>https://github.com/albertkun/22S-ASIAAM-191A/discussions/39</li> </ul>"}, {"location": "assignments/week0/", "title": "Week 0", "text": ""}, {"location": "assignments/week0/#pre-course-survey", "title": "Pre-course survey", "text": "<p>Warning</p> <p>Due before 4/4/2023</p> <ul> <li>Fill out the pre-course survey</li> </ul>"}, {"location": "assignments/week0/#optional-pre-lab-1", "title": "Optional: Pre-lab #1", "text": "<p>You can get a head start by doing the first pre-lab.</p>"}, {"location": "assignments/week0/#optional-install-software", "title": "Optional: Install software", "text": "<p>If you are planning on using your own laptop/computer for the class, please make sure to install the following software:</p> <ul> <li>VS Code</li> <li>Firefox</li> <li>Git<sup>1</sup></li> </ul> <p>Feel free to reach out if you have trouble installing any of the software.</p> <ol> <li> <p>Please be sure to sign-up with a GitHub account before installing Git\u00a0\u21a9</p> </li> </ol>"}, {"location": "assignments/week1/", "title": "Week 1 Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 1.</p> <p>Warning</p> <p>Unless specified otherwise, all assignments are due at the beginning of class. Late assignments will be given half credit up until a week.</p> Assignment Type Due Intro to Web Dev Pre-lab Thursday 4/6 ** What are problems with the way we use data and GIS?** Thinking Cap Tuesday 4/11 An Introduction to Critical Cartography [PDF] Weekly Reading Tuesday 4/11 Simple Portfolio Lab Assignment Thursday 4/13 Repository and Readme Group Assignment Thursday 4/13", "tags": ["Week 1", "Assignments"]}, {"location": "assignments/week1/group_assignment/", "title": "Group Assignment 1: Repository and Readme", "text": "<p>Group List</p> <p>Find your name and group on the spreadsheet to remember which group you are in: https://docs.google.com/spreadsheets/d/1ZAr9Hd9fmtevEGRadA_a4xl-AoXM8eZJ3VQFygXnT5o/edit?usp=sharing</p>"}, {"location": "assignments/week1/group_assignment/#due-thursday-413", "title": "Due Thursday 4/13", "text": "<ol> <li>Have one person create a new repo for the group and invite everyone as collaborators.</li> </ol> <ul> <li>Guide on how to create a new repo and invite</li> </ul> <ol> <li>Add a <code>readme.md</code> to the repository that briefly describes the following in 1-2 sentences:</li> </ol> <ul> <li> <p>What social problem is being addressed?</p> </li> <li> <p>Who is being empowered by your mapplication?</p> </li> <li> <p>What technical and ethical problems could there be in developing this tool?</p> </li> </ul> <p>Markdown tip</p> <p>Markdown is text formatting that is used all over and commonly encountered on GitHub too! Since is your group\u2019s introduction to the world, make sure you use Markdown formatting to style your content properly.  </p> <ol> <li> <p>Post your group members and repository on the discussion board:</p> <ul> <li>https://github.com/albertkun/23S-ASIAAM-191A/discussions/3</li> </ul> </li> </ol>"}, {"location": "assignments/week1/group_assignment/#extra-credit", "title": "Extra Credit", "text": "<p>Reach out to a non-profit organization that your crowd-sourced mapping application could help support and mention them in the write-up.</p>"}, {"location": "assignments/week1/lab_assignment/", "title": "\ud83d\udcddLab Assignment #1 - Portfolio", "text": ""}, {"location": "assignments/week1/lab_assignment/#due-413", "title": "Due 4/13", "text": "<p>Time to put your skills to the test and create a home page for the individual maps that you will be making this quarter. Describe some of your interests. This is your portfolio, so feel free to delete or add anything. If you made multiple HTML pages, please link them all to the <code>index.html</code> using the <code>&lt;a href=\"\"&gt;&lt;/a&gt;</code> tag&gt;.</p> <p>Your Portfolio must contain the following:</p> <ul> <li>A <code>&lt;h1&gt;</code> tag for your title</li> <li>A <code>&lt;h2&gt;</code> or <code>&lt;h3&gt;</code> tag to create a title for a sub-section about your interests. </li> <li>A <code>&lt;p&gt;</code> tag for a paragraph describing yourself and your goals as a critical digital map maker.</li> <li>Style CSS by changing the background color, font, or anything else.</li> <li>Use an ordered list <code>&lt;ol&gt;</code> tag and an unordered list <code>&lt;ul&gt;</code> tag to list things.</li> <li>Include an <code>&lt;img&gt;</code> tag with a photo of yourself or an avatar. Feel free to add other images too to give some flavor to your page, like food or desserts.</li> <li>Use the <code>&lt;a&gt;</code> tag to add a link to 2 other web pages.</li> <li>Set up GitHub pages for your repo</li> </ul>"}, {"location": "assignments/week1/lab_assignment/#submission", "title": "Submission", "text": "<ul> <li>Commit and publish your file to your repo\u2019s GitHub pages</li> <li> <p>Find your <code>index.html</code> in the <code>week1</code> folder and copy the URL. It should look something like this:</p> </li> <li> <p>https://albertkun.github.io/23s-asiaam-191a-sample/week1/index.html</p> </li> <li> <p>Paste your link as a comment in the Discussion forum for Lab Assignment #1</p> </li> </ul>"}, {"location": "assignments/week1/lab_assignment/#extra-credit-any-of-these", "title": "Extra Credit: (any of these)", "text": "<ul> <li> <p>Add another <code>html</code> page (it can be <code>more_about_me.html</code> or anything else) not <code>index.html</code>. (Be sure to link it to your <code>index.html</code> and describe what you are showing)</p> </li> <li> <p>Add JavaScript and a map:  Add at least 2-3 markers to the map with a common theme, for example organizations you\u2019ve volunteered for or places you\u2019ve traveled. Remember to use a tool like Lat/Lng finder to get the coordinates!</p> </li> </ul>"}, {"location": "assignments/week1/lab_assignment/#html-resources-to-help-with-your-assignment", "title": "HTML Resources to help with your assignment", "text": "<ul> <li> <p>Short MDN HTML Syntax (good recap):  https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started</p> </li> <li> <p>Long overview and explanation of HTML: https://geobgu.xyz/web-mapping2/html.html</p> </li> </ul>"}, {"location": "assignments/week1/prelab/", "title": "Pre-Lab #1", "text": "<p>Info</p> <p>Pre-labs consist of the following:</p>"}, {"location": "assignments/week1/prelab/#1-checking-if-your-applications-andor-data-is-ready-for-the-labs", "title": "1. Checking if your applications and/or data is ready for the labs.", "text": ""}, {"location": "assignments/week1/prelab/#2-short-readings-that-provide-additional-technical-information-or-more-background", "title": "2. Short readings that provide additional technical information or more background.", "text": ""}, {"location": "assignments/week1/prelab/#due-before-lab-1-on-462023", "title": "Due before Lab #1 on 4/6/2023", "text": "<p>Please have this completed before the lab:</p> <ol> <li>Sign-up with a GitHub account</li> <li>Download and install Git SCM</li> <li>Download and install VS Code</li> <li>Download and install Firefox</li> <li>Read the introduction pages 1, 2, and 3 of Hands On Data Viz (Total reading time 10 - 15 minutes)</li> <li>Read Dealing with files on MDN: </li> </ol> <ul> <li>https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/Dealing_with_files.</li> </ul>"}, {"location": "assignments/week1/prelab/#additional-help", "title": "Additional Help", "text": "<p>Here are guides to help with signing-up with GitHub and installing GitSCM:</p> <ol> <li>How to sign-up for GitHub</li> <li>How to install GitSCM</li> </ol> <p>If you have any further trouble with these steps, be sure reach out to me albertkun@ucla.edu before the lab session.</p>"}, {"location": "assignments/week1/prelab/#optional-technical-readings", "title": "Optional Technical Readings", "text": "<ul> <li>HTML Basics - https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics</li> <li>CSS Basics - https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics</li> <li>JavaScript Basics - https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics</li> </ul>"}, {"location": "assignments/week1/reading/", "title": "Weekly Reading #1", "text": "<p>J. W. Crampton and J. Krygier (2010) \u201cAn Introduction to Critical Cartography\u201d. https://www.researchgate.net/publication/241435510_An_Introduction_to_Critical_Cartography</p> <p>This 15-page article summarizes critical cartography by introducing ethics and modern mapmaking technologies. It should take around 10 - 20 minutes to finish reading.</p> <p>Local PDF</p>"}, {"location": "assignments/week1/thinking_cap/", "title": "Thinking cap #1", "text": "<p>Prompt</p>"}, {"location": "assignments/week1/thinking_cap/#what-do-you-think-are-problems-with-the-way-we-use-data-and-gis", "title": "What do you think are problems with the way we use data and GIS?", "text": ""}, {"location": "assignments/week1/thinking_cap/#part-1-respond", "title": "Part 1 - Respond", "text": "<p>Respond to the prompt on GitHub</p> <ul> <li> <p>3 to 5 sentences minimum</p> </li> <li> <p>Feel free to include links and images</p> </li> </ul> <p>For more info see how to submit thinking caps, part 1.</p> <p>Reminder!</p> <p>To be eligible for extra credit, you must complete this part one day before the due date (e.g. 4/10 at 2pm PST).</p>"}, {"location": "assignments/week1/thinking_cap/#part-2-reply", "title": "Part 2 - Reply", "text": "<p>Comment on two other student\u2019s replies.</p> <p>Leave a reply on the posts of two other students, reflecting on what you think of their discussion post. You can ask a thoughtful follow-up question, express similar experiences, and share resources.</p> <p>Info</p> <p>Try to respond to students posts with no replies.</p> <p>For more details see how to submit thinking caps, part 2</p>"}, {"location": "assignments/week2/", "title": "Week 2 Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 2.</p> <p>Warning</p> <p>Unless specified otherwise, all assignments are due at the beginning of class. Late assignments will be given half credit up until a week.</p> Assignment Type Due Intro to Web Maps Pre-lab Thursday 4/13 Whose map? Who is empowered and who is disempowered? Weekly Reading Tuesday 4/18 How can we improve Critical Cartography? Thinking Cap Tuesday 4/18 Your First Web Map (for real!) Lab Assignment Thursday 4/20 Project Memo Group Assignment Thursday 4/27", "tags": ["Week 2", "Assignments"]}, {"location": "assignments/week2/group_assignment/", "title": "Group Assignment #2: Memo", "text": ""}, {"location": "assignments/week2/group_assignment/#due-thursday-427", "title": "Due Thursday 4/27", "text": "<p>Prepare a short memo (no more than two pages) for your project either using Google Docs or Microsoft Word. This document will be exchanged with other groups and form the basis of our survey testing. When finished, please upload the pdf to your repository.</p>"}, {"location": "assignments/week2/group_assignment/#requirements", "title": "Requirements", "text": "<ul> <li>Background on the social issue/campaign being addressed, please cite sources where necessary</li> <li>What the project hopes to achieve</li> <li>Description on which communities will be empowered</li> <li>At least 2 user stories from the perspective of community members</li> <li>2-3 sample questions to be included on the survey</li> <li>Future plans on how the project could be used in the future to give ownership of the tool to the community</li> </ul>"}, {"location": "assignments/week2/group_assignment/#examples", "title": "Examples", "text": ""}, {"location": "assignments/week2/group_assignment/#blank-template", "title": "Blank template", "text": "<ul> <li>https://docs.google.com/document/d/1OWUUxebPNsqw4K97gznvTkGLEr6QDAbXWqX2BGvernI | Click here to copy</li> </ul>"}, {"location": "assignments/week2/group_assignment/#top-samples-from-previous-years", "title": "Top Samples from previous years", "text": "<ul> <li>Community-based project: https://docs.google.com/document/d/1luEGoedbzhedIfqYMA7nWkhUxx3iNjDuX2HC2Sblv8w</li> <li>Community-based project: https://tinyurl.com/2s47hfwe</li> <li>Student-based project: https://docs.google.com/document/d/1SDURCaoLo6TZAHLAzLEsBFkwoq1QmT54mR6YNdFi1fw</li> <li>Student-based project: https://tinyurl.com/36rt9mm3</li> </ul>"}, {"location": "assignments/week2/group_assignment/#submission", "title": "Submission", "text": "<p>Reply discussion post link for Group Assignment #2</p>"}, {"location": "assignments/week2/lab_assignment/", "title": "\ud83d\udcddLab Assignment #2 - Your First Webmap", "text": ""}, {"location": "assignments/week2/lab_assignment/#due-420", "title": "Due 4/20", "text": "<p>In this lab, we learned how to use Leaflet and how JavaScript functions that can be used for automating tasks. Functions also form the basis of the JavaScript programming we will be doing. Your assignment this week is to create a map for your portfolio with relevant points.</p> <p>The requirements are:</p> <ul> <li>Incorporate a map into your portfolio page from last week\u2019s assignment</li> <li> <p>Add at least 3-4 markers to the map with a common theme, for example organizations you\u2019ve volunteered for or places you\u2019ve traveled. You can use this Lat/Lng tool to help find points.</p> </li> <li> <p>Use a JavaScript function to add those markers to the your map</p> </li> <li>Markers should have popups that describe what the point is.</li> </ul>"}, {"location": "assignments/week2/lab_assignment/#extra-credit", "title": "Extra Credit", "text": "<ul> <li>Use something else like images inside the pop-ups.</li> <li>Try using circle markers instead of Leaflet markers</li> <li>Try something new with the Leaflet API</li> <li>Follow the extra lab and add a GeoJSON with some other set of relevant information, you can search online for other GeoJSON datasets if you\u2019d like.</li> </ul>"}, {"location": "assignments/week2/lab_assignment/#submission", "title": "Submission", "text": "<ul> <li> <p>Commit your changes to GitHub</p> </li> <li> <p>Commit and publish your file to GitHub pages.</p> </li> <li> <p>Find your <code>index.html</code> in the <code>week2</code> in GitHub Pages and copy the URL. It should look something like this:</p> </li> <li> <p>https://albertkun.github.io/23S-ASIAAM-191A-Assignments/week2/index.html</p> </li> <li> <p>Paste your link as a comment in the Discussion forum for Lab Assignment #2:</p> </li> <li>https://github.com/albertkun/23S-ASIAAM-191A/discussions/10 </li> </ul>"}, {"location": "assignments/week2/prelab/", "title": "Prelab #2", "text": ""}, {"location": "assignments/week2/prelab/#due-413", "title": "Due 4/13", "text": "<p>These readings introduce \u201cWeb mapping\u201d technologies and will be helpful for understanding what Leaflet is and why we are using it for the labs.</p> <ol> <li>Read https://geobgu.xyz/web-mapping2/index.html#what-is-web-mapping only sections 0.1 to 0.3</li> <li>Read https://geobgu.xyz/web-mapping2/leaflet.html#introduction-5 only sections 6.1 to 6.4</li> </ol> <p>Optional more technical reading on JavaScript - https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript</p>"}, {"location": "assignments/week2/reading/", "title": "Weekly reading", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>15 - 25 minutes</li> </ul> <p>This article looks how participatory mapping in particular affects those who are mapped and unmapped, it serves as practical grounding to the concepts of critical cartography discussed this week.</p> <ul> <li>Chambers, R. (2006) Participatory Mapping and Geographic Information Systems: Whose map? Who is empowered and who is disempowered? Who gains and who loses?</li> </ul>"}, {"location": "assignments/week2/thinking_cap/", "title": "Thinking cap #2", "text": "<p>Prompt</p> <p>Reflect on the benefits and limitations of participatory mapping/critical cartography. How might we increase the participation of marginalized communities in the mapping process? How about academic researchers? </p> <p>Reviewing the readings, lecture, and discussion notes will be helpful in formulating a response.</p>"}, {"location": "assignments/week2/thinking_cap/#how-can-participatory-mapping-and-critical-cartography-be-improved", "title": "How can participatory mapping and critical cartography be improved?", "text": ""}, {"location": "assignments/week2/thinking_cap/#submission", "title": "Submission", "text": "<p>Post your thinking cap response and reply to others in this thread here:</p> <ul> <li>Thinking Cap #2 Submission thread</li> </ul> <p>Reminders</p> <ul> <li>Extra credit is only available if you submit 1 day before the deadline (i.e. Monday 4/17) at 2pm.</li> <li>Be sure to read the weekly reading reading before formulating a response!</li> </ul> <p>!!!! question \u201cRemember!\u201d     Refer to this documentation if you need a reminder on how to complete the assignment.</p>"}, {"location": "assignments/week3/", "title": "Week 3 Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 3.</p> Assignment Type Due Optional: GeoJSON Leaflet tutorial Pre-lab Thursday 4/20 Looking Beyond OpenSource Weekly Reading Tuesday 4/25 How are closed source tools harmful for civil society? What about open source tools? Thinking Cap Tuesday 4/25 GeoJSON and User Experience Lab Assignment Wednesday 4/28 Project Memo Group Assignment Wednesday 4/28", "tags": ["Week 3", "Assignments"]}, {"location": "assignments/week3/extra_credit/", "title": "\u2b50Extra Credit\u2b50", "text": "<p>Is extra worth it?!</p> <p>Extra credit assignments are worth up to 10 points and are added to your overall class total for the <code>individual assignment</code> (450) category and <code>participation</code> (100).</p> <p>There is one opportunity for extra credit this week:</p>"}, {"location": "assignments/week3/extra_credit/#attend-an-event-15-points", "title": "Attend an event (15 points)", "text": "<ul> <li>Write a short thinking cap after participating in the <code>International Humanitarian Mapathon</code> from 4/18 - 4/20. You can find more information about the event at https://mapathon.la/.</li> <li>Submit your thinking cap as a comment in the discussion here</li> </ul>"}, {"location": "assignments/week3/lab_assignment/", "title": "\ud83d\udcddLab Assignment #3 - User Experience and GeoJSON", "text": ""}, {"location": "assignments/week3/lab_assignment/#due-428", "title": "Due 4/28", "text": "<p>In this week\u2019s lab, we learned how to add buttons and a styled GeoJSON to our map. Your assignment this week has two parts:</p> <ol> <li>Part A - Create a map that will pan to certain makers when a button is clicked.</li> <li>Part B - Create a map that is based off of a GeoJSON and style the GeoJSON.</li> </ol> <p>For this assignment you can submit each map separately, for example as <code>week3a</code> and <code>week3b</code>. Or you can bundle them together as <code>week3</code> for extra credit.</p>"}, {"location": "assignments/week3/lab_assignment/#requirements-for-part-a", "title": "Requirements for Part A", "text": "<ul> <li>Add at least 3 markers to the map using a JavaScript function (these markers can be same as lab assignment #2)</li> <li>Use the <code>&lt;button&gt;</code> element to execute a JavaScript function to interact with your map </li> <li>Add an Event Listener that executes the JavaScript function to interact with your map</li> </ul>"}, {"location": "assignments/week3/lab_assignment/#requirements-for-part-b", "title": "Requirements for Part B", "text": "<ul> <li>Add a GeoJSON to your map (this can be combined with the markers from Part A for extra credit)</li> </ul>"}, {"location": "assignments/week3/lab_assignment/#extra-credit", "title": "Extra Credit", "text": "<ul> <li>Style the GeoJSON</li> <li>Combine both maps into one page with a common theme</li> <li>Use something else like images or text to move the map.</li> <li>Try something new with the Leaflet API</li> </ul>"}, {"location": "assignments/week3/lab_assignment/#submission", "title": "Submission", "text": "<ul> <li> <p>Commit your changes to GitHub</p> </li> <li> <p>Commit and publish your file to GitHub pages.</p> </li> <li> <p>Find your <code>index.html</code> in the <code>week3a</code> in GitHub Pages and copy the URL. It should look something like this:</p> </li> <li>https://albertkun.github.io/23S-ASIAAM-191A-Assignments/week3a/index.html</li> <li>Find your <code>index.html</code> in the <code>week3b</code> in GitHub Pages and copy the URL. It should look something like this:</li> <li> <p>https://albertkun.github.io/23S-ASIAAM-191A-Assignments/week3b/index.html</p> </li> <li> <p>Paste your link as a comment in the Discussion forum for Lab Assignment #3:</p> </li> <li>https://github.com/albertkun/23S-ASIAAM-191A/discussions/13</li> </ul>"}, {"location": "assignments/week3/prelab/", "title": "(Optional) Prelab #3", "text": "<p>This week\u2019s prelab are optional readings on (1) GeoJSON from the Leaflet documentation and (2) event listeners. Both may be helpful for those without a coding background:</p> <ul> <li>https://rowanhogan.github.io/Leaflet/examples/geojson.html</li> <li>https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#what_is_an_event</li> </ul>"}, {"location": "assignments/week3/reading/", "title": "Weekly reading - Looking Beyond OpenSource", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>20 - 30 minutes</li> </ul> <p>The following two articles were sourced from the Ethical Source Software Foundation and they cover the issues with open-source licensing. The first article serves as an introduction to ethical source licensing. The second article discusses the influence of oil and military in geospatial (GIS) software.</p> <ul> <li>Open-source software: freedom from ethics? [14-18 minutes]</li> <li>Ethics in Geo [7-9 minutes]</li> </ul>"}, {"location": "assignments/week3/thinking_cap/", "title": "Thinking cap #3", "text": "<p>Prompt</p> <p>Reflect on the implications of the tools that we chose for digital mapping and how that may impact civil society. Think about why focusing on closed source tools is a good or bad thing. Similarly, think about the pros and cons of open source tools and how recent developments in AI may effect our approach to digital mapping.</p> <p>Reviewing the readings, lecture, and discussion notes is helpful in formulating a response.</p>"}, {"location": "assignments/week3/thinking_cap/#how-are-closed-source-tools-harmful-for-civil-society-what-about-open-source-tools-where-do-you-think-artificial-intelligence-ai-fits-into-this", "title": "How are closed source tools harmful for civil society? What about open source tools? Where do you think Artificial Intelligence (AI) fits into this?", "text": ""}, {"location": "assignments/week3/thinking_cap/#submission", "title": "Submission", "text": "<p>Post your thinking cap response and reply to others in this thread here:</p> <ul> <li>Thinking Cap #3 submission thread</li> </ul> <p>Reminders</p> <ul> <li>Extra credit is only available if you submit 1 day before the deadline (i.e. Monday 4/24) at 2pm.</li> <li>Be sure to read the weekly readings reading before formulating a response!</li> </ul> <p>!!!! question \u201cRemember!\u201d     Refer to this documentation if you need a reminder on how to complete the assignment.</p>"}, {"location": "assignments/week4/", "title": "Week 4 Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 4.</p> Assignment Type Due Prelab Pre-lab Thursday 4/27 Technology and Ethics Weekly Reading Tuesday 5/2 What are your ethics with technology and society? Thinking Cap Tuesday 5/2 Survey Group Assignment Thursday 5/4 Revision: Memo Group Assignment Thursday 5/4", "tags": ["Week 4"]}, {"location": "assignments/week4/group_assignment/", "title": "Group Assignment 3 - Survey &amp; Revision of Memo", "text": "", "tags": ["Group Assignment 3"]}, {"location": "assignments/week4/group_assignment/#due-thursday-511", "title": "Due Thursday 5/11", "text": "<p>Design a survey that will focus on the community voices for your project. As part of this assignment, your group must also check-in with me by the end of week 4.</p>", "tags": ["Group Assignment 3"]}, {"location": "assignments/week4/group_assignment/#resouces", "title": "Resouces", "text": "<p>Week 4\u2019s pre-lab on survey design will be helpful to reference: - |Prelab</p>", "tags": ["Group Assignment 3"]}, {"location": "assignments/week4/group_assignment/#submission", "title": "Submission", "text": "", "tags": ["Group Assignment 3"]}, {"location": "assignments/week4/group_assignment/#survey", "title": "Survey", "text": "<p>Submit your survey as one group using this Google Form:</p> <ul> <li>https://forms.gle/yrKyrHaoAJoW9xbbA</li> </ul> <p>Submit your revised memo on the following thread or via email: https://github.com/albertkun/23S-ASIAAM-191A/discussions/16</p> <p>Google Form sharing settings</p> <p>Make sure your Google form is set to anyone with the link can view. If you do not do this, I will not be able to see your form. You can change this setting by clicking on the Send button in the top right corner of your Google Form: https://support.google.com/docs/answer/160166?visit_id=638191971424789734-763542883&amp;p=forms_settings&amp;rd=1#.</p>", "tags": ["Group Assignment 3"]}, {"location": "assignments/week4/prelab/", "title": "Prelab #4", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>15 - 25 minutes</li> </ul> <p>As we begin to work with Google Forms this week, the first reading is helpful for understanding survey data questions. The second reading demonstrates important considerations in designing any participatory mapping activity. </p> <p>The third and optional reading is for those who have not used Google Forms before. </p>"}, {"location": "assignments/week4/prelab/#readings", "title": "Readings", "text": "<ul> <li> <p>Harvard tip sheet for designing questions: https://psr.iq.harvard.edu/files/psr/files/PSRQuestionnaireTipSheet_0.pdf [5 mins]</p> </li> <li> <p>Shortened version of Participatory Asset Mapping [15 mins]</p> </li> </ul>"}, {"location": "assignments/week4/prelab/#optional", "title": "Optional", "text": "<p>Know about Google Forms?</p> <p>Skip this if you are familiar with the basics of creating a Google Form.</p> <ul> <li>Google\u2019s 3 steps of getting started with Google Forms [3 mins]</li> </ul>"}, {"location": "assignments/week4/reading/", "title": "Weekly reading - Technology and Ethics", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>20 - 30 minutes</li> </ul> <p>The readings this week are designed to show development (and lack) of ethics from the past and to the present. Jeremmy Krampton\u2019s paper shows a past view of GIS and ethics in 1995, while Paris Marx\u2019s article describes the lack of a systematic approach to view social problems with technology in \u201cDon\u2019t Blame Social Media. Blame Capitalism.\u201d</p> <ul> <li>Crampton, J. (1995) The Ethics of GIS. [10-15 minutes]</li> <li>Marx, P. (2020) Don\u2019t Blame Social Media. Blame Capitalism. [10-15 minutes]</li> </ul>"}, {"location": "assignments/week4/thinking_cap/", "title": "Thinking cap #4", "text": ""}, {"location": "assignments/week4/thinking_cap/#due-52", "title": "Due 5/2", "text": "<p>Prompt</p> <p>Reflect on the relationship between science, technology, and ethics covered on the lecture and reading.</p> <p>This weeks readings will be helpful in forumlating a response.</p>"}, {"location": "assignments/week4/thinking_cap/#what-are-your-ethical-views-when-it-comes-to-society-and-technology-how-do-your-ethics-empower-civil-society", "title": "What are your ethical views when it comes to society and technology? How do your ethics empower civil society?", "text": ""}, {"location": "assignments/week4/thinking_cap/#submission", "title": "Submission", "text": "<p>Post your thinking cap response and reply to others in this thread here:</p> <ul> <li>Thinking Cap #4 submission thread</li> </ul> <p>Reminders</p> <ul> <li>Extra credit is only available if you submit 1 day before the deadline (i.e. Monday 5/1) at 2pm.</li> <li>Be sure to read the weekly readings reading before formulating a response!</li> </ul> <p>!!!! question \u201cRemember!\u201d     Refer to this documentation if you need a reminder on how to complete the assignment.</p>"}, {"location": "assignments/week5/", "title": "Week 5 Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 5.</p> Assignment Type Due Survey and Memo Revision Group Assignment Tuesday 5/9 Loops and APIs Lab Assignment Thursday 5/11", "tags": ["Week 5"]}, {"location": "assignments/week5/lab_assignment/", "title": "\ud83d\udcddLab Assignment #4 - Loops and APIs", "text": ""}, {"location": "assignments/week5/lab_assignment/#due-516-tuesday", "title": "Due 5/16 Tuesday", "text": "<p>In this week\u2019s lab, we learned how to loop through data and connect to an API. Your task is to create a mini-version of the final group project for the class that takes in data and maps it.</p> <p>The requirements are:</p> <ul> <li>Use any type of for-loop within a JavaScript function that adds API data from your Google Spreadsheet form.</li> <li>Add data from Google Spreadsheets into your map using PapaParse</li> <li>Add a pop-up with at least 2 fields from the Google Form.</li> <li>Note: Your Google Form CANNOT be the same topic as the lab (COVID Vaccination)</li> </ul>"}, {"location": "assignments/week5/lab_assignment/#extra-credit", "title": "Extra credit", "text": "<ul> <li>Add buttons based on the spreadsheet data</li> <li>Add your own array of data and loop through it.</li> </ul>"}, {"location": "assignments/week5/lab_assignment/#submission", "title": "Submission", "text": "<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>Week_05</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/23S-ASIAAM-191A-Assignments/Week_05/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #4:</li> <li>https://github.com/albertkun/23S-ASIAAM-191A/discussions/18</li> </ul>"}, {"location": "assignments/week6/", "title": "Week 6 Assignments List", "text": "<p>Below is the list of all assignments assigned and due during week 6.</p> Assignment Type Due Survey and Memo Revision Group Assignment Thursday 5/11 CSS and CSS Grid Prelab Pre-lab Thursday 5/11 Loops and APIs Lab Assignment Tuesday 5/16 Design Justice Weekly Reading Tuesday 5/16 What do you think about Design Justice Thinking Cap Tuesday 5/16 CSS Grid Layouts Lab Assignment Thursday 5/18 Survey Diagram and Wireframe Group Assignment Tuesday 5/18", "tags": ["Week 6"]}, {"location": "assignments/week6/group_assignment/", "title": "Group Assignment 4 - Survey Diagram and Wireframe", "text": ""}, {"location": "assignments/week6/group_assignment/#due-525", "title": "Due 5/25", "text": "<p>With the survey and memo drafted, we can now make sure that our survey fits our goals set out in the memo and think about how the final application will look. Revising your survey is also an optional part of this assignment.</p> <p>There are two seperate parts to this assignment. Both deliverables can use the following tools or anything else your group is comfortable with:</p> <ul> <li>Pen and paper</li> <li>Draw.io</li> <li>Google Slides</li> <li>Figma</li> </ul>"}, {"location": "assignments/week6/group_assignment/#part-1-survey-diagram", "title": "Part 1: Survey Diagram", "text": "<p>Generate a diagram that explains how your survey questions and objectives in the memo are connected to goal of empowering the community. </p> <p>Your diagram must have these components:</p> <ol> <li>Represent the specific community are you trying to uplift.</li> <li>Represent the survey/project goal.</li> <li>Represent each question in your survey and draw lines connecting them to either the community representation or the survey/project goal. </li> <li>As you draw the lines from each question, explain what connection is being made.</li> </ol> <p>Feel free to get creative, but be sure to emphasis how your questions are related to the objective of the survey.</p> <p>See below for an example using Draw.io:  https://drive.google.com/file/d/12UbBhuXm28RAhgFo5nLiVZ9cmtzNecwi/view?usp=sharing</p>"}, {"location": "assignments/week6/group_assignment/#part-2-simple-wireframe", "title": "Part 2: Simple wireframe", "text": "<p>Imagine how the results of the survey and develop a VERY simple wireframe on what your web application would look like.</p> <p>The wireframe must include the following:    1. A map (e.g. a panel that says <code>map</code> is fine)    2. Interaction that shows the community empowerment in action (e.g. <code>pop-up on the map</code> or <code>panel to the left with stories</code>)    3. An interaction to fill out the survey (e.g. a button for <code>taking the survey</code>)</p> <p></p>"}, {"location": "assignments/week6/group_assignment/#select-examples", "title": "Select examples", "text": ""}, {"location": "assignments/week6/group_assignment/#survey-diagram", "title": "Survey Diagram", "text": "<ul> <li>Reimagining 6th Street Survey Diagram</li> <li>Bruins Mental Health Project</li> <li>Migrant Justice</li> <li>UCLA Health</li> </ul>"}, {"location": "assignments/week6/group_assignment/#wireframe", "title": "Wireframe", "text": "<ul> <li>Reimagining 6th Wireframe.pdf</li> <li>Bruins Mental Health Project</li> <li>Migrant Justice</li> <li>UCLA Health</li> </ul>"}, {"location": "assignments/week6/group_assignment/#submission", "title": "Submission", "text": "<p>Have a group member comment on the following thread with links to the diagrams/photos: https://github.com/albertkun/23S-ASIAAM-191A/discussions/21</p>"}, {"location": "assignments/week6/lab_assignment/", "title": "\ud83d\udcddLab Assignment #5 - CSS Grid Layouts", "text": ""}, {"location": "assignments/week6/lab_assignment/#due-518", "title": "Due 5/18", "text": "<p>Using your lab assignment from <code>week 5</code>, touch up your mapplication by creating a layout with CSS Grid and making a cohesive webpage.</p> <p>The requirements are:</p> <ul> <li>A title for the webpage describing what is being shown</li> <li>Design a responsive-layout using CSS Grid</li> <li>Use a sub-grid (grid-within-a-grid)</li> <li>Utilize <code>buttons</code> or <code>divs</code> to interact with your map (Revisit Lab #3 for more info)</li> </ul>"}, {"location": "assignments/week6/lab_assignment/#submission", "title": "Submission", "text": "<p>Post your link as a comment in the Discussion forum for Lab Assignment #5</p>"}, {"location": "assignments/week6/lab_assignment/#extra-credit", "title": "Extra Credit", "text": "<p>Any of the following can be done for extra credit:</p> <ul> <li>Create a completely different responsive layout using CSS grid</li> <li>Add multiple CSS grids</li> <li>Move the survey into a button, rather than an iframe!</li> <li>Utilize circleMarkers instead of regular markers</li> <li>Use CSS to style the marker pop-up window!</li> <li>Try a sticky header</li> </ul>"}, {"location": "assignments/week6/lab_assignment/#recommended-reading", "title": "Recommended Reading", "text": "<p>Formerly the pre-lab:</p> <ul> <li> <p>MDN CSS Basics</p> </li> <li> <p>MDN CSS Grid</p> </li> </ul>"}, {"location": "assignments/week6/lab_assignment/#extra-resources", "title": "Extra Resources", "text": "<ul> <li> <p>MDN CSS Grid Guides</p> </li> <li> <p>CSS Grid Starter Layouts</p> </li> <li> <p>CSS Grid Styling</p> </li> </ul>"}, {"location": "assignments/week6/prelab/", "title": "Pre-lab", "text": ""}, {"location": "assignments/week6/prelab/#due-thursday-511", "title": "Due Thursday 5/11", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>30 - 40 minutes</li> </ul> <p>This week\u2019s pre-lab is a refresher on CSS and also introduces CSS Grid. </p> <ul> <li> <p>MDN CSS Basics</p> </li> <li> <p>MDN CSS Grid</p> </li> </ul>"}, {"location": "assignments/week6/reading/", "title": "Weekly reading - Data Justice", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>30 - 45 minutes</li> </ul> <p>This week\u2019s reading is about Design Justice that connects intersectionality with design as an ethically grounded framework.</p> <ul> <li>Costanza-Chock, S. (2018) Design Justice. [30-45 minutes]</li> </ul>"}, {"location": "assignments/week6/thinking_cap/", "title": "Thinking cap #5", "text": "<p>Prompt</p> <p>Read this week\u2019s reading on Design Justice and reflect on how design justice is a way to connect justice to design on a practical level.</p>"}, {"location": "assignments/week6/thinking_cap/#what-do-you-think-about-design-justice-how-might-you-apply-it-in-your-designs-going-forward", "title": "What do you think about design justice? How might you apply it in your designs going forward?", "text": ""}, {"location": "assignments/week6/thinking_cap/#submission", "title": "Submission", "text": "<p>Post your thinking cap response and reply to others in this thread here:</p> <ul> <li>Thinking Cap #5 submission thread</li> </ul> <p>Reminders</p> <ul> <li>Extra credit is only available if you submit 1 day before the deadline (i.e. Monday 5/16) at 2pm.</li> </ul> <p>!!!! question \u201cRemember!\u201d     Refer to this documentation if you need a reminder on how to complete the assignment.</p>"}, {"location": "assignments/week7/", "title": "Week 7 Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 7.</p> Assignment Type Due Memo Revision Group Assignment Tuesday 5/23 Survey Revision Group Assignment Tuesday 5/23 Data Justice Weekly Reading Tuesday 5/23 The connection between Data Justice, Design Justice, and us Thinking Cap Tuesday 5/23 Conditional Visual Design Lab Assignment Thursday 5/25 Survey Diagram and Wireframe Group Assignment Tuesday 5/23", "tags": ["Week 7"]}, {"location": "assignments/week7/lab_assignment/", "title": "\ud83d\udcddLab Assignment #6 - Conditional Visual Design", "text": ""}, {"location": "assignments/week7/lab_assignment/#due-525", "title": "Due 5/25", "text": "<p>Using your assignment from <code>week 6</code>, categorize your survey data to convey a message or theme about your map. </p> <p>Note: You will need a closed-ended question (multiple-choice) in your survey to make this task easier.</p>"}, {"location": "assignments/week7/lab_assignment/#requirements", "title": "Requirements", "text": "<ul> <li>Use a conditional <code>if-else</code> statement</li> </ul>"}, {"location": "assignments/week7/lab_assignment/#extra-credit-original-lab-content", "title": "Extra Credit - Original Lab Content", "text": "<ul> <li>Use at least 2 different layer groups - Customize Leaflet\u2019s <code>circle markers</code></li> <li>Add a title or a explanation that describes what is being shown</li> </ul>"}, {"location": "assignments/week7/lab_assignment/#extra-credit-refactor-challenge", "title": "Extra Credit - Refactor Challenge", "text": "<ul> <li>Try to create a different layout.</li> <li>Attempt the refactor challenge using your own way to refactor the code</li> </ul>"}, {"location": "assignments/week7/lab_assignment/#submission", "title": "Submission", "text": "<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>Week_07</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/23S-ASIAAM-191A-Assignments/Week_07/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #6:</li> <li>https://github.com/albertkun/23S-ASIAAM-191A/discussions/23</li> </ul>"}, {"location": "assignments/week7/reading/", "title": "Weekly reading - Data Justice", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>25 - 30 minutes</li> </ul> <p>This week\u2019s reading is meant to connect with last\u2019s weeks reading on Design Justice and provide a framework for how we can approach our data in our group projects via Data Justice.</p> <ul> <li>Dencik, L., Redden, J., and Trer\u00e9, E. (2019) Exploring Data Justice: Conceptions, Applications and Directions [25-30 minutes]</li> </ul>"}, {"location": "assignments/week7/thinking_cap/", "title": "Thinking cap #6", "text": "<p>Prompt</p> <p>Reflect on design justice and how that is a way to connect justice to design on a practical day-to-day level.</p> <p>Be sure to complete this week\u2019s reading on Data Justice before forumlating a response.</p>"}, {"location": "assignments/week7/thinking_cap/#how-do-you-think-data-justice-and-design-justice-relate-how-have-you-considered-both-in-relation-to-your-group-projects", "title": "How do you think data justice and design justice relate? How have you considered both in relation to your group projects?", "text": ""}, {"location": "assignments/week7/thinking_cap/#submission", "title": "Submission", "text": "<p>Post your thinking cap response and reply to others in this thread here:</p> <ul> <li>Thinking Cap #6 submission thread</li> </ul> <p>Reminders</p> <ul> <li>Extra credit is only available if you submit 1 day before the deadline (i.e. Monday 5/22) at 2pm.</li> </ul> <p>!!!! question \u201cRemember!\u201d     Refer to this documentation if you need a reminder on how to complete the assignment.</p>"}, {"location": "assignments/week8/", "title": "Week 8 Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 8.</p> Assignment Type Due In-Class Thinking Cap Thinking Cap Tuesday 5/23 Rough Draft(./group_assignment.md) Group Assignment Thursday 6/1", "tags": ["Week 8"]}, {"location": "assignments/week8/group_assignment/", "title": "Group Assignment 5 - Rough Draft", "text": ""}, {"location": "assignments/week8/group_assignment/#due-61", "title": "Due 6/1", "text": "<p>Create a functional (doesn\u2019t have to be pretty or clean) version of your mapplication using the survey from students in class.</p> <p>This assignment will be graded on the following:</p> <ol> <li>Fulfillment of the user stories set forth in the memo</li> <li>Relevant functionality that is specific to empowering community voices</li> <li>A <code>readme.md</code> for the repository that describes the technology used for the project and how others could use it in the future</li> <li>A short 2-3 minute presentation</li> </ol>"}, {"location": "assignments/week8/group_assignment/#presentation-2-3-minutes-total", "title": "Presentation (2-3 minutes total)", "text": "<ol> <li>Who is the project for and why is it important?</li> <li>How does the website empower people?</li> <li>What changes you would like to focus on between now and the final? Why?</li> </ol> <p>Everyone is required to speak.</p>"}, {"location": "assignments/week8/group_assignment/#technical-requirements", "title": "Technical Requirements", "text": "<ul> <li>A map is required</li> <li>Usage of survey responses is required</li> <li>Please come up with a unique name for your group</li> </ul>"}, {"location": "assignments/week8/group_assignment/#submission", "title": "Submission", "text": "<p>Post your group\u2019s repository and website link in this assignment thread:</p> <ul> <li>https://github.com/albertkun/23S-ASIAAM-191A/discussions/25</li> </ul>"}, {"location": "assignments/week8/thinking_cap/", "title": "In-class thinking cap", "text": ""}, {"location": "assignments/week8/thinking_cap/#due-in-class-523-or-by-530", "title": "Due in class 5/23 (or by 5/30)", "text": "<p>Respond to ANY or all of the prompts below in 2-3 sentences:</p> <ol> <li> <p>Did the simple act of stating your problem out loud bring any insights?</p> </li> <li> <p>Did your partner bring anything up that you had not considered?</p> </li> <li> <p>Was it difficult to avoid giving advice?</p> </li> <li> <p>How do you seek to be peers and/or mentors for civil society?</p> </li> </ol> <p>You do not need to respond to any students for this thinking cap.</p>"}, {"location": "assignments/week8/thinking_cap/#submission", "title": "Submission", "text": "<p>Post your thinking cap response and reply to others in this thread here:</p> <ul> <li>Thinking Cap #7 submission thread</li> </ul> <p>!!!! question \u201cRemember!\u201d     Refer to this documentation if you need a reminder on how to complete the assignment.</p>"}, {"location": "assignments/week9/", "title": "Week 9 Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 9.</p> Assignment Type Due Final Thinking Cap Thinking Cap Thursday 6/8 Final Lab Assignment In-class Lab Assignment Thursday 6/8", "tags": ["Week 9"]}, {"location": "assignments/week9/lab_assignment/", "title": "Final Lab Assignment \ud83d\udc69\u200d\ud83d\udcbb", "text": "<p>Note</p> <p>This is a group assignment. Only one person per group needs to do this.</p> <p>Join up with your group. With the remaining time, look at some of the plugins below and try to implement them into your mapplication or your own group projects:</p>"}, {"location": "assignments/week9/lab_assignment/#due-68-if-not-done-in-class", "title": "Due 6/8 (if not done in class)", "text": ""}, {"location": "assignments/week9/lab_assignment/#instructions", "title": "Instructions", "text": "<ol> <li>Go to the Git Practicing repo and do a <code>git pull</code> (if you have not cloned it already, then clone it). If you run into errors on the branch, you may need to run <code>git pull --rebase</code></li> <li>Try out one of the following Leaflet plugins from the list below OR explore one from this list and add to the end of the table: https://leafletjs.com/plugins.html</li> <li>Find your group in the table, put the tool name, and comments about the tool, Plugin Review section below.</li> <li>Optional: If you were able to get the example up and running, put your GitHub pages example under the \u201cExample Implementation\u201d.</li> <li>Make a Pull Request to this Git Practing Repo and contribute your changes!</li> </ol>"}, {"location": "assignments/week9/lab_assignment/#plugin-list", "title": "Plugin List", "text": "Plugin Name Link UI Sidebar v2 https://github.com/noerw/leaflet-sidebar-v2 Sidebar v2 https://github.com/turbo87/sidebar-v2/ Leaflet Control Window https://github.com/mapshakers/leaflet-control-window Leaflet Sleep https://cliffcloud.github.io/Leaflet.Sleep/ Markers Beautify Marker https://github.com/masajid390/BeautifyMarker Icon Pulse https://github.com/mapshakers/leaflet-icon-pulse Parallax Marker https://dagjomar.github.io/Leaflet.ParallaxMarker/ Leaflet Swoopy https://wbkd.github.io/leaflet-swoopy/ Others Leaflet Hex Timeslider https://github.com/albertkun/leaflet_hex_timeslider <p>Leave a review of one of them in the Git-Practicing Repo:</p> <ul> <li>https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing/blob/main/review.md</li> </ul> <p>Feel free to try others not in this list and add it to the doc.</p> <p>Pay attention to how important good documentation is and how your own group projects <code>readme.md</code> should be structured. Creating a <code>branch</code> will be helpful when testing new features. Refer to lab 8 for a refresher on branches.</p>"}, {"location": "assignments/week9/lab_assignment/#submission", "title": "Submission", "text": "<p>As a group, have one person make a pull request in the following repo with your comments on a plugin:</p> <ul> <li>https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing/blob/main/review.md</li> </ul>"}, {"location": "assignments/week9/thinking_cap/", "title": "Final Thinking Cap", "text": ""}, {"location": "assignments/week9/thinking_cap/#due-68", "title": "Due 6/8", "text": "<p>What are your thoughts about the future of web development for civil society? Which visiting voice left the most impact on you? What connections to people (if any) would you like to maintain from this class going forward?</p>"}, {"location": "assignments/week9/thinking_cap/#submission", "title": "Submission", "text": "<p>Respond in at least 4-5 sentences before Thursday, 6/8 and respond to at least one other student on the following thread:</p> <p>https://github.com/albertkun/23S-ASIAAM-191A/discussions/27</p>"}, {"location": "help/", "title": "Help", "text": "<p>If you run into any issues, please check the guides below first. Then feel free to ask on Discord  or the GitHub discussion forums .</p> <p>You can always contact me below if you have questions.</p>"}, {"location": "help/#instructor-contact", "title": "Instructor Contact", "text": "<p>Albert S. Kochaphum (albertkun@ucla.edu)</p>"}, {"location": "help/#office-hours", "title": "Office Hours", "text": "<p>Tuesdays and Thursdays 3:15pm \u2013 4pm in Public Affairs 2400A and online by appointment below:</p> <ul> <li>https://calendly.com/aa191a/office-hours</li> </ul>"}, {"location": "help/#list-of-class-how-to-guides", "title": "List of class How-To guides", "text": "<p>Below are step-by-step guides on getting started with the course. </p>"}, {"location": "help/#course-related", "title": "Course Related", "text": "<ol> <li> <p>Posting a Thinking Cap</p> </li> <li> <p>Submit Lab Assignments</p> </li> </ol>"}, {"location": "help/#git-related", "title": "Git Related", "text": "<ol> <li> <p>GitHub Sign-Up</p> </li> <li> <p> Installing Git SCM</p> </li> <li> <p> Creating a Repository in GitHub</p> </li> <li> <p>Git Clone in VS Code</p> </li> <li> <p>Committing code to GitHub in VS Code</p> </li> </ol>"}, {"location": "help/final_project_examples/", "title": "A+ Final Projects from 2022", "text": "<p>https://lindseymardona.github.io/group-8/final/index.html</p> <p>https://bittertang.github.io/UCLAsianStories/index.html</p>"}, {"location": "help/final_project_examples/#other-notable-examples", "title": "Other notable examples", "text": "<ul> <li>https://stefuntran.github.io/AAPI-Discrimination/</li> <li>https://kaittli.github.io/aanhpi-healthcare/index.html</li> </ul>"}, {"location": "help/git_cloning/", "title": "Guide for cloning", "text": "<ol> <li> <p>Launch VS Code from Launcher (Mac) or Start Menu (PC)</p> </li> <li> <p>On the <code>Welcome</code> screen click <code>Clone Repository</code>:</p> </li> </ol> <p></p> <ol> <li>Click <code>Clone from GitHub</code></li> </ol> <p></p> <ol> <li>Allow GitHub to sign in Accept the following dialogue box:</li> </ol> <p></p> <ol> <li>Click <code>Continue</code> in the web browser that opens up:</li> </ol> <p></p> <ol> <li>Click <code>Choose Application</code></li> </ol> <p></p> <ol> <li>Click Open Link:</li> </ol> <p></p> <ol> <li>Click <code>Open</code>:</li> </ol> <p></p> <ol> <li>Search for the class repository by typing <code>23S-191A-AsianAm</code> and     then select the repository: albertkun/23S-ASIAAM-191A</li> </ol> <p></p> <ol> <li>Select a folder to clone into:</li> </ol> <p></p> <ol> <li>Click <code>Open</code> in your locally cloned repo:</li> </ol> <p></p> <ol> <li>You can see the files by clicking on the Explorer to the right:</li> </ol> <p></p> <ol> <li>Now you are ready for all labs!</li> </ol>"}, {"location": "help/git_commit/", "title": "Guide for using Git Commit in VS Code", "text": ""}, {"location": "help/git_commit/#requirements", "title": "Requirements:", "text": "<ul> <li>Git Clone completed</li> <li>Git Fork completed</li> <li>Git Fetch completed</li> </ul> <p>This guide will walk you through how to push to your lab assignment repo after you have finished your assignments.</p> <ol> <li> <p>Make sure the explorer bar is active</p> </li> <li> <p>Make sure you have changes to commit, for example you should have modified a file (M), created a file (U), or deleted a file (D). </p> </li> <li>Click on \u201cVersion Control\u201d in the Activity Bar </li> <li>Add a commit message that is meaningful </li> <li>Click the checkmark </li> <li>Click the expanded options menu </li> <li>Choose \u201cPush\u201d to push to GitHub </li> <li>Go to your GitHub repository and check to see if your repository has updated. </li> </ol>"}, {"location": "help/git_creating/", "title": "Guide for creating a repository and inviting group members", "text": "<p>This guide is designed to show you how to create a repository and add group members.</p> <ol> <li>After logging in to GitHub click the plus icon and choose <code>New     repository</code>:</li> </ol> <p></p> <ol> <li>Input your group name:</li> </ol> <p></p> <ol> <li>Click <code>Create Repository</code>:</li> </ol> <p></p>"}, {"location": "help/git_creating/#adding-your-partners-as-collaborators", "title": "Adding your partners as collaborators", "text": "<ol> <li>Go to settings:</li> </ol> <ol> <li>Click manage access:</li> </ol> <ol> <li>Click invite a collaborator:</li> </ol> <ol> <li>Search for your teammate\u2019s email or username:</li> </ol> <ol> <li>Click:</li> </ol> <ol> <li>And add:</li> </ol> <ol> <li>Remember to clone the repository locally and start collaborating!</li> </ol>"}, {"location": "help/git_creating/#warnings-about-merge-conflicts", "title": "Warnings about \u201cMerge Conflicts\u201d", "text": "<ol> <li> <p>If you do not use <code>git pull</code> to update periodically update repository and/or push     your changes, you may run into <code>merge conflicts</code> when two files are being edited at the same time.</p> </li> <li> <p>If you do run into a <code>merge conflict</code>, someone should merge the     conflicting files. Please or check out this article on merge conflicts:</p> </li> </ol> <p>https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/addressing-merge-conflicts</p> <ol> <li>We will be covering merge conflicts in detail a little later.</li> </ol>"}, {"location": "help/git_fetch_remote_upstream/", "title": "Updating the Lab Assignment repo", "text": ""}, {"location": "help/git_fetch_remote_upstream/#requirements", "title": "Requirements:", "text": "<ul> <li>Forked Lab Assignment repo guide completed</li> </ul> <p>This guide will walk you through how to update the forked lab assignment repo. </p>"}, {"location": "help/git_fetch_remote_upstream/#open-the-lab-assignment-repository", "title": "Open the Lab Assignment repository", "text": "<p>In VS Code find and open the folder for the lab assignment repository. </p> <p>If you recently worked on the lab you can find it in the \u201cRecent\u201d section like so: </p> <p>Checking the Remote Upstream To make sure that the remote upstream is correct, run the command:</p> <p><code>git remote --v</code></p> <p>The <code>origin</code> should be set to your account, while the <code>upstream</code> to be set to the instructors account <code>albertkun</code>:</p> <p></p>"}, {"location": "help/git_fetch_remote_upstream/#wrong-upstream", "title": "Wrong upstream?", "text": "<p>If you have the wrong upstream, remove the current <code>upstream</code> by running: </p> <p><code>git remote rm upstream</code></p> <p>And then add the correct upstream by running:</p> <p><code>git remote add upstream https://github.com/albertkun/21S-ASIAAM-191A-Assignments.git</code></p>"}, {"location": "help/git_fetch_remote_upstream/#update-the-repo", "title": "Update the repo", "text": "<p>As with every week, start with pulling from the main repository by running:</p> <p><code>git pull upstream main</code></p> <p>It should look something similar to this: </p> <p>Open the Explorer tab in the activity bar to see if the new week has appeared: </p> <p>If it has, then congratulations, it should look something like this: </p>"}, {"location": "help/git_forking/", "title": "Guide for forking", "text": "<ol> <li>Go to the Lab Assignments Repository:</li> </ol> <p>https://github.com/albertkun/23S-ASIAAM-191A-Assignments/</p> <ol> <li>Click on the <code>Fork</code> button.</li> </ol> <p></p> <ol> <li> <p>Go to your cloned repository:</p> </li> <li> <p>Click on     <code>Code</code></p> </li> <li> <p>Click on <code>Copy</code></p> </li> </ol> <p></p> <ol> <li>Click <code>Clone Repository</code></li> </ol> <p></p> <ol> <li>Paste your copied forked repository:</li> </ol> <p></p> <ol> <li>Open the cloned repo:</li> </ol> <p></p> <ol> <li>Click on Terminal:</li> </ol> <p></p> <ol> <li>Open a New Terminal:</li> </ol> <p></p> <ol> <li>Run the following <code>git remote add upstream https://github.com/albertkun/23S-ASIAAM-191A-Assignments.git</code></li> </ol> <p></p> <ol> <li>Run <code>git remote \u2013v</code> to check:</li> </ol> <p></p> <p>Getting New Assignments:</p> <ol> <li>To get new assignments run <code>git pull upstream main</code></li> </ol> <p></p> <p>Submitting Assignments:</p> <ol> <li>Click on the Explorer:</li> </ol> <p></p> <ol> <li>Got to week 1:</li> </ol> <p></p> <ol> <li>Click on the readme.md:</li> </ol> <p></p> <ol> <li>Go ahead an make a new file by clicking on the new file icon:</li> </ol> <p></p> <ol> <li>Name it lab1.md:</li> </ol> <p></p> <ol> <li>Finish the lab by answering the questions and adding your GeoJSON     file to this same folder.</li> </ol> <p></p> <ol> <li>Enter a commit message:</li> </ol> <p></p> <ol> <li>Press the Check mark or Alt + Enter to commit:</li> </ol> <p></p> <ol> <li>Click the expand menu button:</li> </ol> <p></p> <ol> <li>Click <code>push</code></li> </ol> <p></p> <ol> <li>Congrats you have submitted the assignment!</li> </ol>"}, {"location": "help/github_sign_up/", "title": "Guide for signing up to GitHub", "text": "<ol> <li>Go to GitHub.com</li> </ol> <ol> <li>Click on Sign-up</li> </ol> <ol> <li>Create an account:</li> </ol> <ol> <li>Check your email to verify:</li> </ol> <ol> <li>Remember your username and email! It will be necessary for setting up GitSCM!</li> </ol>"}, {"location": "help/gitscm/", "title": "Guide for installing Git SCM", "text": "<ol> <li> <p>Go to: https://git-scm.com/</p> </li> <li> <p>Download and install, based on your operating system below:</p> </li> </ol> PCMac <ol> <li>Run the installer and go through the installation wizard.</li> </ol> <p></p> <ol> <li>Launch the command prompt when done by pressing the <code>Windows</code> key and typing in <code>cmd</code></li> <li>In the command prompt run the command to test your installation:</li> </ol> <pre><code>git --version\n</code></pre> <p>This tests the installation: </p> <p></p> <ul> <li>If it is working, move to step 6</li> <li>If it is not working, send an email or post on the GitHub discussion board.</li> </ul> <p>Note</p> <p>Make sure you have Homebrew installed. If you can run the command \u2018brew\u2019 then you are good to go.</p> <ol> <li> <p>Open launcher and search \u2018Terminal\u2019:  </p> </li> <li> <p>In the terminal then type <code>brew install git</code>:  </p> </li> <li> <p>In the terminal run the command to test your installation:</p> </li> </ol> <pre><code>git --version\n</code></pre> <p>This tests the installation:        </p> <pre><code>  - If it is working, move to **step 6**\n  - If it is not working, send an email or post on the GitHub discussion board.\n</code></pre> <ol> <li>Set our identity to our GitHub username for Git by running:  </li> </ol> <pre><code>git config --global user.name \"YOUR_GITHUB_USERNAME\"\n</code></pre> <p>Important</p> <p>Remember to change <code>\"YOUR_GITHUB_USERNAME\"</code> to your actual GitHub Username and include the double quotes <code>\" \"</code></p> <ol> <li>Now set your email to the email you signed up with GitHub by running :</li> </ol> <pre><code>git config --global user.email YOUR@EMAIL.COM\n</code></pre> <p>Important</p> <p>Remember to change <code>YOUR@EMAIL.COM</code> to your actual GitHub email</p> <ol> <li> <p>Once finished, run the following to check your email and username: <code>git config --list</code></p> </li> <li> <p>If you had any issues, please check this documentation for more     details or reach out for help.</p> </li> <li> <p>Now you are ready to clone a repository in VS Code!</p> </li> </ol>"}, {"location": "help/live_share/", "title": "Quickstart for Live Share", "text": "<p>Make sure you have installed the Live Share extension by going to the following link and clicking on \u201cInstall\u201d: </p> <p>https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare</p> <p></p> <p>You can read the documentation to learn more about Live Share and what it does too:</p> <p>https://docs.microsoft.com/en-us/visualstudio/liveshare/</p> <p>After installing Live Share, you can join a session with these steps:</p>"}, {"location": "help/live_share/#1-click-on-the-join-url", "title": "1. Click on the Join url", "text": "<p>Click the session URL the \u201chost\u201d sent you, which will open it up in a browser. When prompted, allow your browser to launch VS Code</p>"}, {"location": "help/live_share/#2-sign-in-to-github", "title": "2. Sign in to GitHub", "text": "<p>Tip: This will only need be done once.</p> <p>Click on the <code>Live Share</code> status bar item or press <code>Ctrl+Shift+P</code> / <code>Cmd+Shift+P</code> and select the <code>Live Share: Sign In With Browser</code> command. </p>"}, {"location": "help/live_share/#3-working-the-session", "title": "3. Working the session", "text": "<p>After you join, you\u2019ll be immediately presented with the file that the \u201chost\u201d has open, and can see their cursor and any edits they make.</p>"}, {"location": "help/live_share/#4-snapping-windows", "title": "4. Snapping windows", "text": "<p>To make our editing session more efficient, it is highly recommended that after you join the live coding session, that you open a new window for VS Code and snap one window to the left and another to the right.</p> <p>The ideal layout should look something like the following:</p> <p></p> <ul> <li> <p>How to Snap windows on Mac</p> </li> <li> <p>How to Snap windows on PC</p> </li> </ul>"}, {"location": "help/live_share/#optional-host-your-own-session", "title": "Optional: Host your own session", "text": "<p>Click the \u201clive share\u201d button to immediately start sharing your coding session.  An invitation link will automatically be copied to your clip board, you can invite anyone to join your session by sharing it. </p> <p>You can join your own collaboration session by clicking the link yourself. open it in any browser to join your session.</p>"}, {"location": "help/submit/", "title": "How to submit Lab assignments", "text": "<p>Pre-requisites</p> <p> You have committed your code to GitHub</p> <p> You enabled GitHub pages</p> <p>Please refer to lab #1 if you have not done these steps yet.</p>"}, {"location": "help/submit/#go-to-the-discussion-board", "title": "Go to the Discussion board", "text": "<p>https://github.com/albertkun/23S-ASIAAM-191A/discussions/</p>"}, {"location": "help/submit/#click-on-the-assignment-you-are-submitting", "title": "Click on the assignment you are submitting", "text": ""}, {"location": "help/submit/#paste-the-link-as-a-comment-and-reply", "title": "Paste the link as a comment and reply", "text": ""}, {"location": "help/thinking_caps/", "title": "How to Submit a Thinking Cap Discussion", "text": ""}, {"location": "help/thinking_caps/#part-1-posting-your-own-discussion", "title": "Part 1: Posting your own discussion", "text": "<p>Warning</p> <p>Due at 2pm PST on Mondays, but to be eligible for extra credit you must submit at 2pm PST on Sundays.</p> <ol> <li>Make sure you are signed into your GitHub account. </li> <li>Go to the course website</li> <li>Click on \u201cDiscussions\u201d </li> <li>Click on the \u201cThinking Cap\u201d you are posting for </li> <li>Scroll down to find the comment box: </li> <li>Respond to the prompt for the week. </li> <li>Click Comment to submit: </li> <li>The first part of assignment is now complete!</li> </ol>"}, {"location": "help/thinking_caps/#part-2-responding-to-discussions", "title": "Part 2: Responding to discussions", "text": "<ol> <li> <p>Go to the discussion page on the GitHub repository</p> </li> <li> <p>Try to look for student posts with no replies. </p> </li> <li> <p>Type a thoughtful reply and click Comment .</p> </li> <li> <p>Repeat Steps #8 - #10 for another student.</p> </li> <li> <p>Congratulations on finishing the assignment!</p> </li> </ol>"}, {"location": "labs/", "title": "Summary", "text": "Lab Title Topic #1 GITting down with labs and code Git, HTML, CSS, JS #2 JavaSCrypt of the Necrodancer and FUNctions Git, HTML, CSS, JS #3 A little UX/I(e) and Geo-J-cieON Git, HTML, CSS, JS #4 GeoJSON Styling JS, CSS #5 Google FORMulating Community-Based Empowerment JS, CSS #6 Design DeciCSSions JS, CSS #7 Conditionals, Map Layers, and Visual Design JS, CSS #8 Collaborating with GitHub and Plugins Git,JS #9-10 Final Lab Git, HTML, CSS, JS <p>Remember!</p> <p>Unless specified otherwise, all assignments are due at the beginning of class. Late assignments will be given half credit up until a week.</p>"}, {"location": "labs/week1/", "title": "GITting down with labs and code", "text": "", "tags": ["Lab 1"]}, {"location": "labs/week1/#objectives", "title": "Objectives", "text": "<p>Goals</p> <ul> <li>Create a basic webpage</li> <li>Publish your page onto GitHub pages</li> </ul> <p>Reminder</p> <p>The pre-lab must completed before attempting this lab.</p>", "tags": ["Lab 1"]}, {"location": "labs/week1/#lab-outline", "title": "Lab outline", "text": "<ol> <li>Using VS Code</li> <li>Writing HTML</li> <li>Writing CSS</li> <li>Publishing with GitHub Pages</li> </ol> <p>This lab will walk you through the process of creating a static web page in HTML with some additional style elements using CSS. Then you will be tasked to host it using GitHub pages.</p> <p>For the extra lab (and extra credit), you can add a map using the Leaflet JS library, but we will cover that in Lab #2.</p> <p>Note: I highly recommend checking out the Leaflet documentation. Looking at any documentation before choosing any software is important, because badly documented libraries can make tools difficult to use. </p>", "tags": ["Lab 1"]}, {"location": "labs/week1/0/", "title": "Let\u2019s get VS Coding!", "text": "<p>Go to https://www.github.com  and make sure you are logged in.</p> <p>Create a new repository by clicking on the  button next to your profile picture:</p> <p></p> <p>Click New repository:</p> <p></p> <p>Give it a name that indicates these will be the assignments for the class:</p> <p></p> <p>Info</p> <p>Repository names should be self explanatory, and they are unique to your account, so don\u2019t worry about having the same name as someone else!</p> <p>Here are some example repository names: </p> <ul> <li> <p><code>23s-asiaam-191a-labs</code></p> </li> <li> <p><code>23s-191a-assignments</code></p> </li> <li> <p><code>aa191-assignments</code></p> </li> </ul> <p>Keep the repository Public, which is in the spirit of sharing, collaboration, and allows anyone to see and improve the code:</p> <p></p> <p>Scroll down to Create Repository:</p> <p></p> <p>Click the Clipboard  button:</p> <p></p> <p>In VS Code  click on: Clone Git Repository</p> <p></p> <p>Paste (PC: Ctrl+V or Mac: Cmd+V) your copied link in the panel above:</p> <p></p> <p>Click on Clone from URL or press Enter :</p> <p></p> <p>Choose a folder to save your files locally to:</p> <p></p> <p>Click on Open this new repository:</p> <p></p> <p>Make sure  Explorer is open in the Activity Bar by clicking on it:</p> <p></p> <p>The open  Explorer should look like this with space to show the files:</p> <p></p> <p>Click the <code>Folder</code> icon to make a new folder:</p> <p></p> <p>Title it <code>week1</code>:</p> <p></p> <p>With the folder selected, click the <code>New file</code> icon and give it the title <code>index.html</code>:</p> <p></p> <p>Make sure <code>index.html</code> is within <code>week1</code>: </p>"}, {"location": "labs/week1/1/", "title": "HTML?! Oh what <code>tag</code>gony!", "text": "<p>HTML is what makes up the house for websites. Without it, the CSS and JavaScript cannot function. </p> <p>When HTML is surrounded by an opening <code>&lt;tag&gt;</code> and closing tags<code>&lt;/tag&gt;</code>, it is called an Element:</p> <p><code>&lt;tag&gt; Look Ma'! I'm in a element! &lt;/tag&gt;</code></p> <p>The <code>/</code> of the second tag is used to close a tag. Always be sure to check if you have unclosed elements! Leaving elements unclosed without a closing tag open will break your page. While some tags don\u2019t need to be closed (like the <code>&lt;link&gt;</code> tag), all elements do!</p>"}, {"location": "labs/week1/1/#attributes-in-tags", "title": "Attributes in tags", "text": "<p>We can also decorate tags with attributes to make them unique. </p> <p>You put a keyword declaration inside the <code>tag</code> like so: <code>attribute=\"some value\"</code></p> <p>For example, we can name a tag something:</p> <p><code>&lt;tag name=\"something\"&gt;&lt;/tag&gt;</code></p> <p>But typically, we assign unique names with the <code>id</code> attribute, like so:</p> <p><code>&lt;name id=\"Albert\"&gt;Haha!&lt;/name&gt;</code></p> <p>Wow, that\u2019s my correct name tag! </p>"}, {"location": "labs/week1/1/#boilerplate-vs-template-code", "title": "Boilerplate vs. Template Code", "text": "<p>In coding, boilerplate code is ready to use code that people can freely copy and use with no changes. Think of them as ready-to-eat microwave dinners.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"/&gt;\n  &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Template code refers to sample code that can be copied and pasted, but requires modifications in order for it to work.</p> <p>Here is our template code:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;&lt;!--(1)! --&gt;\n&lt;html&gt;&lt;!--(2)! --&gt;\n    &lt;head&gt;&lt;!--(3)! --&gt;\n        &lt;title&gt;Hello World with Leaflet&lt;/title&gt;&lt;!--(4)! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n\n        &lt;!-- I'd add some style if here if I had any --&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;&lt;!--(5)! --&gt;\n        &lt;header&gt;\n            Hello World! &lt;!--(6)! --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n        &lt;!-- hint: majority of your lab assignment can go here     --&gt;\n\n        &lt;/div&gt;\n\n\n        &lt;div id=\"footer\"&gt;\nCopyright(2023)\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;&lt;!--(7)! --&gt;\n</code></pre> <ol> <li>This tells a web browser what type of file this <code>document</code> is.</li> <li>The <code>HTML</code> code begins here.</li> <li>Content in the <code>head</code> tag is not displayed on the page. </li> <li>The <code>title</code> is shown in the browser\u2019s title bar or in the page\u2019s tab.</li> <li>Content in the <code>body</code> contains most of what needs to be displayed.</li> <li>This content in <code>body</code> is what is actually being showed!</li> <li>The <code>HTML</code> code ends here. </li> </ol> <p>Lab Questions</p> <p>What do you observe in the code?</p> <ol> <li> <p>How does this code differ from the boilerplate code?</p> </li> <li> <p>Why should everything be enclosed in the <code>html</code> tag?</p> </li> <li> <p>Do empty spaces matter in HTML?</p> </li> <li> <p>What is a comment and how do you write one?</p> </li> <li> <p>Is there a difference between the <code>class</code> and <code>id</code> attributes?</p> </li> </ol>"}, {"location": "labs/week1/1/#preview-our-file", "title": "Preview our file", "text": "<p>Install the Live Server   extension by clicking this link:</p> <ul> <li>https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer</li> </ul> <p>After you install the extension, click on  Go Live. </p> <p>Your default browser should automatically pop-up, if your default browser is not Firefox , you will need to copy and paste the link over to view it there.</p> <p></p> <p>Not using the Live Server extension</p> <p>If you cannot or do not want to use live server then you will need to right click on your <code>index.html</code> file and <code>reveal in file explorer</code>. Then, double click on the file. Be aware that checking your code in this is not as efficient because there is no auto-reloading feature.</p>"}, {"location": "labs/week1/1/#in-class-exercise-1", "title": "\u26bd In-Class Exercise #1", "text": "<p>Tasks</p> <ol> <li>Let\u2019s fix our code so that it actually looks presentable. </li> <li>Look for the errors in the template code.</li> <li>Save the file and name it <code>index.html</code> and open it in Firefox.</li> </ol> <p>Extra: If you finish early, try to add your own spin to the HTML file!</p>"}, {"location": "labs/week1/1/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<p>Info</p> <p>Checkpoints are parts if the lab where you should check your work to that point!</p> <p>Check to see if your code looks likes the following before moving on:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;!-- hint: majority of your lab assignment can go here     --&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}, {"location": "labs/week1/2/", "title": "Cool Stylin\u2019 Sheets", "text": "<p>Let\u2019s add some Cascading Style Sheets (CSS) to visualize our page better.</p> <p>Insert the following code in the <code>&lt;head&gt;</code> right before the closing tag (i.e. <code>&lt;/head&gt;</code>):</p> index.html<pre><code>&lt;style&gt;\n    html { /* (1)! */\n        background-color: azure;/* (2)! */\n    }\n&lt;/style&gt;\n</code></pre> <ol> <li><code>html</code> is the <code>CSS</code> selector, basically saying, \u201cget anything in the <code>html</code> tags!</li> <li><code>background-color</code> is the key, and then <code>azure</code> is the color we are setting it to.</li> </ol> <p>What happened to the page?</p> Answer <p>It became <code>Azure</code>!</p> <p>That\u2019s cool! But this way of using CSS, called inline CSS, can make your HTML file long and cumbersome. So the better practice is to have a separate file for CSS and bring that whole file in as a linked source.</p>"}, {"location": "labs/week1/2/#adding-linked-css", "title": "Adding linked CSS", "text": "<p>Click the New Folder  button:</p> <p></p> <p>Type in styles to name the folder <code>styles</code>:</p> <p></p> <p>Highlight the <code>styles</code> folder by clicking on it:</p> <p></p> <p>Then click on the New file  button:</p> <p></p> <p>Name the file style.css:</p> <p></p> <p>Double click to open the new file. Then copy and paste the following CSS:</p> styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\";\n}\n\n#contents{\n    grid-area: content;\n}\n</code></pre> <p>Reminder!</p> <p>Remember to save the <code>style.css</code> file (PC:Ctrl+S | Mac:Cmd+S!</p> <p>Next, go back to the index.html file and replace your entire <code>&lt;style&gt; &lt;/style&gt;</code> content and tags with this code:</p> index.html<pre><code>&lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n</code></pre> <p>This code tells the HTML file to use all of the CSS styles linked in the <code>href</code> attribute.</p> <p>More external CSS files?</p> <p>You can have as many external references as you\u2019d like, as long as you link them in this way. The bottom most CSS file has the most priority because it is the last CSS read and applied!</p>"}, {"location": "labs/week1/2/#in-class-exercise-2", "title": "\u26bd In-Class Exercise #2", "text": "<p>Task</p> <ol> <li>Link <code>Leaflet</code>\u2019s CSS that exists at this url: <code>https://unpkg.com/leaflet@1.7.1/dist/leaflet.css</code></li> </ol> <p>Extra: If you finish early, try to see if you can load Leaflet\u2019s CSS locally instead!</p> <p>We will go into CSS in more detail later, but what you need to know is that CSS has <code>HTML element selectors</code> which are then followed by the styles in <code>{ }</code>.</p>"}, {"location": "labs/week1/2/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<p>Check to see if your code looks likes the following before moving on:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\";\n}\n\n#contents{\n    grid-area: content;\n}\n</code></pre>"}, {"location": "labs/week1/3/", "title": "Let\u2019s Git to Committing!", "text": "<p>Make sure GIT is installed!</p> <p>Before you can commit, you need to make sure that you have <code>Git</code> installed. If you don\u2019t have it installed, please follow the instructions here.</p> <p>Commits are the basis of <code>Git</code> and <code>GitHub</code>.</p> <p>Do not upload manually!</p> <p>While it may be tempting to manually upload files through GitHub, for the purposes of this class, this will cause many headaches. For this class you should only commit through VS Code!!!</p> <p>In a nutshell, Committing is <code>Git</code> speak for saving files. However, these saves come with a note so that you can refer back to save later!</p> <p>It\u2019s better than autosaving because you have a description of what that save is!</p> <p>Let\u2019s make our first commit:</p> <p>Click on the <code>Source Control</code> icon in the activity bar in VS Code:</p> <p></p> <p>Enter a note for your commit:</p> <p></p> <p>Click the <code>checkmark</code> OR use the following shortcut:</p> <ul> <li> <p>PC: Ctrl+Enter</p> </li> <li> <p>MAC: Cmd+Enter</p> </li> </ul> <p></p> <p>Next, click on the <code>...</code> for expanding the menu items:</p> <p></p> <p>Finally, click on <code>Push</code> to upload your changes to GitHub:</p> <p></p> <p>If you see the <code>VS Code periodically wants to run fetch</code> dialogue, click <code>Yes</code> to allow it to randomly update your repository.</p> <p></p>"}, {"location": "labs/week1/3/#optional-easier-commits", "title": "Optional: Easier Commits", "text": "<p>Timesaving Tip!</p> <p>You can avoid having to do the extra steps of clicking <code>...</code> then <code>push</code> by turning on a setting to <code>push</code> after each commit!</p> <p>Here\u2019s how to do so:</p> <ul> <li>Go to <code>File</code> -&gt; <code>Prefences</code> -&gt; Settings</li> </ul> <p></p> <ul> <li>Search post commit in the text box at the top</li> </ul> <p></p> <ul> <li>Change the setting from <code>none</code> to push</li> </ul> <p></p> <ul> <li>Now the next time you commit by pressing the following shortcut, it will push automatically!</li> <li>PC: Ctrl+Enter</li> <li>MAC: Cmd+Enter</li> </ul> <p></p>"}, {"location": "labs/week1/3/#using-github-pages", "title": "Using GitHub Pages", "text": "<p>After you have saved and committed your files to GitHub visit your repository on https://www.github.com.</p> <p>What is a repository?</p> <p>A repository is GitHub speak for location for a specific project and/or bunch of files. You can think of it as <code>folder</code>. For this class, instead of making a new repository for each week we will have just one lab assignment repository with different folders for the weeks. Learn more about repositories here: About repositories (GitHub.com).</p> <p>You can find your repositories by clicking on your profile picture:</p> <p></p> <p>Then click on Your repositories</p> <p></p> <p>Find your assignment repository and click on it:</p> <p></p> <p>Click on Settings:</p> <p></p> <p>Click on Pages:</p> <p></p> <p>and under Source , click on the main branch <sup>1</sup>:</p> <p></p> <p>Choose root:</p> <p></p> <p>Click on Save:</p> <p></p> <p>Copy this link:</p> <p></p> <p>Nothing shows up?!\ud83d\ude31</p> <p>If you navigate to <code>https://YOUR_GITHUB_ACCOUNT.github.io/23s-asiaam-191a-assignments/</code> it will be blank because there\u2019s nothing in the <code>root</code>.</p> <p>You have to add <code>/YOUR_WEEK_1_FOLDER_NAME/index.html</code> to access the contents of the lab!</p> <p>For example, <code>https://albertkun.github.io/23s-asiaam-191a-assignments/week1/index.html</code></p> <p>Post it in the Discussion forum for the appropriate lab:</p> <p></p> <p>Paste your link in the comment box at the bottom</p> <p></p> <p>Click on Comment to submit the lab:</p> <p></p> <ol> <li> <p>Your branch may be called master if your repo was created in VS Code. Read more about why here.\u00a0\u21a9</p> </li> </ol>"}, {"location": "labs/week1/4/", "title": "\u2705 Final Template Code", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;!-- hint: the majority of your assignment can do here --&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> /styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\";\n}\n\n#contents{\n    grid-area: content;\n}\n</code></pre> <p>Now you should be ready to take on the lab assignment!</p>"}, {"location": "labs/week1/extra/", "title": "Extra: Basics of JavaScript", "text": "<p>Note</p> <p>This lab will be covered on Thursday 4/13</p> <p>JavaScript makes sure our page knows how to function and react. There are different frameworks for JavaScript, like React.js and vue.js, but this class will be focusing on vanilla JavaScript with ES6+ standards.Read more about the standards here.</p> <p>In <code>HTML</code>, <code>JavaScript</code> must be contained within a script tag. In our <code>&lt;head&gt;</code> tag, let\u2019s add a <code>&lt;script&gt;&lt;/script&gt;</code> tag.</p> <p>Any Javascript that is in the <code>&lt;head&gt;</code> tag will load first. </p> <p>Any JavaScript that is in the <code>&lt;body&gt;</code> tag will load later.</p> <p>JavaScript functions to run after the <code>HTML body</code> loads, so putting the <code>&lt;script&gt;</code> after the <code>&lt;/body&gt;</code> becomes necessary. </p> <p>This will be relevant when we bring in <code>Leaflet.js</code> because the <code>Leaflet</code> library needs to be loaded first! That means it should go in the header, while our own custom <code>JavaScript</code> comes after, preferrably later in the <code>&lt;body&gt;</code> tag, you can even kick our JavaScript file out of the body and put it into a <code>&lt;footer&gt;</code> tag!</p>"}, {"location": "labs/week1/extra/#lets-a-variable-go", "title": "Let\u2019s a-(variable)-go!", "text": "<p>Variables are like boxes that hold information. They can be numbers, text, or even collections of other variables! In programming languages we call those variable types. With JavaScript, variables are automatically assigned types based on their declaration. We\u2019ll discuss more next week, but what you need to know for now is how to declare variables.</p> <p>In JavaScript all declarations and lines should end with a semicolon <code>;</code>, which is like a <code>.</code> in English that says, my statement is done.</p> <p>This is an example of a declaration:</p> <pre><code>var day = 8;\nvar name = \"Albert\";\n</code></pre> <p>In front you see the <code>var</code> keyword that tells the web browser, \u201cHey this is a variable!\u201d. In this example, <code>day</code> is a numeric type with a value of <code>8</code> and <code>name</code> is a string type. Each type has certain properties and uses, for example you can add numbers together using something like <code>day + day</code>, but you adding strings will simply concatenate and not total them.</p> <p>What is a keyword?</p> <p>In most coding languages, a keyword is a word that tells a program to treat the following text, numbers, or characters in a specific way. For example, <code>var myName</code> says treat <code>myName</code> as a variable.  This means you CANNOT name a variable <code>var</code>, Jar Jar Binks cousin Var Var Binks is VARy bad for JavaScript to see! i.e. <code>var var</code> Also note, you cannot use <code>spaces</code> in variable names!</p> <p>With JavaScript ES6, <code>let</code> and <code>const</code> keywords were introduced to declare variables. This change means that the recommend practice is to no longer use the <code>var</code> keyword. <code>let</code> and <code>const</code> variables get declared in the same way:</p> <pre><code>let day = 8; //(1)!\nconst name = \"Albert\"; // (2)!\n</code></pre> <ol> <li>The <code>let</code> keyword LETS a variable CHANGE! </li> <li>The <code>const</code> keyword declaration keeps a variable CONSTant!</li> </ol>"}, {"location": "labs/week1/extra/#let-vs-const-vs-var", "title": "Let vs Const vs Var", "text": "<p>What is the difference?</p> <ol> <li>The <code>let</code> keyword declaration LETS a variable change</li> <li>The <code>const</code> keyword delcaration a variable CONSTant and will never change.</li> <li>The <code>var</code> allows varaibles to change or never change depending on where it was declared! VERY PROBLEMATIC!</li> </ol> <p>Because <code>var</code> can be changing (mutable) and unchanging at the same time, so <code>var</code> was changed into off into two different variable types, <code>let</code> and <code>const</code>.</p> <p>Scopes: Local vs. Global</p> <p>Where you <code>declare</code> a variable sets the scope to either a local one (limited to a function or area in the code) or global (can be accessed by anything/anywhere else in the code).</p> <p>So, bye bye <code>var</code> and <code>LET</code> us welcome our new <code>CONST</code> variables to the JavaScript programming world.</p> <p>TLDR</p> <p>DO NOT USE <code>var</code> unless you need to code for Internet Explorer.</p>"}, {"location": "labs/week1/extra/#consolelog", "title": "Console.log()", "text": "<p>By itself, our script tag does nothing. So, one VERY helpful JavaScript tool (method) that we should familarize ourself with is <code>console.log()</code>, because it allows us to test our code.</p> <p>Add the following script: <pre><code>&lt;script&gt;\n    console.log('Hello Asian Am 191! :)');\n&lt;/script&gt;\n</code></pre></p>"}, {"location": "labs/week1/extra/#nothing-happened-what", "title": "Nothing happened?! What!?", "text": "<p>Actually, you are about to unlock your full web developer potential! </p> <p>In Firefox, right click anywhere on the page and the click <code>Inspect Element</code>:</p> <p></p> <p>This opens the Developer Toolbar!! \ud83c\udf89\ud83c\udf89 You can also find it by going to the Menu and going to Web Developer and then Web Developer Tools.</p> <p>Click on the  Console button:</p> <p></p> <p>Yay! Our message is there!</p> <p></p>"}, {"location": "labs/week1/extra/#linking-to-another-javascript-file", "title": "Linking to another JavaScript file", "text": "<p>Similar to the CSS files, we should move the JavaScript file into its own file (and folder) to avoid cluttering the HTML file with JavaScript. </p> <p>Importing different libraries, whether it it <code>CSS</code> or <code>JavaScript</code> is the main way unlock skills and level up our webpage.</p> <p>BUT!!! Instead of the <code>&lt;link&gt;</code> that we use with <code>CSS</code> we use the <code>&lt;script&gt;</code> tag:</p> Linking JavaScriptLinking CSS <pre><code>&lt;script src=\"YOUR_SCRIPT_NAME.js\"&gt;&lt;/script&gt; \n</code></pre> <p>The <code>src</code> attribute is location of your file.</p> <pre><code>&lt;link src=\"SOME_CSS_FILE.css\"&gt; \n</code></pre> <p>Notice that when you use <code>&lt;link&gt;</code> there is no <code>&lt;/link&gt;</code>, but with <code>&lt;script&gt;</code> you must close the tag with <code>&lt;/script&gt;</code>.</p>"}, {"location": "labs/week1/extra/#in-class-exercise-3-just-link-your-js-file", "title": "\u26bd In-class Exercise #3 - JuSt link your JS file", "text": "<p>Tasks</p> <ol> <li>Create a new folder called <code>js</code></li> <li>Add a <code>JavaScript</code> file in there called <code>init.js</code></li> <li>Add JavaScript method: <code>console.log()</code> with a message of your choosing</li> <li>Get your message to show up in the console</li> </ol> Answer <ol> <li>Click on the <code>New Folder</code>  button:</li> </ol> <p></p> <ol> <li>Type in <code>js</code>:</li> </ol> <p></p> <ol> <li>Click on the New File  button:</li> </ol> <p></p> <ol> <li>Give it a name, like <code>init.js</code>, which in this case stands for the <code>initial JavaScript file of our page</code></li> </ol> <p></p> <ol> <li>In the <code>index.html</code> file and before the end of the <code>&lt;body&gt;</code> element include the following:</li> </ol> <p>index.html<pre><code>        //\n        // ... HTML Truncated for brevity ...\n        // \n        &lt;script src=\"./js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre> /js/init.js<pre><code>console.log(\"Hello Asia-Am 191A! :)\")\n</code></pre></p> <p>Important!</p> <p>Never include <code>&lt;script&gt;&lt;/script&gt;</code> tags inside of a Javascript file, those are <code>HTML tags</code>!!! Do so will break your page, because you are mixing two different languages: <code>HTML</code> with <code>JavaScript</code>. </p>"}, {"location": "labs/week1/extra/#hello-leaflet-finally", "title": "Hello Leaflet\u2026 Finally..", "text": "<p>OK, why did we do ALL of that? Well, when we use Leaflet, we actually need to bring in Leaflet\u2019s external CSS and JavaScript files!</p> <p>So, in our header, let\u2019s add the following: <pre><code>&lt;!-- Leaflet's css--&gt;\n&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n&lt;!-- Leaflet's JavaScript--&gt;\n&lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n</code></pre></p> <p>Now, let\u2019s go ahead and add a container for our map. </p> <p>After <code>&lt;div id=\"main\"&gt;&lt;/div&gt;</code> add a new <code>&lt;div&gt;&lt;/div&gt;</code> tag, and give it an ID attribute of \u201cmap\u201d:</p> index.html<pre><code>&lt;div id=\"main\"&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>With our container ready to go, open up the JavaScript file again and add the following Leaflet code template:</p> js/init.js<pre><code>// JavaScript const variable declaration\nconst map = L.map('the_map').setView([34.0709, -118.444], 15); // (1)!\n\n// Leaflet tile layer, i.e. the base map\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map); // (2)!\n\n//JavaScript let variable declaration to create a marker\nlet marker = L.marker([34.0709, -118.444]).addTo(map) // (3)!\n        .bindPopup('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I work in ')\n        .openPopup();\n</code></pre> <ol> <li><code>L.</code> is the <code>Leaflet</code> class that allows us to use built-in Leaflet tools. The <code>.</code> is like a chain of commands, but similar to <code>css</code>, Leaflet wants us to know <code>where our map is!</code> In the documentation, the map constructor expects an ID, which we called <code>the_map</code>. We then use <code>setView</code> to set the <code>Latitude (y)</code>, <code>Longitude (x)</code>, and <code>Zoom</code> of the initial map.</li> <li>We use a <code>L.tilelayer</code> class to add a basemap to our map.</li> <li>We use the <code>L.marker</code> to add a point to our map. Notice there is no <code>;</code> here because the code continues.</li> </ol> <p>Can you see the usage of latitude and longitude in the code?</p> <p>What is latitude and Longitude</p> <ul> <li>Latitude ranges from -90.0 to 90.0 and measures the distance north or south from the equator (y-axis).</li> <li>Longitude ranges from -180 to 180 measures distance east or west of the prime meridian (x-axis).</li> </ul>"}, {"location": "labs/week1/extra/#what-is-lmap-and-ltile", "title": "What is <code>L.map</code> and <code>L.tile</code>?", "text": "<p><code>L.map</code> is Leaflet\u2019s lingo for its own mapping Application Programming Interface (API). Every API has its own unique language to utilize it. To learn more about Leaflet\u2019s API visit here: https://leafletjs.com/reference-1.7.1.html</p>"}, {"location": "labs/week1/extra/#class-exercise-4-adding-more-markers", "title": "\u26bd Class Exercise #4 - Adding more markers", "text": "<p>Tasks</p> <ol> <li>Add some new markers!</li> <li>Customize the initial map</li> <li>Add a new element <code>&lt;div id=\"contents\"&gt;</code> inside the <code>main</code> element.</li> <li>Optional: change the base map or add some <code>html</code> into the marker popups.</li> </ol> <p>Looking at the code above a little bit, we can see some latitude/longitude pairs. Your task is to copy the marker code add more markers of your choosing. </p> <p>Unique variable names</p> <p>When you create new marker variables, you must give the marker variable a new name, like <code>marker2</code> or you will simply override the previous marker!  </p> <p>To find latitude/longitude of coordinates, you can use this website or another tool or your choosing:</p> <ul> <li>https://www.latlong.net/</li> </ul>"}, {"location": "labs/week1/extra/#optional-not-happy-with-the-basemap", "title": "Optional: Not happy with the basemap?", "text": "<p>See if you can switch the basemap out by visiting the following link and changing <code>L.tileLayer</code> on your map:</p> <ul> <li>https://leaflet-extras.github.io/leaflet-providers/preview/</li> </ul>"}, {"location": "labs/week1/extra/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<p>Check to see if your code looks likes the following before moving on:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- hint: the majority of your assignment can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\" \"main_map\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> js/init.js<pre><code>// JavaScript const variable declaration\nconst map = L.map('the_map').setView([34.0709, -118.444], 15); // (1)!\n\n// Leaflet tile layer, i.e. the base map\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map); // (2)!\n\n//JavaScript let variable declaration to create a marker\nlet marker = L.marker([34.0709, -118.444]).addTo(map) // (3)!\n        .bindPopup('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work!')\n        .openPopup();\n</code></pre>"}, {"location": "labs/week2/", "title": "JavaSCrypt of the Necrodancer and FUNctions", "text": "<p>Creating our first map with Leaflet.js and learning to use JavaScript!</p> <p></p> <p>Goals</p> <ul> <li>Add a Leaflet map</li> <li>Understand how JavaScript works with HTML and CSS</li> <li>Understand how JavaScript variables, functions, methods work together</li> </ul>", "tags": ["Lab 2"]}, {"location": "labs/week2/#lab-outline", "title": "Lab outline", "text": "<ol> <li>JavaScript variables</li> <li>Web mapping with Leaflet.js</li> <li>JavaScript functions</li> </ol>", "tags": ["Lab 2"]}, {"location": "labs/week2/#starting-template-code-for-lab-2", "title": "Starting Template Code for lab #2", "text": "<p>Use the following template code or your lab assignment #1:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;!-- hint: the majority of lab 1 assignment can go here --&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> /styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\";\n}\n\n#contents{\n    grid-area: content;\n}\n</code></pre>", "tags": ["Lab 2"]}, {"location": "labs/week2/1/", "title": "Basics of JavaScript", "text": "<p>JavaScript makes sure our page knows how to function and react. There are different frameworks for JavaScript, like React.js and vue.js, but this class will be focusing on vanilla JavaScript with ES6+ standards.Read more about the standards here.</p> <p>In <code>HTML</code>, <code>JavaScript</code> must be contained within a script tag. In our <code>&lt;head&gt;</code> tag, let\u2019s add a <code>&lt;script&gt;&lt;/script&gt;</code> tag.</p> <p>Any Javascript that is in the <code>&lt;head&gt;</code> tag will load first. </p> <p>Any JavaScript that is in the <code>&lt;body&gt;</code> tag will load later.</p> <p>JavaScript functions to run after the <code>HTML body</code> loads, so putting the <code>&lt;script&gt;</code> after the <code>&lt;/body&gt;</code> becomes necessary. </p> <p>This will be relevant when we bring in <code>Leaflet.js</code> because the <code>Leaflet</code> library needs to be loaded first! That means it should go in the header, while our own custom <code>JavaScript</code> comes after, preferrably later in the <code>&lt;body&gt;</code> tag, you can even kick our JavaScript file out of the body and put it into a <code>&lt;footer&gt;</code> tag!</p>", "tags": ["Lab 2", "JavaScript", "JavaScript Variables", "Console.log"]}, {"location": "labs/week2/1/#its-a-me-lego-var-io", "title": "It\u2019s a me Lego <code>Var</code>-io", "text": "<p>Variables are like boxes that hold information, try to think of them as the building blocks of the instructions.</p> <p>Variables are the Lego blocks of programming and can be numbers, text, or even collections of other variables! In programming languages we call variables can be classified into types. In order to use a variable, you have to declare variables. With JavaScript, variables are automatically assigned types based on their declaration. </p> <p>In JavaScript all declarations and lines should end with a semicolon <code>;</code>, which is like a <code>. (period)</code> in English that says, my statement is done.</p> <p>These are examples of a declaration:</p> <pre><code>var day = 8;\nvar name = \"Albert\";\n</code></pre> <p>In front you see the <code>var</code> keyword that tells the web browser, \u201cHey this is a variable!\u201d. In this example, <code>day</code> is a numeric type with a value of <code>8</code> and <code>name</code> is a string type. Each type has certain properties and uses, for example you can add numbers together using something like <code>day + day</code>, but you adding strings will simply concatenate and not total them.</p> <p>What is a keyword?</p> <p>In most coding languages, a keyword is a word that tells a program to treat the following text, numbers, or characters in a specific way. For example, <code>var myName</code> says treat <code>myName</code> as a variable.  This means you CANNOT name a variable <code>var</code>, Jar Jar Binks cousin Var Var Binks is VARy bad for JavaScript to see! i.e. <code>var var</code> Also note, you cannot use <code>spaces</code> in variable names!</p>", "tags": ["Lab 2", "JavaScript", "JavaScript Variables", "Console.log"]}, {"location": "labs/week2/1/#lets-a-go", "title": "LET\u2019s a go!", "text": "<p>With JavaScript ES6, <code>let</code> and <code>const</code> keywords were introduced to declare variables. This change means that the recommend practice is to no longer use the <code>var</code> keyword. <code>let</code> and <code>const</code> variables get declared in the same way:</p> <pre><code>let day = 8; //(1)!\nconst name = \"Albert\"; // (2)!\n</code></pre> <ol> <li>The <code>let</code> keyword LETS a variable CHANGE! </li> <li>The <code>const</code> keyword declaration keeps a variable CONSTant!</li> </ol>", "tags": ["Lab 2", "JavaScript", "JavaScript Variables", "Console.log"]}, {"location": "labs/week2/1/#let-vs-const-vs-var", "title": "Let vs Const vs Var", "text": "<p>What is the difference?</p> <ol> <li>The <code>let</code> keyword declaration LETS a variable change</li> <li>The <code>const</code> keyword delcaration a variable CONSTant and will never change.</li> <li>The <code>var</code> allows varaibles to change or never change depending on where it was declared! VERY PROBLEMATIC!</li> </ol> <p>Because <code>var</code> can be changing (mutable) and unchanging at the same time, so <code>var</code> was changed into off into two different variable types, <code>let</code> and <code>const</code>.</p> <p>Scopes: Local vs. Global</p> <p>Where you <code>declare</code> a variable sets the scope to either a local one (limited to a function or area in the code) or global (can be accessed by anything/anywhere else in the code).</p> <p>So, bye bye <code>var</code> and <code>LET</code> us welcome our new <code>CONST</code> variables to the JavaScript programming world.</p> <p>TLDR</p> <p>DO NOT USE <code>var</code> unless you need to code for Internet Explorer.</p>", "tags": ["Lab 2", "JavaScript", "JavaScript Variables", "Console.log"]}, {"location": "labs/week2/1/#consolelog", "title": "Console.log()", "text": "<p>By itself, our script tag does nothing. So, one VERY helpful JavaScript tool (method) that we should familarize ourself with is <code>console.log()</code>, because it allows us to test our code.</p> <p>Add the following script: <pre><code>&lt;script&gt;\n    console.log('Hello Asian Am 191! :)');\n&lt;/script&gt;\n</code></pre></p>", "tags": ["Lab 2", "JavaScript", "JavaScript Variables", "Console.log"]}, {"location": "labs/week2/1/#nothing-happened-what", "title": "Nothing happened?! What!?", "text": "<p>Actually, you are about to unlock your full web developer potential! </p> <p>In Firefox, right click anywhere on the page and the click <code>Inspect Element</code>:</p> <p></p> <p>This opens the Developer Toolbar!! \ud83c\udf89\ud83c\udf89 You can also find it by going to the Menu and going to Web Developer and then Web Developer Tools.</p> <p>Click on the  Console button:</p> <p></p> <p>Yay! Our message is there!</p> <p></p>", "tags": ["Lab 2", "JavaScript", "JavaScript Variables", "Console.log"]}, {"location": "labs/week2/1/#linking-to-another-javascript-file", "title": "Linking to another JavaScript file", "text": "<p>Similar to the CSS files, we should move the JavaScript file into its own file (and folder) to avoid cluttering the HTML file with JavaScript. </p> <p>Importing different libraries, whether it it <code>CSS</code> or <code>JavaScript</code> is the main way unlock skills and level up our webpage.</p> <p>BUT!!! Instead of the <code>&lt;link&gt;</code> that we use with <code>CSS</code> we use the <code>&lt;script&gt;</code> tag:</p> Linking JavaScriptLinking CSS <pre><code>&lt;script src=\"YOUR_SCRIPT_NAME.js\"&gt;&lt;/script&gt; \n</code></pre> <p>The <code>src</code> attribute is location of your file.</p> <pre><code>&lt;link src=\"SOME_CSS_FILE.css\"&gt; \n</code></pre> <p>Notice that when you use <code>&lt;link&gt;</code> there is no <code>&lt;/link&gt;</code>, but with <code>&lt;script&gt;</code> you must close the tag with <code>&lt;/script&gt;</code>.</p>", "tags": ["Lab 2", "JavaScript", "JavaScript Variables", "Console.log"]}, {"location": "labs/week2/1/#in-class-exercise-1-just-link-your-js-file", "title": "\u26bd In-class Exercise #1 - JuSt link your JS file", "text": "<p>Tasks</p> <ol> <li>Create a new folder called <code>js</code></li> <li>Add a <code>JavaScript</code> file in there called <code>init.js</code></li> <li>Add JavaScript method: <code>console.log()</code> with a message of your choosing</li> <li>Get your message to show up in the console</li> </ol> Answer <ol> <li>Click on the <code>New Folder</code>  button:</li> </ol> <p></p> <ol> <li>Type in <code>js</code>:</li> </ol> <p></p> <ol> <li>Click on the New File  button:</li> </ol> <p></p> <ol> <li>Give it a name, like <code>init.js</code>, which in this case stands for the <code>initial JavaScript file of our page</code></li> </ol> <p></p> <ol> <li>In the <code>index.html</code> file and before the end of the <code>&lt;body&gt;</code> element include the following:</li> </ol> <p>index.html<pre><code>        //\n        // ... HTML Truncated for brevity ...\n        // \n        &lt;script src=\"./js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre> /js/init.js<pre><code>console.log(\"Hello Asia-Am 191A! :)\")\n</code></pre></p> <p>Important!</p> <p>Never include <code>&lt;script&gt;&lt;/script&gt;</code> tags inside of a Javascript file, those are <code>HTML tags</code>!!! Do so will break your page, because you are mixing two different languages: <code>HTML</code> with <code>JavaScript</code>. </p>", "tags": ["Lab 2", "JavaScript", "JavaScript Variables", "Console.log"]}, {"location": "labs/week2/1/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<p>Check to see if your code looks likes the following before moving on:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- hint: the majority of your assignment can go here --&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>console.log(\"Hello Asia-Am 191A! :)\")\n</code></pre>", "tags": ["Lab 2", "JavaScript", "JavaScript Variables", "Console.log"]}, {"location": "labs/week2/2/", "title": "Hello Leaflet\u2026 For realz..", "text": "", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#returning-home-to-the-htmlcssjs-analogy", "title": "Returning home to the HTML/CSS/JS analogy", "text": "<p>Recall from last week\u2019s lab (before things went downhill) and the pre-lab reading that a webpage is like a house:</p> <ul> <li>HTML is the scaffolding/foundation of the house</li> <li>CSS is the paint, carpets, etc. that makes the house look nice</li> <li>JavaScript is the appliances that adds function to the house</li> </ul> <p>Today we will be focusing on the appliances in more detail.</p>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#why-start-with-html-and-css-first", "title": "Why start with HTML and CSS first?", "text": "<p>In order to do any JavaScript coding, you need to make sure your content has a place to show up! Additionally, with Leaflet, we actually need to bring in Leaflet\u2019s CSS and JavaScript files into our HTML house. Recall that last week, the map did not show up because I forgot to include Leaflet!</p> <p>Also, recall that we can bring in Leaflet by externally linking just like we did with our CSS (<code>styles/style.css</code>)!</p>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#prepping-our-html", "title": "Prepping our HTML", "text": "<p>Let\u2019s keep all our content in the <code>.main</code> class, but move all our portfolio information into a new <code>div</code> element with an <code>id</code> of <code>contents</code>, which looks like this:</p> <pre><code>        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- hint: the majority of lab 1 assignment can go here --&gt; &lt;!-- (1)! --&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n</code></pre> <ol> <li>You should be able to paste the <code>main</code> contents of your first lab assignment here.</li> </ol> <p>Compatibility with Lab assignment #1</p> <p>If you are using your <code>week1</code> lab assignment, you can copy and paste anything with the <code>div</code> elements inside the hint! Of course, this will not work if you have different <code>div</code> or changed the <code>css</code> too much! Adapt as needed!</p> <p>In our <code>index.html</code> header tag right before <code>&lt;/header&gt;</code>, we will need to add the Leaflet.js library. We add it right before the end to make sure they are the last items to load before the body starts loading.</p>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#linking-leafletjs-files", "title": "Linking Leaflet.js files", "text": "index.html<pre><code>&lt;!-- Leaflet's css--&gt;\n&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n&lt;!-- Leaflet's JavaScript--&gt;\n&lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n</code></pre>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#adding-the_map-container", "title": "Adding <code>the_map</code> container", "text": "<p>In our body, our map needs a PLACE to go, so let\u2019s add a <code>&lt;div&gt;</code> for our map.</p> <p><code>divs</code> vs. <code>spans</code>, what\u2019s the <code>DIV</code>fference?</p> <p><code>divs</code> are generic <code>HTML elements</code> that stand for <code>division</code> of content, you can think of them as boxes of content. <code>Spans</code> are like divs, but for text content. Check out Mozilla Developer Network for more information:</p> <ul> <li><code>elements</code></li> <li><code>divs</code></li> <li><code>spans</code> </li> </ul> <p>After the <code>&lt;div id=\"contents\"&gt;&lt;/div&gt;</code> element, add a new <code>&lt;div&gt;&lt;/div&gt;</code> element, and give it an ID attribute of <code>the_map</code> like the follwing:</p> <pre><code>&lt;div id=\"the_map\"&gt;&lt;/div&gt;\n</code></pre> <p>Our current <code>index.html</code> should look like the following:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- hint: the majority of lab 1 assignment can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#prepping-the-css", "title": "Prepping the CSS", "text": "<p>Let\u2019s incorporate our new <code>div</code> that has the <code>id</code> of<code>the_map</code> into our CSS now.</p>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#adding-the_map-container_1", "title": "Adding <code>the_map</code> container", "text": "<pre><code>#the_map{ /* (1)! */\n    height:80vh; /* (2)! */\n    grid-area: main_map;/* (3)! */\n}\n</code></pre> <ol> <li><code>#the_map</code> tells this CSS selector to look for an <code>ID</code> called <code>the_map</code></li> <li><code>height</code> defines how tall this <code>div</code> should be, <code>80vh</code> means 80% of the vertical height.</li> <li>We are going to name this <code>grid-area</code> the following: <code>main_map</code> it will be referenced in the <code>.main</code> class, but you can name it whatever you want; just be consistent.</li> </ol> <p>Why <code>height: 80vh;</code>?</p> <p>For Leaflet\u2019s map to show, it must have a height defined in order to show up. So you can play around with the height in your assignments, but be sure to include some height!!</p>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#putting-the_map-id-into-our-main-class", "title": "Putting <code>the_map</code> <code>id</code> into our main <code>class</code>", "text": "<p>Find our previous CSS style for the <code>main-content</code> it should be a class called <code>main</code>. Remember, because it is a <code>class</code> it starts with a <code>.</code> NOT a <code>#</code> like IDs do!</p> <p>IDs vs. Classes</p> <ul> <li>IDs: There can only be ONE unique ID on a HTML page and in CSS you refer to it with a <code>#</code>, like <code>#the_map</code>.</li> <li>Classes: There can be multiple classes on an HTML page and in CSS you refer to it with a <code>.</code></li> </ul> <pre><code>.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\" \"main_map\";\n    display: grid;\n}\n</code></pre> <p>Our CSS should look like the following:</p> styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\" \"main_map\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> <p>With our container ready to go, open up the JavaScript file again and add the following Leaflet code template:</p> js/init.js<pre><code>console.log(\"Hello Asia-Am 191A! :)\")\n\n// JavaScript const variable declaration\nconst map = L.map('the_map').setView([34.0709, -118.444], 15); // (1)!\n\n// Leaflet tile layer, i.e. the base map\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map); // (2)!\n\n//JavaScript let variable declaration to create a marker\nlet marker = L.marker([34.0709, -118.444]).addTo(map) // (3)!\n        .bindPopup('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I work in ')\n        .openPopup();\n</code></pre> <ol> <li><code>L.</code> is the <code>Leaflet</code> class that allows us to use built-in Leaflet tools. The <code>.</code> is like a chain of commands, but similar to <code>css</code>, Leaflet wants us to know <code>where our map is!</code> In the documentation, the map constructor expects an ID, which we called <code>the_map</code>. We then use <code>setView</code> to set the <code>Latitude (y)</code>, <code>Longitude (x)</code>, and <code>Zoom</code> of the initial map.</li> <li>We use a <code>L.tilelayer</code> class to add a basemap to our map.</li> <li>We use the <code>L.marker</code> to add a point to our map. Notice there is no <code>;</code> here because the code continues.</li> </ol> <p>Can you see the usage of latitude and longitude in the code?</p> <p>What is latitude and Longitude</p> <ul> <li>Latitude ranges from -90.0 to 90.0 and measures the distance north or south from the equator (y-axis).</li> <li>Longitude ranges from -180 to 180 measures distance east or west of the prime meridian (x-axis).</li> </ul>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#what-is-lmap-and-ltile", "title": "What is <code>L.map</code> and <code>L.tile</code>?", "text": "<p><code>L.map</code> is Leaflet\u2019s lingo for its own mapping Application Programming Interface (API). Every API has its own unique language to utilize it. You can think of it as an adapter to plug in your smart phone or laptop! Each plug has a different way to connect! To learn more about Leaflet\u2019s API visit here: https://leafletjs.com/reference-1.7.1.html</p>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#class-exercise-2-adding-more-markers", "title": "\u26bd Class Exercise #2 - Adding more markers", "text": "<p>Tasks</p> <ol> <li>Add some new markers!</li> <li>Customize the initial map</li> <li>Optional: change the base map or add some <code>html</code> into the marker popups.</li> </ol> <p>Looking at the code above a little bit, we can see some latitude/longitude pairs. Your task is to copy the marker code add more markers of your choosing. </p> <p>Unique variable names</p> <p>When you create new marker variables, you must give the marker variable a new name, like <code>marker2</code> or you will simply override the previous marker!  </p> <p>To find latitude/longitude of coordinates, you can use this website or another tool or your choosing:</p> <ul> <li>https://www.latlong.net/</li> </ul>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#optional-not-happy-with-the-basemap", "title": "Optional: Not happy with the basemap?", "text": "<p>See if you can switch the basemap out by visiting the following link and changing <code>L.tileLayer</code> on your map:</p> <ul> <li>https://leaflet-extras.github.io/leaflet-providers/preview/</li> </ul>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/2/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<p>Check to see if your code looks likes the following before moving on:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- hint: the majority of lab 1 assignment can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\" \"main_map\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> js/init.js<pre><code>// JavaScript const variable declaration\nconst map = L.map('the_map').setView([34.0709, -118.444], 15); // (1)!\n\n// Leaflet tile layer, i.e. the base map\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map); // (2)!\n\n//JavaScript let variable declaration to create a marker\nlet marker = L.marker([34.0709, -118.444]).addTo(map) // (3)!\n        .bindPopup('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work!')\n        .openPopup();\n</code></pre>", "tags": ["Lab 2", "Leaflet", "Web map"]}, {"location": "labs/week2/3/", "title": "JavaScript FUNctions", "text": "<p>Before we dive into functions, we need to talk a little more about JavaScript variables, because functions will often use or output variables!</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/3/#some-more-variable-definitions", "title": "Some more variable definitions", "text": "<p>What we really need to understand about variables is that they act like boxes where you can store or take information out of. - <code>const</code> acts like a locked safe that will not let you put anything into it after you define it - <code>let</code> is like a regular box. -  <code>var</code> is <code>VARy</code> problematic because it can be both locked and unlocked</p> <p>Here are some of the types in JavaScript:</p> <pre><code>//number\nlet box1 = 5;\nlet box2 = 5.0;\n\n//string\nlet box3 = 'five';\nlet box4 = \"five\";\n\n// string literal, uses backticks and ${variable} to bring in another variable\nlet box5 = `this is from box #4: ${box4}`;\n\n// array\nlet box6 = [1,2,3,4,5]; \n\n// object, stores variables together, can be of different types!\nlet box7 = {\"number\": 'five', \"value\":5};\n\n// boolean (true or false)\nlet box8 = true;\n\n// null value\nlet emptyBox;\n</code></pre> <p>Remember, to declare a variable (give it a value) you must use the  <code>=</code> symbol, like so:</p> <pre><code>let my_variable = \"exist!\";\n</code></pre> <p>Anatomy of a variable declaration</p> <ul> <li><code>let</code> is the keyword declaration of a variable</li> <li><code>my_variable</code> is the variable\u2019s name</li> <li><code>\"exist!\"</code> is the value for this variable</li> <li><code>;</code> defines the end of a line in JavaScript </li> </ul> <p>Let\u2019s warm up by using some variables in our <code>init.js</code> file.</p> js/init.js<pre><code>// original code\nconst map = L.map('the_map').setView([34.0709, -118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// adding markers\nlet work = L.marker([34.0709, -118.444]).addTo(map)\n        .bindPopup('Where I used to work on campus')\n\nlet home = L.marker([37.7409, -122.484]).addTo(map)\n        .bindPopup('Family in SF')\n\nlet random = L.marker([39.7409, -122.484]).addTo(map)\n        .bindPopup('Third Point')\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/3/#time-for-functions", "title": "Time for FUNctions", "text": "<p>Programmers are often programming because they have to get something done, but a true programmer likes to automate (as well as copy and paste).</p> <p>Let\u2019s edit our <code>init.js</code> and replace the <code>marker</code> variable with the following:</p> js/init.js<pre><code>// adding markers\nlet work = L.marker([34.0709, -118.444]).addTo(map)\n        .bindPopup('Where I work on campus')\n\nlet home = L.marker([37.7409, -122.484]).addTo(map)\n        .bindPopup('Family home in San Francisco')\n\nlet random = L.marker([39.7409, -122.484]).addTo(map)\n        .bindPopup('Third Point')\n</code></pre> <p>Your <code>init.js</code> should look like this:</p> js/init.js<pre><code>// original code\nconst map = L.map('the_map').setView([34.0709, -118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// adding markers\nlet work = L.marker([34.0709, -118.444]).addTo(map)\n        .bindPopup('Where I work on campus')\n\nlet home = L.marker([37.7409, -122.484]).addTo(map)\n        .bindPopup('Family home in San Francisco')\n\nlet random = L.marker([39.7409, -122.484]).addTo(map)\n        .bindPopup('Third Point')\n</code></pre> <p>Would it be cumbersome to add 10 points like this? What about 100? 1,000?</p> <p>That\u2019s where functions come in handy!</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/3/#our-first-function", "title": "Our first function!", "text": "<p>Functions are declared like variables by a keyword, however instead of <code>let</code>, <code>const</code>, or <code>var</code> we use the keyword\u2026 <code>function</code>, so original! </p> <p>A basic function looks likes this:</p> <pre><code>function our_first_function(){\n    console.log('hello from our first function')\n}\n</code></pre> <p>Let\u2019s try to apply what this looks like with marker creation!</p> <p>We know from the documentation and our previous usage that <code>L.marker</code>, needs <code>latitude</code> and <code>longitude</code>. So, we can automate the marker creation by creating a function like this:</p> js/init.js<pre><code>function addMarker(lat,lng,message){ //(1)!\n    console.log(message) //(2)!\n    L.marker([lat,lng]).addTo(map).bindPopup(message) //(3)!\n    return message //(4)!\n}\n</code></pre> <ol> <li><code>function</code> is the declaration of our function, <code>addMarker</code> is the name, and <code>lat,lng,message</code> is the parameter, which are passed in to a function to be utilized. <code>Parameters</code> are optional, but parentheses <code>()</code> are not!! The <code>{</code> is the begining of the function.</li> <li>The <code>console.log</code> in the body will tell us if the function is working.</li> <li>Here we use the <code>L.marker()</code> to add a marker</li> <li>The return is used to exit a function and return a value. </li> </ol> Why did we include a third parameter called <code>message</code>? <p>It allows us to customize our popups!</p> <p>Notice how the how function accesses our parameters: - <code>L.marker</code> uses  <code>lat</code>,<code>lng</code> - <code>bindPopUp</code> uses <code>message</code></p> <p>Function parameters</p> <p>You can pass in variables into functions and multiple parameters are seperated by a comma. In this function, there are 3 parameters: <code>(lat,lng,message)</code>. Remember that if you even if you have NO parameters, you must include the parenthesis <code>()</code> like follows: - <code>js#! function our_first_function(){return \"hello world\"}</code></p> <p>Go ahead and check the console!</p> <p>WHAT?! Nothing has changed! </p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/3/#using-functions", "title": "Using Functions", "text": "<p>In order for a function to run, it needs to be \u201cplugged-in\u201d. This is called \u201cinvoking\u201d or \u201ccalling\u201d the function. When a function has no parameters, you can call it like so:</p> <pre><code>    function_name()\n</code></pre> <p>But since our function does have parameters (namely the <code>lat</code>,<code>lng</code>,and <code>message</code>), you must specify what those are when you call the function.</p> <p>Add this to the end of our <code>init.js</code> file:</p> <p>js/init.js <pre><code>    addMaker(37,-122,'you are awesome! you automated a marker function')\n</code></pre></p> <p>Warning about the order of parameters!</p> <p>The order of the parameters (<code>lat</code>,<code>lng</code>,<code>message</code>) is must be in the SAME order that the function reads them!! Try swapping the <code>37</code> and <code>-122</code> to see what I mean.</p> <p>Now your console should return the \u201cmessage\u201d AND you should see a new marker on the map!</p> <p>Inside <code>function</code> blocks you can create variables, change HTML, and do all sorts of things like play videos and even create games.</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/3/#class-exercise-3-using-the-marker-function", "title": "\u26bdClass Exercise #3 - Using the marker function", "text": "<p>Create your own marker function that does the following:</p> <ul> <li>Utilizes at least <code>four parameters</code></li> <li>Declare a <code>new variable</code> inside the function </li> <li><code>Returns</code> a value (<code>return</code> values are optional, but can be used to exit a function and return/output a value.)</li> </ul> <p>Use your function to create 3 markers with it.</p> Check <pre><code>    // create function\n    function addMarker(lat,lng,title,message){\n        console.log(message)\n        L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt;`)\n        return message\n    }\n\n    // use the function\n    addMarker(37,-122,'home','home land!')\n    addMarker(32,-118,'work','where i work land!')\n    addMarker(39,-119,'location 1','random location')\n    addMarker(36,-120,'location 2','another random location')\n</code></pre> <p>If you finished early, try these extra challenges:</p> <ul> <li>Try to style your pop-up with 2 attributes!</li> </ul> <p>Bonus Exercise - Create your own function</p> <p>Create your own function that does the following:</p> <ul> <li>Utilizes at least <code>two parameters</code></li> <li>Declare a <code>new variable</code> inside the function </li> <li><code>Returns</code> a value</li> </ul> Bonus Answer <pre><code>    // create function\n    function addNumbers(value1,value2){\n        let result = value1 + value2\n        return result\n    }\n\n    // use the function\n    addNumbers(1,10)   // result: 11\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/3/#combining-strings", "title": "Combining Strings", "text": "<p>We can combine strings with the <code>+</code> operator. For example:</p> <pre><code>let zoomLevel = 10\nlet popup = 'The zoom level is ' + zoomLevel\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/3/#optional-shortcut-string-literals", "title": "Optional shortcut: String Literals", "text": "<p>We can use a backtick ` to create a string literal, which allows us to use variables inside the string.</p> <pre><code>let zoomLevel = 10\nlet popup = `The zoom level is ${zoomLevel}`\n</code></pre> <p>Just be aware, that </p> <pre><code>let popup = `${zoomLevel} + ${zoomLevel}`\n</code></pre> <p>String literals or template strings allow you to subsitute variables into strings with the <code>${VARIABLE_NAME}</code> syntax inside the place holders.</p> <p>Declaring a string with ` instead of <code>'</code> <code>'</code> or <code>\" \"</code>, allows you to convert <code>variables</code> to strings.  For example, the zoom level normally would be treated as a number, but when we brought it in with the <code>${}</code> combination it became a string so it could not be summed.</p> <p>This technique will be helpful for our pop-ups as follows:</p> <pre><code>function addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`) //(1)!\n    return message\n}\n</code></pre> <ol> <li>Notice how <code>title</code> is added to the <code>&lt;h2&gt;</code> tag element and <code>message</code> is added to an <code>&lt;h3&gt;</code> element?</li> </ol> <p>Alternative Method</p> <p>You can also bundle the pop-up into a variable, and then use that to populate the <code>bindPopup()</code> call: </p> <pre><code>let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\nL.marker([lat,lng]).addTo(map).bindPopup(popup_message)\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/3/#final-checkpoint", "title": "\ud83c\udfc1Final Checkpoint", "text": "js/init.js<pre><code>// declare map variable\nconst map = L.map('the_map').setView([34.0709,-118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\n// use our marker functions\naddMarker(37,-122,'home','home land!')\naddMarker(32,-118,'work','where i work land!')\naddMarker(39,-119,'location 1','random location')\naddMarker(36,-120,'location 2','another random location')\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Basic Leaflet Map&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- hint: the majority of lab 1 assignment can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n    &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/4/", "title": "\u2705 Final Template Code", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Basic Leaflet Map&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- hint: the majority of lab 1 assignment can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n    &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\" \"main_map\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> js/init.js<pre><code>// use the variables\nconst map = L.map('the_map').setView([34.0709,-118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\n// use our marker functions\naddMarker(37,-122,'home','home land!')\naddMarker(32,-118,'work','where i work land!')\naddMarker(39,-119,'location 1','random location')\naddMarker(36,-120,'location 2','another random location')\n</code></pre> <p>Now you should be ready to take on the lab assignment!</p>"}, {"location": "labs/week2/extra/", "title": "Extra: Creating a GeoJSON file", "text": "<p>Our class projects will connect information from our surveys to our map will, so first we will practice by creating a GeoJSON file of our own!</p>"}, {"location": "labs/week2/extra/#the-power-of-people-based-web-mapping", "title": "The power of people-based web mapping", "text": "<p>Let\u2019s put to practice what web development and GIS can do for empowering our own stories.</p> <p>Head over to GeoJSON.io:</p> <ul> <li>http://www.geojson.io/</li> </ul> <p>Click on the marker  tool:</p> <p></p> <p>Click on a location of interest to you:</p> <p></p> <p>Switch to the Table view by clicking on  Table:</p> <p></p> <p>Add a data column by clicking on  new column :</p> <p></p> <p>Call it place and click <code>OK</code>:</p> <p></p> <p>Click inside the <code>place</code> column</p> <p></p> <p>Type in a description for the <code>place</code>, in this case I called it home.</p> <p></p> <p>Zoom out by pressing the  button or ++ minus ++ key:</p> <p></p> <p>Click the edit  button:</p> <p></p> <p>Click on the marker and move it the adjust the location:</p> <p></p> <p>Click the  edit  button and then Save to save your edits:</p> <p></p> <p>Add a new column called color, to put some color to your map later.</p> <p></p> <p>When you are done, save your file by going to the top menu\u2019s Save option:</p> <p></p> <p>Click GeoJSON:</p> <p></p> <p>Download the file to your computer:</p> <p></p> <p>Copy the file into your project folder:</p> <p></p>"}, {"location": "labs/week2/extra/#in-class-exercise-1-leaving-your-marker-on-the-map", "title": "\u26bdIn-class Exercise #1 - Leaving  your mark(er) on the map!", "text": "<p>Go back and add more points to your GeoJSON file.</p> <p>Tasks</p> <ol> <li>Add some points into your GeoJSON file</li> <li>Save the file and add it to your lab3 folder</li> </ol> <p>After finishing the exercise, think about how empowering it was for you to be able to add data to the map yourselves. Whether you were clicking random spots or trying to find your old favorite places to visit, the ability to mark things is a reclaiming of mapping for yourself. This sense of staking a claim is what is meant when we refer to \u201cempowering community voices\u201d.</p>"}, {"location": "labs/week2/extra/#checkpoint-add-your-geojson-to-your-map", "title": "\ud83c\udfc1Checkpoint - Add your GeoJSON to your map", "text": "<ol> <li> <p>Make sure your GeoJSON file is in your <code>week2</code> folder!</p> </li> <li> <p>Take note of the filename!</p> </li> <li> <p>Modify your <code>js/init.js</code> file to add the GeoJSON file to your map:</p> </li> </ol> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(\"map.geojson\") // fetch the GeoJSON file, this is the name from step 2.\n    .then(response =&gt; {\n        return response.json();\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data).addTo(map)\n    });\n</code></pre>"}, {"location": "labs/week3/", "title": "A little UX/I(e) and Geo-J-cieON", "text": "<p>Adding functionality to our Leaflet.js map!</p> <p></p> <p>Goals</p> <ul> <li>Create a GeoJSON online and it to the map with JavaScript</li> <li>Understand how JavaScript works with HTML and CSS</li> <li>Understand how JavaScript variables, functions, methods work together</li> </ul>", "tags": ["Lab 3", "GeoJSON", "Buttons", "Event Listeners"]}, {"location": "labs/week3/#lab-outline", "title": "Lab Outline", "text": "<ol> <li>Event listeners</li> <li>Creating a GeojSON</li> <li>Fetch and then statements</li> </ol>", "tags": ["Lab 3", "GeoJSON", "Buttons", "Event Listeners"]}, {"location": "labs/week3/#starting-template-code-for-lab-3", "title": "Starting Template Code for lab #3", "text": "<p>Use the following template code or your lab assignment #2:</p> <p>2 Labs, 2 day!</p> <p>Because we will be doing 2 labs today, we will making two copies of this code. You can save yourself time by doing the following:</p> <ul> <li> <p>Make a copy of <code>index.html</code> as  <code>part1.html</code></p> </li> <li> <p>Make a copy of <code>js/init.js</code> to <code>js/part1.js</code> </p> </li> </ul> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- page contents can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\" \"main_map\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> js/init.js<pre><code>// declare the map\nconst map = L.map('the_map').setView([34.0709,-118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\naddMarker(37,-122,'home','home land!')\naddMarker(32,-118,'work','where i work land!')\naddMarker(39,-119,'location 1','random location')\naddMarker(36,-120,'location 2','another random location')\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n</code></pre>", "tags": ["Lab 3", "GeoJSON", "Buttons", "Event Listeners"]}, {"location": "labs/week3/1/", "title": "Lab 3A: A little UX/I(e) - Button events in the Fire KingDOM", "text": "", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week3/1/#the-htm-elements-avatag-the-last-airbender", "title": "The HTM-Elements: Ava<code>&lt;tag&gt;</code> the last Airbender", "text": "<p>Remember, when you see tags that have an <code>open</code> and <code>/end</code> in HTML, like <code>&lt;body&gt;&lt;/body&gt;</code>, they are referred to as elements, so for example: <pre><code>&lt;water&gt;Katara&lt;/water&gt; \n&lt;air&gt;Aang&lt;/air&gt; \n&lt;earth&gt;Toph&lt;/earth&gt; \n&lt;fire&gt;Zuko&lt;/fire&gt;\n</code></pre> Above we have four elements. Each element has a <code>content</code>, for example, the <code>earth</code> element\u2019s content is <code>Toph</code>. Unfortunately, despite how exciting those elements are, the most common HTML element is the <code>&lt;div&gt;&lt;/div&gt;</code> element, which is a generic container.</p> <p>This is not an element: <code>&lt;link&gt;</code> because there is not <code>/link</code> to close it.</p> <p>Elements can contain other elements, for example: <pre><code>&lt;kingdom&gt;\n    &lt;earth&gt;Toph&lt;/earth&gt;\n&lt;/kingdom&gt;\n</code></pre> Here <code>Toph</code> is inside the <code>earth</code> element, which is inside the <code>kingdom</code> element.</p> <p>Reminder that all tags can have attributes:</p> <pre><code>&lt;kingdom&gt;\n    &lt;earth attribute=\"valueForTheAttribute\"&gt;Toph&lt;/earth&gt;\n&lt;/kingdom&gt;\n</code></pre> <p>The <code>DOM</code> (Document Object Model) how HTML elements are treated as <code>objects</code> that can be manipulated by JavaScript. The <code>DOM</code> has an API (Application Programming Interface) with JavaScript is used to interact with the elements.</p> <p>The <code>DOM</code> is a tree structure, which means that the <code>document</code> is the root of the DOM tree, and all elements are children of the <code>document</code>.</p> <p>DOM Tree</p> <p>Just think of the <code>DOM</code> as the foundation of our <code>HTML</code> house and the <code>elements</code> are the rooms where we can use JavaScript appliances to interact with them. Anything outside the <code>&lt;html&gt;</code> element (i.e. after the <code>&lt;/html&gt;</code>) is not part of the <code>DOM</code> so you can\u2019t use JavaScript to access it.</p>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week3/1/#making-javascript-interact-with-html-ements-of-the-air-kingdom", "title": "Making JavaScript interact with HTML-ements of the Air KingDOM!", "text": "<p>Objective</p> <p>Make a button that we can click on to fly to a location for each of the markers you made.</p> <ol> <li> <p>Add a new function to our <code>addMarker</code> function</p> </li> <li> <p>Create the function to add buttons to the <code>DOM</code></p> </li> <li> <p>Add a function to move the map</p> </li> </ol> <p>Creating elements in the <code>DOM</code>?!</p> <p>To create HTML elements with JavaScript you need to use the createElement method.</p>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week3/1/#create-the-function-to-add-buttons", "title": "Create the function to add buttons", "text": "<p>Next we will add our new function. Notice how we are using the <code>lat</code>,<code>lng</code>,and <code>title</code> from the <code>addMarker</code> function? That\u2019s why it was helpful to do step one first.</p> js/init.js<pre><code>function createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // (1)! \n    newButton.id = \"button\"+title; // (2)! \n    newButton.innerHTML = title; // (3)! \n    newButton.setAttribute(\"lat\",lat); // (4)! \n    newButton.setAttribute(\"lng\",lng); // (5)! \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); // (6)! \n    })\n    document.getElementById(\"contents\").appendChild(newButton); //(7)! \n}\n</code></pre> <ol> <li>Creates a new button <code>element</code></li> <li>Gives the button a unique <code>id</code></li> <li>Gives the button a <code>title</code></li> <li>Sets the <code>latitude</code></li> <li>Sets the <code>longitude</code></li> <li>Tells Leaflet where to <code>flyTo()</code>, which is the latitude/longitude</li> <li>This targets the <code>id</code> where the buttons should be added to! In this case it is the div         with the id <code>contents</code>!</li> </ol>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week3/1/#call-the-createbuttons-in-our-addmarker-function", "title": "Call the <code>createButtons()</code> in our <code>addMarker</code> function", "text": "<p>Remember, the only way functions work is if they are called, so the last step is to call the <code>createButtons()</code> in our <code>addMarker()</code> function.</p> js/init.js<pre><code>function addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    createButtons(lat,lng,title); //(1)!\n    return message\n}\n</code></pre> <ol> <li>This is the line that calls our <code>createButtons()</code> function!</li> </ol> <p>Try clicking the button on the webpage and it should fly to the location of that marker!</p>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week3/1/#end-of-lab-3a", "title": "\ud83d\uded1End of Lab 3A\ud83d\uded1", "text": "<p>This is the end of part 1 for today\u2019s lab which you can use for Lab Assignment 3A.</p> <p>Let\u2019s change our <code>html</code> and <code>js</code> file names, to <code>part1.js</code> and <code>part1.html</code> to get ready for the second part of the lab.</p> <p>Your final code <code>Lab 3A</code> should look like the following:</p> js/part1.js<pre><code>// declare the map and use the variables above\nconst map = L.map('the_map').setView([34.0709,-118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\naddMarker(37,-122,'home','home land!')\naddMarker(32,-118,'work','where i work land!')\naddMarker(39,-119,'location 1','random location')\naddMarker(36,-120,'location 2','another random location')\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    createButtons(lat,lng,title);\n    return message\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    document.getElementById(\"contents\").appendChild(newButton); //this adds the button to our page.\n}\n</code></pre> part1.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- page contents can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n         &lt;script src=\"js/part1.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week3/2/", "title": "Lab 3B: Creating a GeoJSON file", "text": "<p>Learning how to connect information from our surveys to our map will be the key for our class projects, so first we will practice by creating a GeoJSON file of our own!</p>", "tags": ["Lab 3", "Creating a GeoJSON", "GeoJSON"]}, {"location": "labs/week3/2/#the-power-of-people-based-web-mapping", "title": "The power of people-based web mapping", "text": "<p>Let\u2019s put to practice what web development and GIS can do for empowering our own stories.</p> <p>Head over to GeoJSON.io:</p> <ul> <li>http://www.geojson.io/</li> </ul> <p>Click on the marker  tool:</p> <p></p> <p>Click on a location of interest to you:</p> <p></p> <p>Switch to the Table view by clicking on  Table:</p> <p></p> <p>Add a data column by clicking on  new column :</p> <p></p> <p>Call it place and click <code>OK</code>:</p> <p></p> <p>Click inside the <code>place</code> column</p> <p></p> <p>Type in a description for the <code>place</code>, in this case I called it home.</p> <p></p> <p>Zoom out by pressing the  button or ++ minus ++ key:</p> <p></p> <p>Click the edit  button:</p> <p></p> <p>Click on the marker and move it the adjust the location:</p> <p></p> <p>Click the  edit  button and then Save to save your edits:</p> <p></p> <p>Add a new column called color, to put some color to your map later.</p> <p></p> <p>When you are done, save your file by going to the top menu\u2019s Save option:</p> <p></p> <p>Click GeoJSON:</p> <p></p> <p>Download the file to your computer:</p> <p></p> <p>Copy the file into your project folder:</p> <p></p>", "tags": ["Lab 3", "Creating a GeoJSON", "GeoJSON"]}, {"location": "labs/week3/2/#in-class-exercise-1-leaving-your-marker-on-the-map", "title": "\u26bdIn-class Exercise #1 - Leaving  your mark(er) on the map!", "text": "<p>Go back and add more points to your GeoJSON file.</p> <p>Tasks</p> <ol> <li>Add some points into your GeoJSON file</li> <li>Save the file and add it to your lab3 folder</li> </ol> <p>After finishing the exercise, think about how empowering it was for you to be able to add data to the map yourselves. Whether you were clicking random spots or trying to find your old favorite places to visit, the ability to mark things is a reclaiming of mapping for yourself. This sense of staking a claim is what is meant when we refer to \u201cempowering community voices\u201d.</p>", "tags": ["Lab 3", "Creating a GeoJSON", "GeoJSON"]}, {"location": "labs/week3/2/#checkpoint-check-your-geojson", "title": "\ud83c\udfc1Checkpoint - Check your GeoJSON", "text": "<ol> <li> <p>Make sure your GeoJSON file is in your <code>week3b</code> folder!</p> </li> <li> <p>Take note of the filename! The default from https://geojson.io is <code>map.geojson</code>, but you can change it to whatever you want.</p> </li> </ol>", "tags": ["Lab 3", "Creating a GeoJSON", "GeoJSON"]}, {"location": "labs/week3/3/", "title": "FETCH and THEN", "text": "<p>Time to dive back into scary JavaScript waters! Before doing so, <code>let</code>\u2019s just make sure we are warmed-up for our swim!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#back-to-javascript-variables-again", "title": "Back to JavaScript variables again!", "text": "Need a variable refresher?", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#revisiting-more-variable-definitions", "title": "Revisiting more variable definitions", "text": "<p>What we really need to understand about variables is that they act like boxes where you can store or take information out of. - <code>const</code> acts like a locked safe that will not let you put anything into it after you define it - <code>let</code> is like a regular box. -  <code>var</code> is <code>VARy</code> problematic because it can be both locked and unlocked</p> <p>Here are some of the types in JavaScript:</p> <pre><code>//number\nlet box1 = 5;\nlet box2 = 5.0;\n\n//string\nlet box3 = 'five';\nlet box4 = \"five\";\n\n// string literal, uses backticks and ${variable} to bring in another variable\nlet box5 = `this is from box #4: ${box4}`;\n\n// array, which is a list of things\nlet box6 = [1,2,3,4,5]; \n\n// Object, stores variables together, can be of different types!\nlet box7 = {\"number\": 'five', \"value\":5};\n\n// boolean (true or false)\nlet box8 = true;\n\n// null value\nlet emptyBox;\n</code></pre> <p>Remember, to declare a variable or give it a value you must use the  <code>=</code> symbol, like so:</p> <pre><code>let my_variable = \"exist!\";\n</code></pre> <p>Anatomy of a variable declaration</p> <ul> <li><code>let</code> is the keyword declaration of a variable</li> <li><code>my_variable</code> is the variable\u2019s name</li> <li><code>\"exist!\"</code> is the value for this variable</li> <li><code>;</code> defines the end of a line in JavaScript </li> </ul> <p>```</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#javascript-warm-up-using-variables", "title": "JavaScript Warm-up: Using Variables", "text": "<p>Instead of hard coding the values, we can use variables to store the values. For example, instead of writing: <pre><code>const map = L.map('the_map').setView([34.0709,-118.444], 5);\n</code></pre></p> <p>We can write: <pre><code>// declare the variables\nlet mapCenter = [34.0709,-118.444]\nconst zoom = 5\n\n// declare the map and use the variables above\nconst map = L.map('the_map').setView(mapCenter, zoom);\n</code></pre></p> <p>This is a little more work, but it is much easier to change the values later. For example, if we wanted to change the map center, we can just change the value of <code>mapCenter</code> instead of having to change the value in multiple places.</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#finished-warm-up-code", "title": "Finished warm-up code", "text": "js/init.js<pre><code>// declare the variables\nlet mapCenter = [34.0709,-118.444]\nconst zoom = 5\n\n// declare the map and use the variables above\nconst map = L.map('the_map').setView(mapCenter, zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\naddMarker(37,-122,'home','home land!')\naddMarker(32,-118,'work','where i work land!')\naddMarker(39,-119,'location 1','random location')\naddMarker(36,-120,'location 2','another random location')\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n</code></pre>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#javascript-objects-boxing-up-our-variables", "title": "JavaScript <code>Objects</code> - Boxing-up our variables", "text": "<p>An <code>object</code> is a unique variable that can store many other variables! Think of it as a big box where many other Lego pieces or even other boxes can be put inside!</p> <pre><code>let myJavaScriptObject = {\"key_name\": \"value\", \"key_2_name\":\"value\"}\n</code></pre> <p>Your object can look like this too:</p> <pre><code>    let myJavaScriptObject = {\n        \"key_name\": \"value\", \n        \"key_2_name\":\"value\"\n        };\n</code></pre> Wait! Didn\u2019t we see this somewhere? <p>Yep! It was in the GeoJSON we created!</p> The meaning behind GeoJSON <p>GeoJSON actually stands for \u201cgeographic\u201d JavaScript Object Notation! </p> <p>In a JavaScript object, each value has a <code>key</code> and a <code>value</code>. </p> <p>The <code>:</code> symbol seperates the <code>key</code> from the <code>value</code>, like this:</p> <pre><code>let myObject = {\"key\":\"value\"};\n</code></pre> <ul> <li>Everything in an object is contained within the curly braces <code>{}</code></li> <li>Anything to left of the <code>:</code> is the key</li> <li>Anything to right of the <code>:</code> is the value</li> <li>New key-value pairs are separated by a comma, <code>,</code></li> <li> Warning ! Never end an object with a <code>,</code>!!!!</li> </ul>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#accessing-an-objects-property", "title": "Accessing an object\u2019s property", "text": "<p>To access an <code>object</code>\u2019s properties we use the <code>.</code> notation.</p> <p>For example, <code>myObject.key</code> will return the value, which in this case is.. <code>value</code>!</p> <p>No  spaces  in variable names!</p> <p>You cannot use spaces in variable definitions like <code>let my map;</code>, so stick with <code>camelCase</code> or <code>snake_case</code> when naming varibles with multiple words. When defining <code>key</code>s in <code>objects</code>, you can use spaces, but it is not recommended. </p> <p>If you do encounter a <code>key</code> with a space in it, like, <code>let anObject = \"my annoying key\": \"is this\"</code>, you cannot use the <code>.</code> syntax to access it you must use this alternative method: <code>anObject[\"my annoying key\"]</code></p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#in-class-exercise-1-variables-and-consolelog", "title": "\u26bdIn-class Exercise #1 - Variables and console.log", "text": "<p>Tasks</p> <ol> <li>Re-copy this week\u2019s lab template with <code>index.html</code> and <code>init.js</code></li> <li>Replace the hard coded values of <code>const map = L.map('the_map').setView(mapCenter, zoomLevel);</code> with an <code>object</code>.</li> <li>Get the <code>object</code> to show up in the console.</li> </ol> <p>Reminder: Working with our Dev Console</p> <p>In VS Code, start Live Server by clicking  <code>Go Live</code>.</p> <p>After Firefox runs, open the Console:</p> <ul> <li>You can either right click anywhere on a page with the mouse and clicking on <code>Inspect</code> or press F12 on the keyboard.</li> </ul> <p>Remember to think of the Console as the Command Line/Terminal for your browser.</p> Answer <p>Your code should look like the following:</p> <pre><code>    let mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n    const map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n    console.log(mapOptions)\n</code></pre> <ol> <li> <p>In the console, type in <code>mapOptions</code> (or whatever you chose to name your object) then press Enter. </p> </li> <li> <p>You should see your JavaScript object, <code>mapOptions</code>!</p> </li> </ol> <p>Reflection</p> <p>Think about the benefits of having variables in an object, is it easier to read for you? Harder?</p> <p>Knowing how to check the console will help us test our JavaScript code and even run functions and methods without leaving the browser!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#finished-exercise-1-code", "title": "Finished Exercise #1 code", "text": "<p>Make sure your code looks like the following before moving on:</p> js/init.js<pre><code>let mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// declare the map and use mapOptions\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\naddMarker(37,-122,'home','home land!')\naddMarker(32,-118,'work','where i work land!')\naddMarker(39,-119,'location 1','random location')\naddMarker(36,-120,'location 2','another random location')\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n</code></pre>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#a-method-to-my-madness", "title": "A method to my madness?!", "text": "<p>With that refresher about <code>variables</code> and practice with <code>objects</code> in mind, do you remember how our <code>functions</code> in last week\u2019s lab took a <code>variable</code> and did something to it?</p> <p>Variables have built-in functions called <code>method</code>s!!!</p> <p>For example, <code>string</code>-type variables have <code>methods</code> for changing the string, like making all the letters <code>UPPERCASE</code> or splitting a character based on a <code></code>. To access a method, you use the <code>.</code> after the variable has been declared as that type.</p> <p>Calling methods for what they are <code>()</code></p> <p>Since <code>methods</code> are functions, you must call them in the same way with the <code>()</code> at the end. This is because some <code>methods</code> have parameters you can fill in.</p> <p>A helping <code>console</code> hand!</p> <p>You can check what methods are available right in Firefox\u2019s web developer console! Most modern web browsers have this feature as well.</p> <p>To give this a try, copy and paste this right into your web browser and see what happens!</p> <pre><code>let myString = \"hi, this is a test string\"\nlet divideBySpace = myString.split(\" \")\nconsole.log(divideBySpace) \n</code></pre> Did you get this response? <p><code>result: Array(6) [ \"hi,\", \"this\", \"is\", \"a\", \"test\", \"string\" ]</code> </p> <p>If you did, yay! This is an array (list), of 6 strings!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#in-class-exercise-2-what-other-methods-are-available", "title": "\u26bdIn-class Exercise #2 - What other methods are available?", "text": "<p>As with all languages, learning to look-up things is important to expand what you can say and do!  The following is a table of where you can find some methods:</p> Location Type MDN Strings W3 Strings W3 Numbers W3 Arrays W3 Objects <p>Tasks</p> <ol> <li>Visit one of the links above or search online to find other methods.</li> <li>Get the result to display in your console.</li> <li>Bonus: read the next section try to <code>chain</code> multiple <code>methods</code> together.</li> </ol> Answer <p>Here is an example of an uppercase method:</p> <pre><code>let myString = \"hi, this is a test string\"\nlet divideBySpace = myString.toUpperCase()\nconsole.log(divideBySpace) \n</code></pre> <p>Result:</p> <p><code>\"HI, THIS IS A TEST STRING\"</code></p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#method-chaining", "title": "Method chaining", "text": "<p>In JavaScript whenever you see a <code>.</code> after a parenthesis<code>()</code>,it means you are chaining a function to follow it. </p> <p>For example:</p> <pre><code>let myString = \"hi this is a test string\"\nlet divideBySpace = myString.toUpperCase().split(\" \")\nconsole.log(divideBySpace)\n</code></pre> <p>The output should look a little bit different than last time thanks to the <code>toUpperCase()</code> method!</p> Output <p><code>Array(6) [ \"HI\", \"THIS\", \"IS\", \"A\", \"TEST\", \"STRING\" ]</code></p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#time-to-fetch-and-then-do-something", "title": "Time to <code>fetch</code> and <code>then</code> do something", "text": "<p>To access data, we will use the JavaScript Fetch API to <code>fetch</code> our GeoJSON file and <code>then</code> add it to our map.</p> <p>When we access the GeoJSON file with the <code>Fetch</code> API we then get many <code>methods</code> to use with it.</p> <p>A <code>fetch</code> looks like this:</p> <p><code>fetch(\"map.geojson\")</code></p> <p>Wait! No <code>variable</code> declaration?! </p> <p>Why do you think so?</p> Answer <p>The <code>fetch</code> API is actually a built-in function for <code>JavaScript</code>, much like <code>console.log()</code>!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#good-lets-carry-on-then", "title": "Good? Let\u2019s carry on <code>then</code>!", "text": "<p><code>fetch</code> actually does nothing by itself! It needs to do something with the data. Thus, <code>fetch</code> is almost always used together with the <code>then</code> method as follows:</p> <pre><code>fetch(\"map.geojson\") //(1)! \n    .then(function aGenericDataFunctionName(data){//(2)!\n        return data.json()//(3)!\n    })\n    .then(function anotherGenericDataFunctionName(data){ //(4)!\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data).addTo(map)//(5)!\n    });\n</code></pre> <ol> <li><code>map.geojson</code> is location of the GeoJSON file relative to our file. If you moved the file to a subdirectory called <code>data</code>, then you would have to make this <code>data/map.geojson</code>.</li> <li>Here is our first chain, we are trying to <code>fetch</code> our geojson file. We will call a <code>generic</code> function in here.</li> <li>For the next step we need a <code>json</code>, so we <code>return</code> the value as a <code>json</code> with the <code>.json()</code> method!</li> <li>This is the next <code>then</code> i.e. our second chain!</li> <li>This calls <code>L.geoJSON()</code> and adds our <code>data</code> to the map.</li> </ol>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#anoynmous-functions", "title": "Anoynmous <code>functions</code>", "text": "<p>Since our <code>.then</code> is a one-time call, it does not need named functions as a part of it! </p> <p>So we can make our <code>function</code> anoymous by removing the name part of it.</p> <p>Here\u2019s how the simpler <code>fetch-then</code> should look:</p> <pre><code>fetch(\"map.geojson\")\n    .then(function (data){\n        return data.json()\n    })\n    .then(function (data){\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data).addTo(map)\n    });\n</code></pre> <p>Looks much better, right? Well\u2026 We can shorten it even more!!!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#what-is-this", "title": "WHAT IS THIS <code>=&gt;</code> ?!!!", "text": "<p>The <code>=&gt;</code> is a shortcut to define an <code>anoynmous</code> function and is called an <code>arrow-function</code>!</p> <p>Here is how it looks in practice:</p> <pre><code>fetch(\"map.geojson\") //(1)! \n    .then(response =&gt; { //(2)! \n        return response.json();\n    })\n    .then(data =&gt;{ //(3)!\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data).addTo(map)//(4)!\n    });\n</code></pre> <ol> <li><code>map.geojson</code> is location of the GeoJSON file relative to our file. If you moved the file to a subdirectory called <code>data</code>, then you would have to make this <code>data/map.geojson</code>.</li> <li>Here is our first chain, we are trying to <code>fetch</code> our geojson file.</li> <li>This is our next chain, we are trying to add it to our map!</li> <li>The <code>addTo(map)</code> is similar to our <code>marker.addTo(map)</code> function call!</li> </ol> <p>The map should now have a blue tint over it and you cannot interact with it. Not really useful.</p> <p>Going forward we will use the <code>arrow-function</code> because it is shorter, but if you want to use the other methods, feel free to.</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<p>Before moving on, check to see if JavaScript code looks like the following:</p> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json();\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data).addTo(map)\n    });\n</code></pre>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/4/", "title": "Optional: Adding more to our <code>L.GeoJSON</code>", "text": "<p>Optional</p> <p>This is an optional lab, we will cover this in the next lab.</p> <p>Remember that putting a variable into a <code>type</code> gives you access to different methods?</p> <p>Rather than just stopping at <code>L.geoJSON(data).addTo(map)</code> we are going to expand that part of the code to style the GeoJSON when we add it!</p>"}, {"location": "labs/week3/4/#clickable-geojson-recipe", "title": "Clickable GeoJSON recipe", "text": "<p>This is the basic Leaflet recipe for a clickable geojson:</p> <pre><code>// the leaflet method for adding a geojson\nL.geoJSON(data)\n    .bindPopup(layer =&gt; {\n        return \"you clicked a geojson!\";\n    }).addTo(map);\n</code></pre>"}, {"location": "labs/week3/4/#adding-geojson-functionality", "title": "Adding GeoJSON functionality", "text": "<p>Now that we have that recipe, we need to put it somewhere\u2026 Where is the best place for it?</p> Answer <pre><code>fetch(\"map.geojson\") \n    .then(response =&gt; { \n        return response.json();\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data) //(1)!\n        .bindPopup(layer =&gt; {\n            return \"you clicked a geojson!\"; //(2)!\n        }).addTo(map); //(3)!\n    });\n</code></pre> <ol> <li>This is where we added the clickable geoJSON recipe!!</li> <li>Notice we are going to a generic <code>you clicked a geojson</code> message here!</li> <li>This is where we add the <code>GeoJSON</code> to the map.</li> </ol> <p>Rather than just simply returning the <code>popup</code> as a generic <code>you clicked a geojson</code>, let\u2019s use our GeoJSON\u2019s <code>place</code> property that we created in the first part of the lab!</p>"}, {"location": "labs/week3/4/#checking-our-logs", "title": "Checking our logs!", "text": "<p>Let\u2019s <code>console.log()</code> our layer to see how it looks:</p> Where should the <code>console.log()</code> go? <p>Correct, line 3!</p> <pre><code>L.geoJSON(data,\n    }).bindPopup(layer =&gt; {\n            console.log(layer)\n            return \"you clicked a geojson!\"\n    }).addTo(map);\n</code></pre> <p>Now when you click the marker, this should pop-up in the console:</p> <p></p> <pre><code>Object { options: {\u2026}, _latlng: {\u2026}, _initHooksCalled: true, feature: {\u2026}, defaultOptions: {}, _leaflet_id: 37, _eventParents: {\u2026}, _mapToAdd: {\u2026}, _map: {\u2026}, _zoomAnimated: true, \u2026 }\n</code></pre> <p>We can drill down into our GeoJSON by clicking on the arrows:</p> <p></p> <p>Find the <code>feature</code> property and click the arrow to expand it:</p> <p></p> <p>Look at the <code>properties</code> and notice what is in there!</p> <p></p> <p>Right! Those are the columns and values we created from the first part of the lab 3b!</p> <p>This is called <code>traversing</code> the <code>object</code> path, and it works the same way when we linked our <code>photos</code> or <code>.css</code>. The key difference is that it is within one file!</p> <p>Recapping how we got here, we: 1. Went into the object (<code>layer</code>) 2. Clicked on <code>feature</code> 3. Clicked on <code>properties</code>.</p> <p>To access the place name, we will need to specify that with <code>place</code>.</p> <p>As a result, our path should look like this:</p> <pre><code>layer.feature.properties.place;\n</code></pre> <p>OMG!! The <code>.</code> returns?!</p> <p>Aha, very observant! Similar to <code>chaining</code> methods, we use the <code>.</code> to chain going down an <code>object</code> path. Why is that?! Well.. It has something to do with <code>classes</code>, but thats out of the <code>scope</code> of this class. (multiple coding puns intended.) If you really want to learn more, click here to read about Object-Oriented Programming and JavaScript: click if you dare!.</p> <p>Let\u2019s <code>console.log()</code> the result to make sure we have the right path down:</p> <pre><code>    L.geoJSON(data\n        ).bindPopup(layer =&gt; {\n                console.log(layer.feature.properties.place)\n                return \"you clicked a geojson!\"\n        }).addTo(map);\n</code></pre> <p>When you click a point, the correct <code>value</code> should show up:</p> <p></p> <p>Woo!! Now let\u2019s <code>return</code> this value instead of the generic message:</p> <pre><code>    L.geoJSON(data\n        ).bindPopup(layer =&gt; {\n                console.log(layer.feature.properties.place)\n                return layer.feature.properties.place\n        }).addTo(map);\n</code></pre> <p>Now when you click on the map, the <code>place</code> values shows up!</p>"}, {"location": "labs/week3/4/#utilizing-our-geojsons-color-property", "title": "Utilizing our GeoJSON\u2019s <code>color</code> property", "text": "<p>Before we finish this module, let\u2019s take what we learned one step further and use our <code>color</code> property too.</p> <p>While <code>bindPopUp()</code> was nice and an outside method, changing the color needs to be inside of the <code>L.geoJSON()</code> call. So we have to attach it to an object inside as follows:</p> <pre><code>            L.geoJSON(data, { // (1)!\n                style: layer =&gt; { //(2)!\n                    return {color: layer.feature.properties.color}; //(3)!\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n</code></pre> <ol> <li>Here we add a <code>,</code> to add a new value, and then a <code>{</code> to start our new object</li> <li><code>style</code> is what Leaflet\u2019s <code>L.GeoJSON()</code> needs, so we have to use that</li> <li>We are assigning our <code>layer.feature.properties.color</code> here!</li> </ol> <p>YOU LIE!!! THIS DOES NOT WORK</p> <p>Correct! This code will not work because\u2026 A GeoJSON\u2019s color property can only be set for <code>L.CircleMarkers</code>, <code>lines</code>, or <code>polygons</code> but not regular <code>L.markers</code>.</p>"}, {"location": "labs/week3/4/#converting-our-geojson-to-circlemarkers", "title": "Converting our GeoJSON to <code>CircleMarkers</code>", "text": "<p>Since <code>{style: \"red\"}</code> or any color won\u2019t work for our marker, we need to convert it into a circle marker using the <code>pointToLayer()</code> method! Again, this has to be inside the <code>L.geoJSON()</code> because that is where Leaflet must know what color to make the features.</p> <p>We will use the <code>arrow-function</code> so we can type fewer characters:</p> <pre><code>        L.geoJSON(data, {\n            pointToLayer: (feature, latlng) =&gt; { //(1)!\n                return L.circleMarker(latlng, {color: feature.properties.color}); //(2)!\n            }\n            // ... other code here\n</code></pre> <ol> <li>Here we pass in our <code>feature</code> and <code>latlng</code> into the simplified <code>=&gt; function</code></li> <li>Now we convert it to a <code>L.circleMarker()</code>, with <code>latlng</code> being the first parameter, then          setting <code>color</code> to the <code>feature.properties.color</code>. </li> </ol> <p>The <code>fetch</code>\u2019s final <code>.then</code> should now look like the following:</p> <pre><code>fetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data, {\n                pointToLayer: (feature, latlng) =&gt; { \n                    return L.circleMarker(latlng, {color: feature.properties.color})\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n    })\n</code></pre>"}, {"location": "labs/week3/4/#last-checkpoint", "title": "\ud83c\udfc1Last Checkpoint", "text": "<p>Our final <code>init.js</code> file should look like this:</p> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data, {\n                pointToLayer: (feature, latlng) =&gt; { \n                    return L.circleMarker(latlng, {color: feature.properties.color})\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n    })\n</code></pre> <p>If everything works up until now, then you are ready to take on the lab assignment 3b!</p> <p>If something is not working, check the final lab template!</p>"}, {"location": "labs/week3/5/", "title": "\u2705 Final Template Code for Lab 3b", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- page contents can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    /* grid-template-columns: 1fr;  */\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    /* height: 100vh; */\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\" \"main_map\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data, {\n                pointToLayer: (feature, latlng) =&gt; { \n                    return L.circleMarker(latlng, {color: feature.properties.color})\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n    })\n</code></pre> <p>You can use this template to finish this week\u2019s lab assignment!</p>"}, {"location": "labs/week3/extra/", "title": "\u2b50Extra: Changing colors", "text": "<p>These are some extra tips for changing colors and icons in your map.</p>"}, {"location": "labs/week3/extra/#customizing-icons", "title": "Customizing Icons", "text": "<p>If you\u2019d rather use icons then a circular color, then try to see if you can implement this code, be sure to have a custom icon ready!</p> js/init.js<pre><code>function createCustomIcon (feature, latlng) {\n  let myIcon = L.icon({\n    iconUrl: 'my-icon.png',\n    shadowUrl: 'my-icon.png',\n    iconSize:     [25, 25], // width and height of the image in pixels\n    shadowSize:   [35, 20], // width, height of optional shadow image\n    iconAnchor:   [12, 12], // point of the icon which will correspond to marker's location\n    shadowAnchor: [12, 6],  // anchor point of the shadow. should be offset\n    popupAnchor:  [0, 0] // point from which the popup should open relative to the iconAnchor\n  })\n  return L.marker(latlng, { icon: myIcon })\n}\n</code></pre>"}, {"location": "labs/week3/extra/#geojson-polygon-coloring", "title": "GeoJSON Polygon Coloring", "text": "<p>If you drew polygons instead of markers, then following code will turn your geojson into a choropleth map:</p> <pre><code>// this is a function to get the color, notice how the numbers are hard coded, who decides that?\nfunction getColor(d) {\n    return d &gt; 1000000 ? '#800026' :\n           d &gt; 500000  ? '#BD0026' :\n           d &gt; 200000   ? '#FEB24C' :\n           d &gt; 10000   ? '#FED976' :\n                      '#FFEDA0';\n}\n\n// this is the generation function for the style, notice it uses the getColor function\nfunction style(feature) {\n    return {\n        fillColor: getColor(feature.properties.TOTAL_POP),\n        weight: 2,\n        opacity: 1,\n        color: 'white',\n        dashArray: '3',\n        fillOpacity: 0.7\n    };\n}\n\nfetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(ca_counties =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(ca_counties, {\n            style: style\n        }).bindPopup(function (layer) {\n            return layer.feature.properties.name;\n        }).addTo(map);\n    })\n</code></pre>"}, {"location": "labs/week4/", "title": "GeoJSON Styling", "text": "<p>Adding a Google Form to our mapplication!</p>", "tags": ["Lab 4"]}, {"location": "labs/week4/#lab-outline", "title": "Lab outline", "text": "<ol> <li>Styling GeoJSONs</li> </ol>", "tags": ["Lab 4"]}, {"location": "labs/week4/#starting-template-code-for-lab-4", "title": "Starting template code for lab #4", "text": "<p>Use the following template code or your lab assignment #3a or #3b:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- page contents can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-areas: \"content\" \"main_map\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(`map.geojson`)\n    .then(response =&gt; {\n        console.log(response)\n        return response\n    })\n    .then(data =&gt;{\n        // do something with the data\n    })\n</code></pre> map.geojson<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"place\": \"home\",\n        \"color\": \"red\"\n      },\n      \"geometry\": {\n        \"coordinates\": [\n          -118.29687953814576,\n          34.061455838557535\n        ],\n        \"type\": \"Point\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"place\": \"work\",\n        \"color\": \"blue\"\n      },\n      \"geometry\": {\n        \"coordinates\": [\n          -118.43969437158387,\n          34.07271277905194\n        ],\n        \"type\": \"Point\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"place\": \"old home\",\n        \"color\": \"red\"\n      },\n      \"geometry\": {\n        \"coordinates\": [\n          -118.43848986633458,\n          34.05513005654072\n        ],\n        \"type\": \"Point\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"place\": \"metro work\",\n        \"color\": \"blue\"\n      },\n      \"geometry\": {\n        \"coordinates\": [\n          -118.23503623440803,\n          34.055738694402294\n        ],\n        \"type\": \"Point\"\n      }\n    }\n  ]\n}\n</code></pre>", "tags": ["Lab 4"]}, {"location": "labs/week4/1/", "title": "Adding more to our <code>L.GeoJSON</code>", "text": "<p>Remember that putting a variable into a <code>type</code> gives you access to different methods?</p> <p>Rather than just stopping at <code>L.geoJSON(data).addTo(map)</code> we are going to expand that part of the code to style the GeoJSON when we add it!</p>", "tags": ["Lab 4", "Styling GeoJSON", "GeoJSONs"]}, {"location": "labs/week4/1/#clickable-geojson-recipe", "title": "Clickable GeoJSON recipe", "text": "<p>This is the basic Leaflet recipe for a clickable geojson:</p> <pre><code>// the leaflet method for adding a geojson\nL.geoJSON(data)\n    .bindPopup(layer =&gt; {\n        return \"you clicked a geojson!\";\n    }).addTo(map);\n</code></pre>", "tags": ["Lab 4", "Styling GeoJSON", "GeoJSONs"]}, {"location": "labs/week4/1/#adding-geojson-functionality", "title": "Adding GeoJSON functionality", "text": "<p>Now that we have that recipe, we need to put it somewhere\u2026 Where is the best place for it?</p> Answer <pre><code>fetch(\"map.geojson\") \n    .then(response =&gt; { \n        return response.json();\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data) //(1)!\n        .bindPopup(layer =&gt; {\n            return \"you clicked a geojson!\"; //(2)!\n        }).addTo(map); //(3)!\n    });\n</code></pre> <ol> <li>This is where we added the clickable geoJSON recipe!!</li> <li>Notice we are going to a generic <code>you clicked a geojson</code> message here!</li> <li>This is where we add the <code>GeoJSON</code> to the map.</li> </ol> <p>Rather than just simply returning the <code>popup</code> as a generic <code>you clicked a geojson</code>, let\u2019s use our GeoJSON\u2019s <code>place</code> property that we created in the first part of the lab!</p>", "tags": ["Lab 4", "Styling GeoJSON", "GeoJSONs"]}, {"location": "labs/week4/1/#checking-our-logs", "title": "Checking our logs!", "text": "<p>Let\u2019s <code>console.log()</code> our layer to see how it looks:</p> Where should the <code>console.log()</code> go? <p>Correct, line 3!</p> <pre><code>L.geoJSON(data,\n    }).bindPopup(layer =&gt; {\n            console.log(layer)\n            return \"you clicked a geojson!\"\n    }).addTo(map);\n</code></pre> <p>Now when you click the marker, this should pop-up in the console:</p> <p></p> <pre><code>Object { options: {\u2026}, _latlng: {\u2026}, _initHooksCalled: true, feature: {\u2026}, defaultOptions: {}, _leaflet_id: 37, _eventParents: {\u2026}, _mapToAdd: {\u2026}, _map: {\u2026}, _zoomAnimated: true, \u2026 }\n</code></pre> <p>We can drill down into our GeoJSON by clicking on the arrows:</p> <p></p> <p>Find the <code>feature</code> property and click the arrow to expand it:</p> <p></p> <p>Look at the <code>properties</code> and notice what is in there!</p> <p></p> <p>Right! Those are the columns and values we created from the first part of the lab 3b!</p> <p>This is called <code>traversing</code> the <code>object</code> path, and it works the same way when we linked our <code>photos</code> or <code>.css</code>. The key difference is that it is within one file!</p> <p>Recapping how we got here, we: 1. Went into the object (<code>layer</code>) 2. Clicked on <code>feature</code> 3. Clicked on <code>properties</code>.</p> <p>To access the place name, we will need to specify that with <code>place</code>.</p> <p>As a result, our path should look like this:</p> <pre><code>layer.feature.properties.place;\n</code></pre> <p>OMG!! The <code>.</code> returns?!</p> <p>Aha, very observant! Similar to <code>chaining</code> methods, we use the <code>.</code> to chain going down an <code>object</code> path. Why is that?! Well.. It has something to do with <code>classes</code>, but thats out of the <code>scope</code> of this class. (multiple coding puns intended.) If you really want to learn more, click here to read about Object-Oriented Programming and JavaScript: click if you dare!.</p> <p>Let\u2019s <code>console.log()</code> the result to make sure we have the right path down:</p> <pre><code>    L.geoJSON(data\n        ).bindPopup(layer =&gt; {\n                console.log(layer.feature.properties.place)\n                return \"you clicked a geojson!\"\n        }).addTo(map);\n</code></pre> <p>When you click a point, the correct <code>value</code> should show up:</p> <p></p> <p>Woo!! Now let\u2019s <code>return</code> this value instead of the generic message:</p> <pre><code>    L.geoJSON(data\n        ).bindPopup(layer =&gt; {\n                console.log(layer.feature.properties.place)\n                return layer.feature.properties.place\n        }).addTo(map);\n</code></pre> <p>Now when you click on the map, the <code>place</code> values shows up!</p>", "tags": ["Lab 4", "Styling GeoJSON", "GeoJSONs"]}, {"location": "labs/week4/1/#utilizing-our-geojsons-color-property", "title": "Utilizing our GeoJSON\u2019s <code>color</code> property", "text": "<p>Before we finish this module, let\u2019s take what we learned one step further and use our <code>color</code> property too.</p> <p>While <code>bindPopUp()</code> was nice and an outside method, changing the color needs to be inside of the <code>L.geoJSON()</code> call. So we have to attach it to an object inside as follows:</p> <pre><code>            L.geoJSON(data, { // (1)!\n                style: layer =&gt; { //(2)!\n                    return {color: layer.feature.properties.color}; //(3)!\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n</code></pre> <ol> <li>Here we add a <code>,</code> to add a new value, and then a <code>{</code> to start our new object</li> <li><code>style</code> is what Leaflet\u2019s <code>L.GeoJSON()</code> needs, so we have to use that</li> <li>We are assigning our <code>layer.feature.properties.color</code> here!</li> </ol> <p>YOU LIE!!! THIS DOES NOT WORK</p> <p>Correct! This code will not work because\u2026 A GeoJSON\u2019s color property can only be set for <code>L.CircleMarkers</code>, <code>lines</code>, or <code>polygons</code> but not regular <code>L.markers</code>.</p>", "tags": ["Lab 4", "Styling GeoJSON", "GeoJSONs"]}, {"location": "labs/week4/1/#converting-our-geojson-to-circlemarkers", "title": "Converting our GeoJSON to <code>CircleMarkers</code>", "text": "<p>Since <code>{style: \"red\"}</code> or any color won\u2019t work for our marker, we need to convert it into a circle marker using the <code>pointToLayer()</code> method! Again, this has to be inside the <code>L.geoJSON()</code> because that is where Leaflet must know what color to make the features.</p> <p>We will use the <code>arrow-function</code> so we can type fewer characters:</p> <pre><code>        L.geoJSON(data, {\n            pointToLayer: (feature, latlng) =&gt; { //(1)!\n                return L.circleMarker(latlng, {color: feature.properties.color}); //(2)!\n            }\n            // ... other code here\n</code></pre> <ol> <li>Here we pass in our <code>feature</code> and <code>latlng</code> into the simplified <code>=&gt; function</code></li> <li>Now we convert it to a <code>L.circleMarker()</code>, with <code>latlng</code> being the first parameter, then          setting <code>color</code> to the <code>feature.properties.color</code>. </li> </ol> <p>The <code>fetch</code>\u2019s final <code>.then</code> should now look like the following:</p> <pre><code>fetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data, {\n                pointToLayer: (feature, latlng) =&gt; { \n                    return L.circleMarker(latlng, {color: feature.properties.color})\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n    })\n</code></pre>", "tags": ["Lab 4", "Styling GeoJSON", "GeoJSONs"]}, {"location": "labs/week4/1/#checkpoint", "title": "Checkpoint", "text": "<p>Our current <code>init.js</code> JavaScript file should look like this:</p> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data, {\n                pointToLayer: (feature, latlng) =&gt; { \n                    return L.circleMarker(latlng, {color: feature.properties.color})\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n    })\n</code></pre> <p>Your final <code>init.js</code> should look like this:</p> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data, {\n                pointToLayer: (feature, latlng) =&gt; { \n                    return L.circleMarker(latlng, {color: feature.properties.color})\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n    })\n</code></pre>", "tags": ["Lab 4", "Styling GeoJSON", "GeoJSONs"]}, {"location": "labs/week4/2/", "title": "\u2705 Final Template Code", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- page contents can go here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data, {\n                pointToLayer: (feature, latlng) =&gt; { \n                    return L.circleMarker(latlng, {color: feature.properties.color})\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n    })\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre>"}, {"location": "labs/week5/", "title": "Overview - Google Forms, Loops, and APIs", "text": "<p>Adding the data from our survey into our mapplication!</p> <p></p> <p>Goals</p> <ul> <li>Create a Google Form with meaningful questions</li> <li>Embed a Google Form into a website using an iFrame</li> <li>Implement a trigger for geocoding \u201clocation\u201d data in Google Sheets</li> <li>Understand what an API</li> <li>Replace our <code>fetch</code> GeoJSON with data from a Google Sheet using <code>papa parse</code></li> <li>Learn to use <code>for-loops</code> in JavaScript</li> </ul>"}, {"location": "labs/week5/#lab-outline", "title": "Lab outline", "text": "<ol> <li>Creating a Google Form</li> <li>Refactoring our JavaScript and CSS</li> <li>Geocoding with Google Sheets</li> <li>Connecting to our Google Sheet with <code>papa parse</code></li> <li>Looping through our data and adding it to our map</li> </ol> <p>Start by creating a <code>week5</code> folder in your lab assignments repo.</p> <p>Get ahead start</p> <p>You can also copy the contents of your Lab Assignment\u2019s <code>week3</code> folder and skip the following setup section.</p>"}, {"location": "labs/week5/#starting-template-code-for-lab-5", "title": "Starting template code for lab #5", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(\"map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data, {\n                pointToLayer: (feature, latlng) =&gt; { \n                    return L.circleMarker(latlng, {color: feature.properties.color})\n                }\n            }).bindPopup(layer =&gt; {\n                return layer.feature.properties.place;\n            }).addTo(map);\n    })\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> map.geojson<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"place\": \"home\",\n        \"color\": \"red\"\n      },\n      \"geometry\": {\n        \"coordinates\": [\n          -118.29687953814576,\n          34.061455838557535\n        ],\n        \"type\": \"Point\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"place\": \"work\",\n        \"color\": \"blue\"\n      },\n      \"geometry\": {\n        \"coordinates\": [\n          -118.43969437158387,\n          34.07271277905194\n        ],\n        \"type\": \"Point\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"place\": \"old home\",\n        \"color\": \"red\"\n      },\n      \"geometry\": {\n        \"coordinates\": [\n          -118.43848986633458,\n          34.05513005654072\n        ],\n        \"type\": \"Point\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"place\": \"metro work\",\n        \"color\": \"blue\"\n      },\n      \"geometry\": {\n        \"coordinates\": [\n          -118.23503623440803,\n          34.055738694402294\n        ],\n        \"type\": \"Point\"\n      }\n    }\n  ]\n}\n</code></pre>"}, {"location": "labs/week5/1/", "title": "Creating a new Google Form", "text": "<p>Navigate to Google Forms and click on \u201cBlank\u201d:</p> <p></p> <p>Give a title to your Google Form by clicking on \u201cUntitled Form\u201d:</p> <p></p> <p>Add a little description about the survey form here. For our example we will be collecting stories about vaccinations during COVID-19.</p>"}, {"location": "labs/week5/1/#adding-a-google-form-question", "title": "Adding a Google Form Question", "text": "<p>Click on the \u201cAdd Question\u201d button to add a question:</p> <p></p> <p>Start typing \u201cLocation\u201d and Google will automatically guess the question type for you. </p> <p></p> <p>You can fill in descriptions below the question to help with answering by clicking on the \u201cmore\u201d triple dots:</p> <p></p> <p>Then going to description:</p> <p></p> <p>And typing out a help description:</p> <p></p> <p>You can check the \u201crequired\u201d mark to make this question necessary to move on.</p> <p></p>"}, {"location": "labs/week5/1/#conditional-questions", "title": "Conditional Questions", "text": "<p>Add a relevant question to help guide the user about the survey, <code>Do you speak English fluently</code>?</p> <p></p> <p>Click on the <code>triple dots ...</code>:</p> <p></p> <p>Select <code>Go to section based on answer</code>:</p> <p></p>"}, {"location": "labs/week5/1/#adding-new-sections", "title": "Adding new sections", "text": "<p>Add a new section:</p> <p></p> <p>Title it Language Details</p> <p></p> <p>Add one question on What language do you primary speak at home? </p> <p>And another on What is your age?</p> <p></p> <p>Go back to the question Do you speak English fluently? and for No:</p> <p></p> <p>Choose Go to Section 2.</p> <p></p> <p>Scroll to the bottom and add a new section:</p> <p></p> <p>Call it Vaccination Story and add a new question:</p> <p></p> <p>Add the question:</p> <p>Would you be comfortable with sharing your story?</p> <ul> <li> <p>Yes</p> </li> <li> <p>No</p> </li> </ul> <p>Make it a required question.</p>"}, {"location": "labs/week5/1/#in-class-exercise-1-open-ended-questions", "title": "\u26bdIn-class Exercise #1 - Open Ended Questions", "text": "<p>Task</p> <ol> <li>Add two open-ended questions to your form</li> </ol> <p>Bonus</p> <p>Feel free to make a branching question to the <code>open-ended questions</code>, so if some one chooses \u201cNo\u201d they submit the form and finish.</p> Answer <p>Some open-ended questions can be the following:</p> <p>How did you make the appointment? </p> <p>How did you get to the location?</p> <p>Make sure they are both <code>Paragraph</code> answer types:</p> <p></p>"}, {"location": "labs/week5/1/#wrapping-the-form-up", "title": "Wrapping the form up", "text": "<p>Go back to <code>Do you speak English fluently</code> and make Yes go to <code>Section 3</code>:</p> <p></p> <p>Your final form should look something like this:</p> <p>https://forms.gle/E8xBqKLJNJyvxGcK8</p>"}, {"location": "labs/week5/1/#sharing-your-form", "title": "Sharing your form", "text": "<p>Click the Send button to share your form</p> <p></p>"}, {"location": "labs/week5/1/#embeding-your-form", "title": "Embeding your form", "text": "<p>Under the <code>Send</code> button menu, click on the Embed tab</p> <p></p> <p>Copy the Embeded HTML by clicking the Copy button:</p> <p></p> <p>Go back to <code>index.html</code> and paste the embedded HTML into the <code>contents</code> div:</p> index.html<pre><code>&lt;div id=\"contents\"&gt;\n    &lt;!-- page contents can go here --&gt;\n    &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n&lt;/div&gt;\n</code></pre>"}, {"location": "labs/week5/1/#accessing-the-responses", "title": "Accessing the Responses", "text": "<p>Click on <code>Responses</code>:</p> <p></p> <p>Click on the Google Spreadsheet button:</p> <p></p> <p>Change the title and click on <code>Create</code> button:</p> <p></p> <p>Open the response Google Sheet by clicking open or the Google Sheets icon:</p> <p></p>"}, {"location": "labs/week5/2/", "title": "JavaScript and CSS Code Refactoring before geoCODING!", "text": "<p>Refactoring code means re-writing code without changing its function. Refactoring is meant to make code understandable and/or reusable for yourself. </p> <p>We are going to refactor so that when we get the Google form data it is simpler to know where to change the code!</p>"}, {"location": "labs/week5/2/#putting-the-fetch-in-a-function", "title": "Putting the <code>Fetch</code> in a function", "text": "<p>Our <code>fetch</code> call sits out in the middle of nowhere, which is the <code>Global</code> space! That is not good because if the <code>fetch</code> doesn\u2019t work then our page won\u2019t load! </p> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nfetch(`map.geojson`)\n    .then(response =&gt; {\n        console.log(response)\n        return response\n    })\n    .then(data =&gt;{\n        // do something with the data\n    })\n</code></pre> <p>Leaving it there will break our code if we leave it there without a file to get, so let\u2019s move that <code>fetch</code> into a function we will call later:</p> <code>fetch</code> in function<code>fetch</code> out of function <pre><code>function loadData(){\n    fetch(`map.geojson`)\n        .then(response =&gt; {\n            console.log(response)\n            return response\n        })\n        .then(data =&gt;{\n            // do something with the data\n        })\n}\n// this is how we use our function\nloadData()\n</code></pre> <pre><code>fetch(`map.geojson`)\n    .then(response =&gt; {\n        console.log(response)\n        return response\n    })\n    .then(data =&gt;{\n        // do something with the data\n    })\n</code></pre>"}, {"location": "labs/week5/2/#changing-the-mapgeojson-into-a-variable", "title": "Changing the <code>map.geojson</code> into a variable", "text": "<p>Let\u2019s also change the <code>map.geojson</code> to a parameter called <code>url</code> that way we can use this function to get different urls! </p> <p>To make our lives easier, we\u2019ll define a new variable called <code>dataUrl</code> and use that as a placeholder for our function too.</p> js/init.js<pre><code>    const dataUrl = \"map.geojson\" //(1)!\n    function loadData(url){ //(2)!\n        fetch(url)\n            .then(response =&gt; {\n                return response\n            })\n            .then(data =&gt;{\n                // do something with the data\n            })\n    }\n    // this is how we use our function\n    loadData(dataUrl) \n    // (3)!\n</code></pre> <ol> <li>The URL variable we can change later when we get the URL we need.</li> <li>The new URL parameter to get data from!</li> <li>Function call that uses the <code>loadData()</code> function and <code>dataUrl</code> parameter!</li> </ol>"}, {"location": "labs/week5/2/#some-css-touch-up", "title": "Some CSS Touch-up!", "text": "<p>Lastly, let\u2019s make our survey look a little nicer, by adding two columns to our secondary grid in the <code>.main</code> CSS selector.</p>"}, {"location": "labs/week5/2/#change-1-adding-columns-lengths", "title": "Change #1 Adding columns lengths", "text": "<p>Because we are using <code>css-grid</code> the way to add columns is by using the <code>grid-template-columns</code> class. We can assign a fixed value, like <code>100px</code> for 100 pixels, but let\u2019s make our site scalable to any screen size by using a <code>fr</code> value for each of <code>1fr 1fr</code>. So our current change should look like:</p> /styles/style.css<pre><code>        .main{\n            grid-area: main_content;\n            grid-template-columns: 1fr 1fr;\n            grid-template-areas: \"main_map\" \"content\";\n            display: grid;\n        }    \n</code></pre> <p><code>fr</code>eal, an side about CSS unit lengths</p> <p>CSS has many units for length, such as <code>pixels</code> or <code>%</code> percentage that can account for how much of a page to cover. However, is a new unit <code>fr</code> stands for fraction and it represents a fraction of the available space in the grid container. What this means it can automatically account for the <code>fraction</code> of a page!!! You can also mix and match units. Learn more here.</p>"}, {"location": "labs/week5/2/#ccs-change-2-putting-content-on-the-same-row", "title": "CCS Change #2: Putting content on the same row", "text": "<p>Now that we created the columns, now we need to assign the columns to the rows! With <code>css-grid</code> the <code>grid-template-areas</code> property is already how we assign <code>rows</code> and <code>columns</code>:</p> <p><code>grid-template-areas: \"main_map\" \"content\";</code></p> <p>Means have one row for <code>main_map</code> and one row for <code>content</code>.</p> <p>To put the areas on the same row we modify both of them to be in the same \u201d \u201c pair, and separated by a space (<code></code>), as follows:</p> <p><code>grid-template-areas: \"main_map content\";</code></p> <p>If you change the order, like  <code>\"content main_map\"</code> then <code>content</code> will show up on the left:</p> <p><code>grid-template-areas: \"content main_map\";</code></p> <p>For now, let\u2019s keep the map on the left.</p> <p>The resulting CSS should look like the <code>CSS</code> after tab:</p> <code>CSS</code> after<code>CSS</code> before <pre><code>    .main{\n        grid-area: main_content;\n        grid-template-columns: 1fr 1fr; /* (1)! */\n        grid-template-areas: \"main_map content\"; /* (2)! */\n        display: grid;\n    }    \n</code></pre> <ol> <li><code>1fr 1fr</code> gives us two equal columns, setting it to <code>2fr 1fr</code> makes the first column fill up twice the space of the second. </li> <li><code>\"main_map content\"</code> are in the same quotations<code>\"</code> now! </li> </ol> <pre><code>    .main{\n        grid-area: main_content;\n        grid-template-areas: \"main_map\" \"content\" ;\n        display: grid;\n    }\n</code></pre>"}, {"location": "labs/week5/2/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<p>Before moving on, make sure your code looks like the following:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- page contents can go here --&gt;\n                &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nconst dataUrl = \"map.geojson\"\n\nfunction loadData(url){\n    fetch(url)\n        .then(response =&gt; {\n            console.log(response)\n            return response\n        })\n        .then(data =&gt;{\n            // do something with the data\n        })\n}\n// we will put this comment to remember to call our function later!\nloadData(dataUrl)\n</code></pre>"}, {"location": "labs/week5/3/", "title": "Geocoding with Google Sheets and Google Apps Script", "text": ""}, {"location": "labs/week5/3/#revisiting-functions", "title": "Revisiting Functions", "text": "<p>Open up your Google Sheet from part 1.</p> <p>Go to column for <code>Location</code> and remember what column it is, for me it is <code>C</code>:</p> <p></p> <p>Next, add two columns, one for <code>lat</code> and another for <code>lng</code>:</p> <p></p> <p>Now click on Extensions</p> <p></p> <p>Now click on Apps Script</p> <p></p> <p>When you first launch, you will see a blank myFunction() select it and get ready to paste over it:</p> <p></p> <p>Copy and paste the following code into the entire script:</p> Google's Script Editor<pre><code>function myFunction() {\n  let sheet = SpreadsheetApp.getActiveSheet();\n\n  let range = sheet.getDataRange();\n  let cells = range.getValues();\n\n  let latitudes = [['lat']]; //(1)!\n  let longitudes = [['lng']]; //(2)!\n\n  for (let i = 0; i &lt; cells.length; i++) {\n    // change cells[i][2] if your address is not in column 'C', for example cells[i][1] for column 'B' or cells[i][3] for column D\n     addressColumn = cells[i][2] //(3)!\n     let lat = lng = 0;\n    if (i &gt; 0) {\n      if (addressColumn){\n    let address = addressColumn;\n    console.log(address)\n\n    if(address){\n      let geocoder = Maps.newGeocoder().geocode(address);\n      let res = geocoder.results[0];\n        if (res) {\n          lat = res.geometry.location.lat;\n          lng = res.geometry.location.lng;\n        }\n      }\n    }\n    latitudes.push([lat]);\n    longitudes.push([lng]);\n    }\n  }\n  sheet.getRange('D1') // this is your latitude column //(4)!\n  .offset(0, 0, latitudes.length)\n  .setValues(latitudes);\n  sheet.getRange('E1') // this is your longitude column //(5)!\n  .offset(0, 0, longitudes.length)\n  .setValues(longitudes);\n  Utilities.sleep(5000)\n}\n</code></pre> <ol> <li>This defines the column as latitude to be <code>lat</code></li> <li>This defines the column as longitude to be <code>lng</code></li> <li><code>cells[i][2]</code> the <code>2</code> is <code>number</code> that your address column is in minus 1!! You have to subtract 1 because JavaScript starts counting at <code>0</code>!!! For example, column A is <code>0</code>!</li> <li>Make sure this column letter matches your <code>**latitude**</code> column!!</li> <li>Make sure this column letter matches your <code>**longitude**</code> column!!</li> </ol> <p>JavaScript arrays start at 0</p> <p>Most programming have two types of indexing, <code>0</code> indexed or <code>1</code> indexed, which means the number that they start counting lists from. JavaScript is <code>0</code> indexed, meaning a list with 4 things starts from <code>0</code> and ends at <code>3</code>, like this: <code>[0,1,2,3]</code>. </p> <p>This is important when we call items from a list and want to get the right item from it!! For example, we have to get the fourth item in the example array like this, <code>let theFourthItem = myArray[3]</code>.</p> <p>Click on the Save Icon  to save your script:</p> <p></p> <p>Click on the Run button to test the script:</p> <p></p> <p>You should get a prompt asking for <code>Authorization</code>, click Review permissions:</p> <p></p> <p>Select your Google Account to continue:</p> <p></p> <p>Click on Advanced:</p> <p></p> <p>Click on Go to Untitled Project (unsafe)</p> <p></p> <p>Click on Allow</p> <p></p> <p>Do you trust yourself? </p> <p>Essentially, anyone can write Google Scripts, so Google is making sure that the script is associated with your account before giving it access to this particular spreadsheet.</p> <p>Click on Save:</p> <p></p> <p>If it ran successfully then you should now see <code>latitude</code> and <code>longitude</code> filled in the Google Sheet!</p> <p></p>"}, {"location": "labs/week5/3/#geocoding-on-each-submission-with-a-trigger", "title": "Geocoding on each submission with a trigger", "text": "<p>Go back to the Google Scripts and click on the triggers icon </p> <p></p> <p>Click on  Add Trigger:</p> <p></p> <p>Click on Select event type:</p> <p></p> <p>Change to On Form Submit so that everytime the the form gets submitted a new record gets latitude/longitude added too!</p> <p></p> <p>Click Save:</p> <p></p> <p>A pop-up should appear, but if you have a pop-up blocker like on FireFox, then you may have to click on <code>Options</code>:</p> <p></p> <p>Then Allow this particular popup to appear.</p> <p></p> <p>Authorization again?</p> <p>This is the same authorization as before, but it is for the <code>Trigger</code> not the application!</p> <p>Select your Google Account to continue:</p> <p></p> <p>Click on Advanced:</p> <p></p> <p>Click on Go to Untitled Project (unsafe)</p> <p></p> <p>Click on Allow</p> <p></p> <p>Click on Save:</p> <p></p> <p>Congratulations, now each time a form gets submitted you will be able to map the locations:</p> <p></p>"}, {"location": "labs/week5/3/#in-class-exercise-2-test-your-form", "title": "\u26bdIn-class Exercise #2 - Test your form!", "text": "<p>Tasks</p> <ol> <li>Add 2-3 locations to your Google Form and see if the new locations work. </li> <li>Check to see if the locations are accurate or not!</li> <li>What type of locations do not show up?</li> </ol> Answer <p>Locations that do not show up are those that are blank or are not able to be located by the Google Geocoder.</p>"}, {"location": "labs/week5/3/#publishing-your-survey", "title": "Publishing your survey", "text": "<p>Now that our data is able to be geocoded, the final step is to publish the spreadsheet so we can  can bring it into our HTML file through JavaScript next week.</p> <p>Go to File:</p> <p></p> <p>Click on Sharing:</p> <p></p> <p>Click on Publish to web:</p> <p></p> <p>Click on Webpage:</p> <p></p> <p>Choose CSV:</p> <p></p> <p>Click Publish:</p> <p></p> <p>If this warning pops-up click on OK:</p> <p></p> <p>Copy the URL in the address bar:</p> <p></p> <p>Paste it into your dataUrl variable like so:</p> js/init.js<pre><code>const dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n</code></pre> <p>Uncomment the <code>loadData(url)</code> function to test if it\u2019s working:</p> <pre><code>// we will put this comment to remember to call our function later!\nloadData(dataUrl)\n</code></pre> <p>Since there is only a <code>console.log()</code> in the <code>loadData()</code> function, you have to open the browser\u2019s console to check.</p>"}, {"location": "labs/week5/3/#checkpoint", "title": "\ud83c\udfc1 Checkpoint", "text": "<p>Your <code>init.js</code> should look like the following:</p> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\nfunction loadData(url){\n    fetch(url)\n        .then(response =&gt; {\n            console.log(response)\n            return response\n        })\n        .then(data =&gt;{\n            // do something with the data\n        })\n}\n// we will put this comment to remember to call our function later!\nloadData(dataUrl)\n</code></pre> <p>If you see something in the console, then you move onto looping through the data and adding markers to the map!</p>"}, {"location": "labs/week5/4/", "title": "Connecting to APIs and Loops", "text": "<p>Before we talk about loops, we need to have some data to loop over, so let\u2019s get our data from Google Sheets using their Application Programming Interface (API).</p>"}, {"location": "labs/week5/4/#whats-an-api", "title": "What\u2019s an API?", "text": "<p>An API can be really thought of as an external appliance we are borrowing. In that sense, we are just plugging into it so we can access the data it provides.</p> <p>Basically, an API allows different websites, computer devices, and data talk to each other.</p> <p></p>"}, {"location": "labs/week5/4/#boo-googles-api-depreciation", "title": "Boo!!! Google\u2019s API Depreciation!", "text": "<p>Unforunately, in 2021 Google Depreciated the API for connecting to their files directly.</p> <p>So we will have to do a work around, which means we won\u2019t be using the built-in JavaScript <code>fetch API</code>.</p> <p>Instead we will use an open-source library called\u2026</p>"}, {"location": "labs/week5/4/#sweet-beard-papa-parse", "title": "Sweet, (beard) <code>papa-parse</code>!", "text": "<p><code>papa parse</code></p>"}, {"location": "labs/week5/4/#adding-papa-parse-to-our-html", "title": "Adding <code>papa parse</code> to our html", "text": "<p>We want to bring the library of sweet pastries into our site, so let\u2019s bring in <code>papa parse</code> directly online like we did with Leaflet.js.</p> <p>Copy the following code and paste it into your <code>&lt;head&gt;</code> tag in your <code>index.html</code> file:</p> <pre><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Your <code>index.html</code> should look like this:</p> <pre><code>        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n</code></pre> <p>With <code>papa parse</code> added to our site, we can now use it to connect to our Google Sheet.</p>"}, {"location": "labs/week5/4/#connecting-to-our-google-sheet-with-papa-parse", "title": "Connecting to our Google Sheet with <code>papa parse</code>", "text": "<p>Go into our <code>init.js</code> and change out the <code>fetch</code> in the <code>loadData()</code> function to the following:</p> <pre><code>function loadData(url){\n    Papa.parse(dataUrl, {\n        header: true,\n        download: true,\n        complete: function(results) {\n            console.log(results)\n        }\n    })\n}\n</code></pre> <p>Let\u2019s open up our console and see if our data is loaded!</p> <p>If you see this:</p> <p></p> <p>Then you are in good shape for the next part of the lab!</p>"}, {"location": "labs/week5/4/#warm-up-arrow-functions", "title": "\u26bd Warm-up: Arrow Functions!", "text": "<p>Can you convert the function?</p> <p>Arrow functions help to cut down our code and make it easier to read. Are you able to convert the function below to an <code>arrow =&gt;</code> function?</p> <pre><code>function loadData(url){\n    Papa.parse(dataUrl, {\n        header: true,\n        download: true,\n        complete: function(results) {\n            console.log(results)\n        }\n    })\n}\n</code></pre> Answer <pre><code>function loadData(url){\n    Papa.parse(dataUrl, {\n        header: true,\n        download: true,\n        complete: results =&gt; console.log(results)\n    })\n}\n</code></pre> <p>Since our data is showing up in our console, we can now start our loopy lab!</p>"}, {"location": "labs/week5/4/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<p>Check to see if your code is like the following before moving on:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"js/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- Be sure to use your own survey here!!!!!!! --&gt;\n                &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform?embedded=true\" width=\"100%\" height=\"100%\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\nfunction loadData(url){\n    Papa.parse(dataUrl, {\n        header: true,\n        download: true,\n        complete: results =&gt; console.log(results)\n    })\n}\n// this is our function call to get the data\nloadData(dataUrl)\n</code></pre>"}, {"location": "labs/week5/5/", "title": "Time <code>for-loops</code>, but are they <code>FOR</code>eign?", "text": ""}, {"location": "labs/week5/5/#warm-up-new-keywords", "title": "\u26bd Warm-up: New Keywords?", "text": "<p>In part 3\u2019s Google Script Editor, we copy and pasted a large chunk of code without going into much detail about it. Let\u2019s now take sometime to analyze it.</p> Google's Script Editor<pre><code>function myFunction() {\n    let sheet = SpreadsheetApp.getActiveSheet();\n\n    let range = sheet.getDataRange();\n    let cells = range.getValues();\n\n    let latitudes = [['lat']]; //(1)!\n    let longitudes = [['lng']]; //(2)!\n\n    for (let i = 0; i &lt; cells.length; i++) {\n        // change cells[i][2] if your address is not in column 'C', for example cells[i][1] for column 'B' or cells[i][3] for column D\n\n        addressColumn = cells[i][2] //(3)!\n        let lat = lng = 0;\n\n        if (i &gt; 0) {\n            if (addressColumn){\n                let address = addressColumn;\n                console.log(address)\n                if(address){\n                    let geocoder = Maps.newGeocoder().geocode(address);\n                    let res = geocoder.results[0];\n                        if(res){\n                            lat = res.geometry.location.lat;\n                            lng = res.geometry.location.lng;\n                            }\n                        }\n                    }\n                latitudes.push([lat]);\n                longitudes.push([lng]);\n            }\n    }\n    sheet.getRange('D1') // this is your latitude column //(4)!\n    .offset(0, 0, latitudes.length)\n    .setValues(latitudes);\n    sheet.getRange('E1') // this is your longitude column //(5)!\n    .offset(0, 0, longitudes.length)\n    .setValues(longitudes);\n    Utilities.sleep(5000)\n}\n</code></pre> <p>Questions</p> <ol> <li>What language is the Google Script Editor using? HTML? CSS? JavaScript?</li> <li>Were there any new built-in JavaScript methods?</li> <li>What new keywords (if any) did you see?</li> <li>If there were new keywords, do you think they do?</li> </ol> Answers <ol> <li>It is written in JavaScript</li> <li>There were quite a few, like <code>cells.length</code> and <code>Utilities.sleep(5000)</code> but these are all a part of Google Apps script. A built-in JavaScript method that is important to recognize was <code>latitudes.push([lat]);</code> and <code>longitudes.push([lng]);</code> which allows us to add content to a list to variables we created called <code>latitude</code> and <code>longitude</code>! Very useful and we will use this again soon!</li> <li>Two new keywords were: <code>if</code> and <code>for</code></li> <li>a. <code>if</code> checks for a conditional statement    b. <code>for</code> allows you to loop through a list of things</li> </ol> Google's Script Editor<pre><code>function myFunction() {\n    let sheet = SpreadsheetApp.getActiveSheet();\n\n    let range = sheet.getDataRange();\n    let cells = range.getValues();\n\n    let latitudes = [['lat']]; //(1)!\n    let longitudes = [['lng']]; //(2)!\n\n    for (let i = 0; i &lt; cells.length; i++) {\n        // change cells[i][2] if your address is not in column 'C', for example cells[i][1] for column 'B' or cells[i][3] for column D\n\n        addressColumn = cells[i][2] //(3)!\n        let lat = lng = 0;\n\n        if (i &gt; 0) {\n            if (addressColumn){\n                let address = addressColumn;\n                console.log(address)\n                if(address){\n                    let geocoder = Maps.newGeocoder().geocode(address);\n                    let res = geocoder.results[0];\n                        if(res){\n                            lat = res.geometry.location.lat;\n                            lng = res.geometry.location.lng;\n                            }\n                        }\n                    }\n                latitudes.push([lat]);\n                longitudes.push([lng]);\n            }\n    }\n    sheet.getRange('D1') // this is your latitude column //(4)!\n    .offset(0, 0, latitudes.length)\n    .setValues(latitudes);\n    sheet.getRange('E1') // this is your longitude column //(5)!\n    .offset(0, 0, longitudes.length)\n    .setValues(longitudes);\n    Utilities.sleep(5000)\n}\n</code></pre> <p>With this warm-up complete, let\u2019s start today\u2019s focus on loops. But first off\u2026</p>"}, {"location": "labs/week5/5/#what-the-f-or-loop", "title": "What the F-or loop?!", "text": "<p>A <code>for-loop</code> means is to <code>go through the items and do something each time</code>. Loops are one of the most critical tool for programmers for automating tasks.</p>"}, {"location": "labs/week5/5/#detailed-analyis-of-a-for-loop-for-you", "title": "Detailed analyis of a <code>for-loop</code> for you", "text": "<p>Let\u2019s look at the Google Script\u2019s App section with the <code>for-loop</code> in more detail:</p> <pre><code>  for (let i = 0 ; i &lt; cells.length; i++) { \n     addressColumn = cells[i][2] \n     let lat = lng = 0;\n    if (i &gt; 0) {\n      if (addressColumn){\n    let address = addressColumn;\n    console.log(address)\n</code></pre> <p>We will be looking at just the first line in that except.</p> <p>Note!!</p> <p>The following <code>for-loop</code> is visualized for demonstration purposes only, please keep the beginning your loops to one single line for easier readability. Start a line break after the first <code>{</code>.</p> <p>For example:</p> <pre><code>for (let i = 0; i &lt; cells.length; i++) {\n    // do your loop here\n}\n</code></pre> Example for-loop for demo ONLY!<pre><code>  for ( //(1)!\n        let i = 0; //(2)!\n        i &lt; cells.length; //(3)!\n        i++){ //(4)!\n          // loop through something \n        } //(5)!\n</code></pre> <ol> <li><code>for</code> is a keyword for starting the <code>for loop</code></li> <li><code>(let i = 0;</code> is a placeholder variable for counting, <code>i</code> can be anything, but it has be consistent in the <code>for loop</code>.</li> <li><code>i &lt; cells.length</code> basically says, \u201crun this loop as long as it is less than the total number of cells.\u201d</li> <li><code>i++</code> means keep adding while the loop is able to run</li> <li><code>{}</code> and finally the brackets are the code block to execute while the loop runs.</li> </ol> <p>This is the basic example of a <code>for</code> loop. </p> <p>When the loop ends, we say that the loop is broken out of: </p>"}, {"location": "labs/week5/5/#iterable-items", "title": "Iterable Items", "text": "<p>Loops can ONLY occur over iterable items (stuff that you can count or go through), such as numbers, lists, objects, and arrays. </p> <p>In the technical schematic diagram above, notice that the items is a JavaScript array. When the array hits the last item, the loop stops. </p>"}, {"location": "labs/week5/5/#in-class-exercise-3-our-first-loop", "title": "\u26bdIn-class Exercise #3 - Our First Loop", "text": "Sample array for exercise<pre><code>const sampleDataArray = [[37,-122],[32,-118],[39,-119],[36,-120]]\n</code></pre> <p>Tasks</p> <ol> <li>Using the array above, make a <code>for-loop</code> that creates markers!  </li> </ol> Answer <p><pre><code>    const sampleDataArray = [[37,-122],[32,-118],[39,-119],[36,-120]]\n\n    for (let i = 0; i &lt; sampleDataArray.length; i++) { //(1)!\n        console.log(sampleDataArray[i]) //(2)!\n        addMarker(sampleDataArray[i][0],sampleDataArray[i][1],`Marker ${i}`,`This is marker ${i}`) //(3)!\n    }\n</code></pre> 1.      This starts the loop by saying, <code>for the total length in our sampleDataArray</code> do something 2.      The <code>console.log()</code> checks our loop results. Warning, doing this for large datasets will slow down your website, so use this mainly for debugging purposes. 3.      We call the <code>addMarker()</code> function with the <code>sampleDataArray[i]</code> being the number that the loop is currently on. We use <code>sampleDataArray[i][0]</code> to get <code>latitude</code> and <code>sampleDataArray[i][1]</code> for longitude.</p>"}, {"location": "labs/week5/5/#forof-loop", "title": "<code>For...of</code> loop", "text": "<p>The for of loop is identical in function to the <code>for-loop</code> except that it does not have an automatically <code>iterating</code> variable. Since it has less variables, I think it is much easier to understand than the basic <code>for</code> loop.</p> <p>Here is the <code>for-of</code> loop in action:</p> <pre><code>const longString = 'hellooooooooooooo'\nconst array1 = ['a', 'b', 'c'];\n\n// this loops through an array\nfor (const stuff of array1){\n    console.log(stuff)\n}\n\n// this loops through a string!\nfor (const letter in longstring){\n    console.log(letter)\n}\n</code></pre> <p>You can use any variable in place of <code>letter</code> or <code>stuff</code> and it is quite clear what is being looped over inside the scope brackets.</p>"}, {"location": "labs/week5/5/#in-class-exercise-4-for-of-loop", "title": "\u26bdIn-class Exercise #4 - <code>For-of</code> Loop", "text": "Sample array for exercise<pre><code>const sampleDataArray = [[37,-122],[32,-118],[39,-119],[36,-120]]\n</code></pre> <p>Tasks</p> <ol> <li>Re-write our first <code>for-loop</code>, with a<code>for-of</code> loop that also creates markers!  </li> </ol> Answer <pre><code>    const sampleDataArray = [[37,-122],[32,-118],[39,-119],[36,-120]]\n\n    for (const item of sampleDataArray){\n        addMarker(item[0],item[1],`Marker ${item}`,`This is marker ${item}`)\n    }\n</code></pre> <p>Notice in the answer, there is no <code>automatic</code> increasing value, so we need to pass the <code>item</code> in as the value for the pop-up message! </p> <p>I think FOR my ease of understanding the code, not having that auto-increment (the <code>i++</code>) is a worthwhile trade-off!!!</p>"}, {"location": "labs/week5/5/#for-each-loop", "title": "<code>For Each</code> loop", "text": "<p>Out of <code>each</code> of the loops, the <code>for each</code> loop is the final and most important loop we will cover today. It is similar to the loops above, but there are two key differences: 1. <code>.forEach</code> requires a function 2. <code>.forEach</code>is an <code>array</code> method or built-in function for arrays.</p> <p>Those differences are important because when this loop executes a function for each array element. Also, since this <code>loop</code> is an array method, it doesn\u2019t start with a keyword!!</p> <p>Instead <code>.forEach()</code> follows the array that you want to call the loop on.</p> <p>Here is an example of the <code>forEach</code> loop:</p> <pre><code>let myArray = ['hello','this','is','an','array']\n\nmyArray.forEach(justChecking);\n\nfunction justChecking(data){\n    console.log(data)\n}\n</code></pre> <p>The <code>.forEach</code> method might be the easiest loop to understand because of the grammar implications:</p> <p><code>For Each</code>-&gt;<code>item in the array</code>-&gt; <code>do this function!</code></p> <p>Additionally, the <code>.forEach()</code> loop is important because it streamlines the process of applying a function to a list of items. This is a common scenario with arrays (lists) in the first place, since no one wants to program things by manually applying a function to hundres of items!!</p> <p>One draw back of using <code>.forEach()</code> in this way is that you can\u2019t isolate the data paramaters in a function.</p> <p>For example, this code will not work!</p> <p>forEach broken</p> <pre><code>let myArray = [{'message':'hello','lat':37,'lng':-122},{'message':'this','lat':35,'lng':-119}]\n\nmyArray.forEach(justChecking(lat,lng));\n\nfunction justChecking(lat,lng){\n    console.log(lat,lng)\n}\n</code></pre> <p>You would have to write the code this way:</p> <p>forEach fixed\u201d hl_lines=\u201d3 5-6</p> <pre><code>let myArray = [{'message':'hello','lat':37,'lng':-122},{'message':'this','lat':35,'lng':-119}]\n\nmyArray.forEach(justChecking);\n\nfunction justChecking(data){\n    console.log(data.lat,data.lng)\n}\n</code></pre> <p>One way to be able to specify data values with <code>.forEach()</code> is to use the arrow functions!!</p>"}, {"location": "labs/week5/5/#foreach-and-arrow-functions", "title": "<code>.forEach()</code> and arrow (=&gt;) functions", "text": "<p>Since a <code>.forEach()</code> loop requires a function, if the function is not needed anywhere else, it is recommended to simplify the loop with an arrow/anonymous function, which we covered last week.</p> <p>Of course, always stick with what you think makes the most sense to you as a coder!</p> <p>Remember, an anonymous function is a function without a name and uses the <code>=&gt;</code> (arrow) syntax.</p> <p>Here is how the same <code>forEach()</code> loop looks like with an arrow function:</p> <pre><code>let myArray = ['hello','this','is','an','array']\nmyArray.forEach(data=&gt;{justChecking(data)});\n\nfunction justChecking(data){\n    console.log(data)\n}\n</code></pre> <p>Adding the arrow function allows you to use multiple parameters in the function call to treat the <code>data</code> from <code>myArray</code> as if it were an object, like so: <code>myArray.lat</code>, or <code>myArray.lng</code></p> <pre><code>let myArray = ['hello','this','is','an','array']\nmyArray.forEach(data=&gt;{addSimpleMarker(data.lat,data.lng)});\n\nfunction addSimpleMarker(lat,lng){\n    L.marker([lat,lng]).addTo(map)\n}\n</code></pre>"}, {"location": "labs/week5/5/#class-exercise-5-your-first-foreach-loop", "title": "Class Exercise #5 - Your first <code>forEach</code> loop", "text": "Sample array of objects for exercise<pre><code>let simpleArray = ['hello','this','is','an','array']\nlet arrayOfObjects = [{'name':'hello','lat':37,'lng':-122},{'name':'world','lat':35,'lng':-119},{'name':'aa191','lat':36,'lng':-120}]\n</code></pre> <p>Tasks</p> <ol> <li>Create an array of objects 3 or more items</li> <li>Use a <code>.forEach()</code> loop on one of the arrays above.</li> <li><code>console.log()</code> the result.</li> <li>Use a more complicated array of objects and use the <code>forEach</code> loop to create markers!  </li> </ol> Answer <pre><code>    let simpleArray = ['hello','this','is','an','array']\n\n    simpleArray.forEach(checking)\n\n    function checking(aParameter){\n        console.log(aParameter)\n    }\n\n    let arrayOfObjects = [{'name':'hello','lat':37,'lng':-122},{'name':'world','lat':35,'lng':-119},{'name':'aa191','lat':36,'lng':-120}]\n\n    for (const item of sampleDataArray){\n        addMarker(item[0],item[1],`Marker ${item}`,`This is marker ${item}`)\n    }\n</code></pre>"}, {"location": "labs/week5/5/#dot-notation-vs-bracket-notation", "title": "<code>.</code> (dot) notation vs. <code>[]</code> (bracket) notation", "text": "<p>Remember to access an object you typically would use the <code>.nameOfField</code> (dot) notation like so:</p> <p><code>arrayOfObjects.forEach(data =&gt; {data.name})</code></p> <p>But if there are spaces in the field name, you will have to use the <code>['name of field']</code> (bracket) notation.</p> <p>In the above example we can call <code>arrayOfObjects.forEach(data =&gt; {data['name']})</code> to access all of the name values in our data.</p>"}, {"location": "labs/week5/5/#class-exercise-6-practing-loops-with-our-data", "title": "Class Exercise #6 - Practing Loops with our data", "text": "<p>Tasks</p> <ol> <li>Access your array of objects from the Google Survey</li> <li>Loop through an array of objects with .forEach</li> <li>Use the <code>add marker</code> function to add your array to the map</li> </ol> Answer <pre><code>let myArray = [{'name':'hello','lat':37,'lng':-122},{'name':'this','lat':35,'lng':-119},{'name':'is','lat':36,'lng':-120}]\nmyArray.forEach(addMarker);\n\n\nfunction loadData(url){\n    Papa.parse(dataUrl, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data.lat,data.lng,data['OpenEnded'],data['Is your English your first language?'])\n    })\n}\n</code></pre>"}, {"location": "labs/week5/5/#turning-our-survey-data-into-markers", "title": "Turning our survey data into markers", "text": "<p>There are numerous approaches that one can take using any of the loop methods described above, we will just focus on the <code>.forEach()</code> and <code>=&gt;</code> implmenetion.</p>"}, {"location": "labs/week5/5/#create-a-function-to-processdata", "title": "Create a function to <code>processData()</code>", "text": "<p>This function will loop through each of the data and apply various functions to it, such as adding markers or buttons. A function like this is useful as a <code>helper</code> function because it can separate what we want the website to do from the immediate data processing.</p> <pre><code>function processData(results){\n    console.log(results) //for debugging: this can help us see if the results are what we want\n    results.data.forEach(data =&gt; {\n        console.log(data) // for debugging: are we seeing each data correctly?\n    })\n}\n</code></pre>"}, {"location": "labs/week5/5/#call-the-addmarker-function-in-a-loop", "title": "Call the <code>addMarker()</code> function in a loop", "text": "<p>Remember! <code>console.log()</code> is your life boat! </p> <p>Always check the console to see if our data and code is function properly!</p> <p>Click into the array to see if our data looks right:</p> <p></p> <p>If the console logs are good, then we can add the call to the <code>addMarker()</code> function in the <code>.forEach()</code> loop like so:</p> <pre><code>function processData(results){\n    //console.log(results) //for debugging: this can help us see if the results are what we want\n    results.data.forEach(data =&gt; {\n        console.log(data) // for debugging: are we seeing each data correctly?\n        // the console log can make sure we have the right field names selected!\n        addMarker(data.lat,data.lng,data['What zip code do you live in?'],data['Have you been vaccinated?'])\n    })\n}\n</code></pre> <p>And viola! Your map should now be populated with the points on the survey!</p>"}, {"location": "labs/week5/5/#final-check-point", "title": "\ud83c\udfc1Final check point", "text": "<p>Test it out your map by filling out the survey:</p> <p></p> <p>Then you should magically see a point appear!</p> <p></p> <p>Now you are ready for the lab assignment!</p>"}, {"location": "labs/week5/6/", "title": "\u2705 Final Template Code", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- Be sure to use your own survey here!!!!!!! --&gt;\n                &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform?embedded=true\" width=\"100%\" height=\"100%\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data.lat,data.lng,data['What zip code do you live in?'],data['Have you been vaccinated?'])\n    })\n}\n\nloadData(dataUrl)\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> js/papaparse.min.js<pre><code>/* @license\nPapa Parse\nv5.3.2\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){\"function\"==typeof define&amp;&amp;define.amd?define([],t):\"object\"==typeof module&amp;&amp;\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){\"use strict\";var f=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==f?f:{};var n=!f.document&amp;&amp;!!f.postMessage,o=n&amp;&amp;/blob:/i.test((f.location||{}).protocol),a={},h=0,b={parse:function(e,t){var i=(t=t||{}).dynamicTyping||!1;M(i)&amp;&amp;(t.dynamicTypingFunction=i,i={});if(t.dynamicTyping=i,t.transform=!!M(t.transform)&amp;&amp;t.transform,t.worker&amp;&amp;b.WORKERS_SUPPORTED){var r=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(i=f.URL||f.webkitURL||null,r=s.toString(),b.BLOB_URL||(b.BLOB_URL=i.createObjectURL(new Blob([\"(\",r,\")();\"],{type:\"text/javascript\"})))),t=new f.Worker(e);var i,r;return t.onmessage=_,t.id=h++,a[t.id]=t}();return r.userStep=t.step,r.userChunk=t.chunk,r.userComplete=t.complete,r.userError=t.error,t.step=M(t.step),t.chunk=M(t.chunk),t.complete=M(t.complete),t.error=M(t.error),delete t.worker,void r.postMessage({input:e,config:t,workerId:r.id})}var n=null;b.NODE_STREAM_INPUT,\"string\"==typeof e?n=t.download?new l(t):new p(t):!0===e.readable&amp;&amp;M(e.read)&amp;&amp;M(e.on)?n=new g(t):(f.File&amp;&amp;e instanceof File||e instanceof Object)&amp;&amp;(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,i=!1,r=null,o=!1;!function(){if(\"object\"!=typeof t)return;\"string\"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);(\"boolean\"==typeof t.quotes||\"function\"==typeof t.quotes||Array.isArray(t.quotes))&amp;&amp;(n=t.quotes);\"boolean\"!=typeof t.skipEmptyLines&amp;&amp;\"string\"!=typeof t.skipEmptyLines||(i=t.skipEmptyLines);\"string\"==typeof t.newline&amp;&amp;(y=t.newline);\"string\"==typeof t.quoteChar&amp;&amp;(s=t.quoteChar);\"boolean\"==typeof t.header&amp;&amp;(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");r=t.columns}void 0!==t.escapeChar&amp;&amp;(a=t.escapeChar+s);(\"boolean\"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&amp;&amp;(o=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\\-@\\t\\r].*$/)}();var h=new RegExp(j(s),\"g\");\"string\"==typeof e&amp;&amp;(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,i);if(\"object\"==typeof e[0])return u(r||Object.keys(e[0]),e,i)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&amp;&amp;(e.data=JSON.parse(e.data)),Array.isArray(e.data)&amp;&amp;(e.fields||(e.fields=e.meta&amp;&amp;e.meta.fields||r),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],i);throw new Error(\"Unable to serialize unrecognized input\");function u(e,t,i){var r=\"\";\"string\"==typeof e&amp;&amp;(e=JSON.parse(e)),\"string\"==typeof t&amp;&amp;(t=JSON.parse(t));var n=Array.isArray(e)&amp;&amp;0&lt;e.length,s=!Array.isArray(t[0]);if(n&amp;&amp;_){for(var a=0;a&lt;e.length;a++)0&lt;a&amp;&amp;(r+=m),r+=v(e[a],a);0&lt;t.length&amp;&amp;(r+=y)}for(var o=0;o&lt;t.length;o++){var h=n?e.length:t[o].length,u=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(i&amp;&amp;!n&amp;&amp;(u=\"greedy\"===i?\"\"===t[o].join(\"\").trim():1===t[o].length&amp;&amp;0===t[o][0].length),\"greedy\"===i&amp;&amp;n){for(var d=[],l=0;l&lt;h;l++){var c=s?e[l]:l;d.push(t[o][c])}u=\"\"===d.join(\"\").trim()}if(!u){for(var p=0;p&lt;h;p++){0&lt;p&amp;&amp;!f&amp;&amp;(r+=m);var g=n&amp;&amp;s?e[p]:p;r+=v(t[o][g],p)}o&lt;t.length-1&amp;&amp;(!i||0&lt;h&amp;&amp;!f)&amp;&amp;(r+=y)}}return r}function v(e,t){if(null==e)return\"\";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var i=!1;o&amp;&amp;\"string\"==typeof e&amp;&amp;o.test(e)&amp;&amp;(e=\"'\"+e,i=!0);var r=e.toString().replace(h,a);return(i=i||!0===n||\"function\"==typeof n&amp;&amp;n(e,t)||Array.isArray(n)&amp;&amp;n[t]||function(e,t){for(var i=0;i&lt;t.length;i++)if(-1&lt;e.indexOf(t[i]))return!0;return!1}(r,b.BAD_DELIMITERS)||-1&lt;r.indexOf(m)||\" \"===r.charAt(0)||\" \"===r.charAt(r.length-1))?s+r+s:r}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK=\"\\ufeff\",b.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&amp;&amp;!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=\",\",b.Parser=E,b.ParserHandle=i,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var i=o.config||{},h=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&amp;&amp;\"file\"===d(this).attr(\"type\").toLowerCase()&amp;&amp;f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t&lt;this.files.length;t++)h.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},i)})}),e(),this;function e(){if(0!==h.length){var e,t,i,r,n=h[0];if(M(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,i=n.inputElem,r=s.reason,void(M(o.error)&amp;&amp;o.error({name:e},t,i,r));if(\"skip\"===s.action)return void u();\"object\"==typeof s.config&amp;&amp;(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void u()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){M(a)&amp;&amp;a(e,n.file,n.inputElem),u()},b.parse(n.file,n.instanceConfig)}else M(o.complete)&amp;&amp;o.complete()}function u(){h.splice(0,1),e()}}}function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=w(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new i(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&amp;&amp;M(this._config.beforeFirstChunk)){var i=this._config.beforeFirstChunk(e);void 0!==i&amp;&amp;(e=i)}this.isFirstChunk=!1,this._halted=!1;var r=this._partialLine+e;this._partialLine=\"\";var n=this._handle.parse(r,this._baseIndex,!this._finished);if(!this._handle.paused()&amp;&amp;!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=r.substring(s-this._baseIndex),this._baseIndex=s),n&amp;&amp;n.data&amp;&amp;(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&amp;&amp;this._rowCount&gt;=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(M(this._config.chunk)&amp;&amp;!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!M(this._config.complete)||n&amp;&amp;n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&amp;&amp;n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){M(this._config.error)?this._config.error(e):o&amp;&amp;this._config.error&amp;&amp;f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var r;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),u.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&amp;&amp;(r.withCredentials=this._config.withCredentials),n||(r.onload=v(this._chunkLoaded,this),r.onerror=v(this._chunkError,this)),r.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)r.setRequestHeader(t,e[t])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;r.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+i)}try{r.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&amp;&amp;0===r.status&amp;&amp;this._chunkError()}},this._chunkLoaded=function(){4===r.readyState&amp;&amp;(r.status&lt;200||400&lt;=r.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:r.responseText.length,this._finished=!this._config.chunkSize||this._start&gt;=function(e){var t=e.getResponseHeader(\"Content-Range\");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf(\"/\")+1))}(r),this.parseChunk(r.responseText)))},this._chunkError=function(e){var t=r.statusText||e;this._sendError(new Error(t))}}function c(e){var r,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),u.call(this,e);var s=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((r=new FileReader).onload=v(this._chunkLoaded,this),r.onerror=v(this._chunkError,this)):r=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&amp;&amp;!(this._rowCount&lt;this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var i=r.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:i}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start&gt;=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(r.error)}}function p(e){var i;u.call(this,e=e||{}),this.stream=function(e){return i=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=i.substring(0,t),i=i.substring(t)):(e=i,i=\"\"),this._finished=!i,this.parseChunk(e)}}}function g(e){u.call(this,e=e||{});var t=[],i=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){r&amp;&amp;1===t.length&amp;&amp;(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=v(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),i&amp;&amp;(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),r=!0,this._streamData(\"\")},this),this._streamCleanUp=v(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function i(m){var a,o,h,r=Math.pow(2,53),n=-r,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,u=/^(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))$/,t=this,i=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(M(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;i+=e.data.length,m.preview&amp;&amp;i&gt;m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&amp;&amp;0===e[0].length}function g(){return c&amp;&amp;h&amp;&amp;(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+b.DefaultDelimiter+\"'\"),h=!1),m.skipEmptyLines&amp;&amp;(c.data=c.data.filter(function(e){return!y(e)})),_()&amp;&amp;function(){if(!c)return;function e(e,t){M(m.transformHeader)&amp;&amp;(e=m.transformHeader(e,t)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&amp;&amp;t&lt;c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&amp;&amp;!m.dynamicTyping&amp;&amp;!m.transform)return c;function e(e,t){var i,r=m.header?{}:[];for(i=0;i&lt;e.length;i++){var n=i,s=e[i];m.header&amp;&amp;(n=i&gt;=l.length?\"__parsed_extra\":l[i]),m.transform&amp;&amp;(s=m.transform(s,n)),s=v(n,s),\"__parsed_extra\"===n?(r[n]=r[n]||[],r[n].push(s)):r[n]=s}return m.header&amp;&amp;(i&gt;l.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+l.length+\" fields but parsed \"+i,f+t):i&lt;l.length&amp;&amp;k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+l.length+\" fields but parsed \"+i,f+t)),r}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&amp;&amp;c.meta&amp;&amp;(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&amp;&amp;0===l.length}function v(e,t){return i=e,m.dynamicTypingFunction&amp;&amp;void 0===m.dynamicTyping[i]&amp;&amp;(m.dynamicTyping[i]=m.dynamicTypingFunction(i)),!0===(m.dynamicTyping[i]||m.dynamicTyping)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&amp;&amp;\"FALSE\"!==t&amp;&amp;(function(e){if(s.test(e)){var t=parseFloat(e);if(n&lt;t&amp;&amp;t&lt;r)return!0}return!1}(t)?parseFloat(t):u.test(t)?new Date(t):\"\"===t?null:t):t;var i}function k(e,t,i,r){var n={type:e,code:t,message:i};void 0!==r&amp;&amp;(n.row=r),c.errors.push(n)}this.parse=function(e,t,i){var r=m.quoteChar||'\"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var i=new RegExp(j(t)+\"([^]*?)\"+j(t),\"gm\"),r=(e=e.replace(i,\"\")).split(\"\\r\"),n=e.split(\"\\n\"),s=1&lt;n.length&amp;&amp;n[0].length&lt;r[0].length;if(1===r.length||s)return\"\\n\";for(var a=0,o=0;o&lt;r.length;o++)\"\\n\"===r[o][0]&amp;&amp;a++;return a&gt;=r.length/2?\"\\r\\n\":\"\\r\"}(e,r)),h=!1,m.delimiter)M(m.delimiter)&amp;&amp;(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,i,r,n){var s,a,o,h;n=n||[\",\",\"\\t\",\"|\",\";\",b.RECORD_SEP,b.UNIT_SEP];for(var u=0;u&lt;n.length;u++){var f=n[u],d=0,l=0,c=0;o=void 0;for(var p=new E({comments:r,delimiter:f,newline:t,preview:10}).parse(e),g=0;g&lt;p.data.length;g++)if(i&amp;&amp;y(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0&lt;_&amp;&amp;(d+=Math.abs(_-o),o=_):o=_}0&lt;p.data.length&amp;&amp;(l/=p.data.length-c),(void 0===a||d&lt;=a)&amp;&amp;(void 0===h||h&lt;l)&amp;&amp;1.99&lt;l&amp;&amp;(a=d,s=f,h=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(h=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=w(m);return m.preview&amp;&amp;m.header&amp;&amp;s.preview++,a=e,o=new E(s),c=o.parse(a,t,i),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=M(m.chunk)?\"\":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,M(m.complete)&amp;&amp;m.complete(c),a=\"\"}}function j(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&amp;\")}function E(e){var S,O=(e=e||{}).delimiter,x=e.newline,I=e.comments,T=e.step,D=e.preview,A=e.fastMode,L=S=void 0===e.quoteChar||null===e.quoteChar?'\"':e.quoteChar;if(void 0!==e.escapeChar&amp;&amp;(L=e.escapeChar),(\"string\"!=typeof O||-1&lt;b.BAD_DELIMITERS.indexOf(O))&amp;&amp;(O=\",\"),I===O)throw new Error(\"Comment character same as delimiter\");!0===I?I=\"#\":(\"string\"!=typeof I||-1&lt;b.BAD_DELIMITERS.indexOf(I))&amp;&amp;(I=!1),\"\\n\"!==x&amp;&amp;\"\\r\"!==x&amp;&amp;\"\\r\\n\"!==x&amp;&amp;(x=\"\\n\");var F=0,z=!1;this.parse=function(r,t,i){if(\"string\"!=typeof r)throw new Error(\"Input must be a string\");var n=r.length,e=O.length,s=x.length,a=I.length,o=M(T),h=[],u=[],f=[],d=F=0;if(!r)return C();if(A||!1!==A&amp;&amp;-1===r.indexOf(S)){for(var l=r.split(x),c=0;c&lt;l.length;c++){if(f=l[c],F+=f.length,c!==l.length-1)F+=x.length;else if(i)return C();if(!I||f.substring(0,a)!==I){if(o){if(h=[],k(f.split(O)),R(),z)return C()}else k(f.split(O));if(D&amp;&amp;D&lt;=c)return h=h.slice(0,D),C(!0)}}return C()}for(var p=r.indexOf(O,F),g=r.indexOf(x,F),_=new RegExp(j(L)+j(S),\"g\"),m=r.indexOf(S,F);;)if(r[F]!==S)if(I&amp;&amp;0===f.length&amp;&amp;r.substring(F,F+a)===I){if(-1===g)return C();F=g+s,g=r.indexOf(x,F),p=r.indexOf(O,F)}else if(-1!==p&amp;&amp;(p&lt;g||-1===g))f.push(r.substring(F,p)),F=p+e,p=r.indexOf(O,F);else{if(-1===g)break;if(f.push(r.substring(F,g)),w(g+s),o&amp;&amp;(R(),z))return C();if(D&amp;&amp;h.length&gt;=D)return C(!0)}else for(m=F,F++;;){if(-1===(m=r.indexOf(S,m+1)))return i||u.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:h.length,index:F}),E();if(m===n-1)return E(r.substring(F,m).replace(_,S));if(S!==L||r[m+1]!==L){if(S===L||0===m||r[m-1]!==L){-1!==p&amp;&amp;p&lt;m+1&amp;&amp;(p=r.indexOf(O,m+1)),-1!==g&amp;&amp;g&lt;m+1&amp;&amp;(g=r.indexOf(x,m+1));var y=b(-1===g?p:Math.min(p,g));if(r.substr(m+1+y,e)===O){f.push(r.substring(F,m).replace(_,S)),r[F=m+1+y+e]!==S&amp;&amp;(m=r.indexOf(S,F)),p=r.indexOf(O,F),g=r.indexOf(x,F);break}var v=b(g);if(r.substring(m+1+v,m+1+v+s)===x){if(f.push(r.substring(F,m).replace(_,S)),w(m+1+v+s),p=r.indexOf(O,F),m=r.indexOf(S,F),o&amp;&amp;(R(),z))return C();if(D&amp;&amp;h.length&gt;=D)return C(!0);break}u.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:h.length,index:F}),m++}}else m++}return E();function k(e){h.push(e),d=F}function b(e){var t=0;if(-1!==e){var i=r.substring(m+1,e);i&amp;&amp;\"\"===i.trim()&amp;&amp;(t=i.length)}return t}function E(e){return i||(void 0===e&amp;&amp;(e=r.substring(F)),f.push(e),F=n,k(f),o&amp;&amp;R()),C()}function w(e){F=e,k(f),f=[],g=r.indexOf(x,F)}function C(e){return{data:h,errors:u,meta:{delimiter:O,linebreak:x,aborted:z,truncated:!!e,cursor:d+(t||0)}}}function R(){T(C()),h=[],u=[]}},this.abort=function(){z=!0},this.getCharIndex=function(){return F}}function _(e){var t=e.data,i=a[t.workerId],r=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&amp;&amp;t.results.data){var n={abort:function(){r=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(M(i.userStep)){for(var s=0;s&lt;t.results.data.length&amp;&amp;(i.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!r);s++);delete t.results}else M(i.userChunk)&amp;&amp;(i.userChunk(t.results,n,t.file),delete t.results)}t.finished&amp;&amp;!r&amp;&amp;m(t.workerId,t.results)}function m(e,t){var i=a[e];M(i.userComplete)&amp;&amp;i.userComplete(t),i.terminate(),delete a[e]}function y(){throw new Error(\"Not implemented.\")}function w(e){if(\"object\"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var i in e)t[i]=w(e[i]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function M(e){return\"function\"==typeof e}return o&amp;&amp;(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&amp;&amp;t&amp;&amp;(b.WORKER_ID=t.workerId);if(\"string\"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&amp;&amp;t.input instanceof File||t.input instanceof Object){var i=b.parse(t.input,t.config);i&amp;&amp;f.postMessage({workerId:b.WORKER_ID,results:i,finished:!0})}}),(l.prototype=Object.create(u.prototype)).constructor=l,(c.prototype=Object.create(u.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(u.prototype)).constructor=g,b});\n</code></pre>"}, {"location": "labs/week6/", "title": "Design DeCSSions", "text": "<p>Adding the data from our survey into our mapplication!</p> <p></p> <p>Goals</p> <ul> <li>Add content from Google Form into a <code>div</code></li> <li>Use CSS Grid to change page layouts</li> </ul> <p>Today\u2019s lab will cover how to put your data in other places besides just the map and work with CSS Grid layouts.</p>"}, {"location": "labs/week6/#lab-outline", "title": "Lab outline", "text": "<ol> <li>Accessing our Google Form Data with Functions</li> <li>Designing and debugging with CSS Grid</li> <li>Alternative CSS Grid Layouts</li> </ol> <p>Start by creating a <code>week6</code> folder in your lab assignments repo.</p> <p>Get ahead start</p> <p>If you finished <code>lab 5</code>, you can also copy the contents of your <code>week_5</code> folder and skip the following setup section.</p>"}, {"location": "labs/week6/#starting-template-code-for-lab-6", "title": "Starting template code for lab #6", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Lab 6&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n        &lt;!-- Papa Parse --&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;!-- Be sure to use your own survey here!!!!!!! --&gt;\n                &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform?embedded=true\" width=\"640\" height=\"475\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data.lat,data.lng,data['What zip code do you live in?'],data['Have you been vaccinated?'])\n    })\n}\n\nloadData(dataUrl)\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre>"}, {"location": "labs/week6/1/", "title": "Getting our data in place!", "text": "<p>Go ahead and start the live server to make sure that the code is up and running. In Firefox, open up the <code>Debug Console</code> (Right Button then click inspect element OR press F12) and click on the array from last week:</p> <p></p> <p>Remember that in an JSON object, <code>keys</code> are essentially the field names: </p> <p>And <code>values</code> are the contents: </p> <p>Remember to access a value, you have to access the <code>object</code> and then the <code>key</code> using <code>.</code> dot notation or the <code>['name of field']</code> bracket notation.</p> <p>For example, last lab when we wanted the <code>lat</code> data, we used <code>data.lat</code>:</p> <p><code>addMarker(data.lat,data.lng,data['What zip code do you live in?'],data['Have you been vaccinated?'])</code></p>"}, {"location": "labs/week6/1/#prepping-the-divs", "title": "Prepping the <code>div</code>s", "text": ""}, {"location": "labs/week6/1/#warm-up-add-a-div-for-the-survey", "title": "\ud83c\udfc3Warm-up: Add a <code>div</code> for the survey", "text": "<p>Before we do anything to new, let\u2019s move our survey into its own <code>div</code>!</p> Answer index.html<pre><code>    &lt;div id=\"contents\"&gt;\n        &lt;div id=\"theSurvey\"&gt;\n            &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLScD0IOr_U4r0q4HlBkZ7olkA5OJpgInePF8DQbIrIWDeTm1jw/viewform?embedded=true\" width=\"640\" height=\"720\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt; \n        &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre> <p>Let\u2019s also change the <code>height</code> and <code>width</code> to <code>100%</code> so the <code>iframe</code> can finally follow our CSS rules!</p> <pre><code>&lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLScD0IOr_U4r0q4HlBkZ7olkA5OJpgInePF8DQbIrIWDeTm1jw/viewform?embedded=true\" width=\"100%\" height=\"100%\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n</code></pre> <p>With the survey in its own <code>div</code> now, we can then add a <code>&lt;div&gt;</code> for our new content:</p> index.html<pre><code>        &lt;div id=\"contents\"&gt;\n            &lt;div id=\"placeForButtons\"&gt;\n            &lt;div id=\"theSurvey\"&gt;\n                &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLScD0IOr_U4r0q4HlBkZ7olkA5OJpgInePF8DQbIrIWDeTm1jw/viewform?embedded=true\" width=\"100%\" height=\"100%\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n</code></pre>"}, {"location": "labs/week6/1/#adding-a-function-again", "title": "Adding a <code>function</code> again?", "text": "<p>Now, let\u2019s look at the <code>location</code> key. We probably want to add the locations to our contents to see what locations or showing up, as some people might put the same location more than twice! </p> <p>We probably want to make buttons from these locations soooo....</p>"}, {"location": "labs/week6/1/#warm-up-question-create-buttons-call-back-to-lab-2", "title": "Warm-up question: Create buttons (call-back to lab #2)!!", "text": "<p>Question</p> <p>Which line should we put this create buttons function: <code>createButtons(lat,lng,location);</code></p> Answers <p>It should go in our <code>addMarker()</code> function! So that when we add markers, the <code>buttons</code> are added afterwards!</p> <p>Add the line for the <code>createButton()</code> function in our JavaScript file:</p> js/init.js<pre><code>function addMarker(lat,lng,title,message){\n    // console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    createButtons(lat,lng,location)\n    return message\n}\n</code></pre>"}, {"location": "labs/week6/1/#refactor-the-addmarker", "title": "Refactor the <code>addMarker()</code>", "text": "<p>Notice how the <code>addMarker()</code> has a lot of parameters now? Like, 4? That\u2019s quite a lot, and will be harder to manage if we want to add more. </p> <p>So, let\u2019s pass in the whole <code>Object</code> instead of pieces of the object like so: <code>addMarker(data)</code></p> <p>Before proceeding to the exercise make sure your <code>addMarker()</code> call looks like the following inside the <code>processData()</code> function:</p> js/init.js<pre><code>function processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n}\n</code></pre>"}, {"location": "labs/week6/1/#in-class-exercise-1-refactor-the-addmarker-function", "title": "\u26bdIn-class Exercise #1 - Refactor the <code>addMarker()</code> function", "text": "<p>We are refactoring the <code>addMarker()</code> function during our loop to take in the whole object as a parameter. How might we re-write our <code>addMaker()</code> function to take in the object? </p> <p>Tasks</p> <ol> <li>Re-write the <code>addMarker()</code> function to take in the data object from the <code>forEach()</code> loop.</li> </ol> Answer js/init.js<pre><code>function addMarker(data){\n    // console.log(data['What zip code do you live in?'])\n    L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data['What zip code do you live in?']}&lt;/h2&gt; &lt;h3&gt;${data['Have you been vaccinated?']}&lt;/h3&gt;`)\n    createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    return data['What zip code do you live in?']\n}\n</code></pre> <p>Important note!</p> <ol> <li> <p>Make sure you changed the <code>return message</code> line in the end of the function, otherwise it will break since it <code>message</code> is not defined anywhere!</p> </li> <li> <p>Make sure we use <code>data</code> object! Which means making sure we use the <code>object</code> + <code>.</code> + <code>key</code> format.</p> </li> </ol>"}, {"location": "labs/week6/1/#reminder-about-accessing-object-keys-again", "title": "Reminder about accessing <code>object-keys</code> again", "text": "<p>Remember, since our data is being stored in an object, the <code>createButton()</code> function should look like this:</p> <pre><code>createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n</code></pre> <ul> <li>Where we are accessing the <code>data</code> <code>object</code>\u2019s <code>lat</code>, <code>lng</code>, and <code>location</code>. </li> </ul> <p>Note</p> <p>Your <code>keys==</code> MUST always match your data ==<code>object</code>, you can use the console to check!!</p> <p>For example: If your survey spreadsheet has <code>latitude</code> instead of <code>lat</code> then the you MUST use <code>data.latitude</code></p> <p>And now, just like in lab 3, we are going to add buttons!</p> <p>Here\u2019s the <code>createButton()</code> from lab 3:</p> <pre><code>function createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    document.body.appendChild(newButton); //this adds the button to our page.\n}\n</code></pre> <p>Wait.. it didn\u2019t work? Well, that\u2019s because we have to tweak a few things\u2026</p> <ol> <li>Next we need to change the <code>document.body.appendChild(newButton)</code> to use the <code>div</code> that we created earlier!</li> </ol>"}, {"location": "labs/week6/1/#adding-buttons-to-our-div", "title": "Adding buttons to our <code>div</code>", "text": "<p>To address the second issue of targeting our <code>div</code>, we need to utilize the JavaScript method of selecting Elements called:</p> <p><code>getElementById()</code></p> <p>Learn more about <code>getElementById()</code></p> <p>Just running the method doesn\u2019t do anything, so we need to store it in a variable:</p> <pre><code>const spaceForButtons = document.getElementById('placeForButtons')\n</code></pre> <p>Remember the <code>appendChild()</code> that adds content? We will use that method to add our button to our <code>spaceForButtons</code> variable that specifies the <code>div</code>:</p> <pre><code>spaceForButtons.appendChild(newButton);\n</code></pre> <p>The final <code>createButtons()</code> and <code>addMarker()</code> functions should look like this:</p> <pre><code>function addMarker(data){\n        // console.log(data)\n        // these are the names of our lat/long fields in the google sheets:\n\n\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data['What zip code do you live in?']}&lt;/h2&gt; &lt;h3&gt;${data['Have you been vaccinated?']}&lt;/h3&gt;`)\n        // adding our create button function\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        return data['What zip code do you live in?']\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n</code></pre> <p>Horrah!! </p>"}, {"location": "labs/week6/1/#our-current-html-structure", "title": "Our current HTML structure", "text": "<p>Here\u2019s a quick schematic of our HTML and CSS:</p> <pre><code>HTML\n  \u2514BODY\n     \u2514.main\n        \u251c#contents\n        \u2502    \u251c#placeForButtons\n        \u2502    \u2514#survey\n        \u2514#the_map\n</code></pre> <p>Check to see if your JavaScript and HTML code is similar to the following before moving on.</p>"}, {"location": "labs/week6/1/#check-point", "title": "\ud83c\udfc1Check point", "text": "js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nfunction addMarker(data){\n    // console.log(data)\n    // these are the names of our lat/long fields in the google sheets:\n    L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data['What zip code do you live in?']}&lt;/h2&gt; &lt;h3&gt;${data['Have you been vaccinated?']}&lt;/h3&gt;`)\n    createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    return\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n}\n\nloadData(dataUrl)\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Lab 6&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n        &lt;!-- Papa Parse --&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;!-- space for a menu --&gt;\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;div id=\"placeForButtons\"&gt;\n                &lt;div id=\"theSurvey\"&gt;\n                    &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLScD0IOr_U4r0q4HlBkZ7olkA5OJpgInePF8DQbIrIWDeTm1jw/viewform?embedded=true\" width=\"100%\" height=\"100%\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2022)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}, {"location": "labs/week6/2/", "title": "CSS Grid time!", "text": "<p>Ok, now that we got the buttons working, notice how they appear at the top?</p> <p></p> <p>This is because we don\u2019t have a place for them in our CSS Grid yet!</p> <p>So time to style our page and make it more presentable!</p> <p>Open up our <code>style.css</code> and find the <code>main</code> class selector, <code>.main</code>:</p> styles/style.css<pre><code>.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}    \n</code></pre> <p>Because our <code>div</code> sits within the <code>content</code> area we should find the the <code>grid-area</code> named <code>content</code>. </p> <p>Notice that we  <code>#contents</code> only has one property, which is the <code>grid-area: content;</code></p> styles/style.css<pre><code>#contents{\n    grid-area: content;\n}\n</code></pre> <p>Who defines <code>grid-area</code> names?</p> <p>We do! <code>grid-areas</code> are just names for areas we decided for ourselves. If you don\u2019t use <code>grid-areas</code>, you can also reference grids by row and column, like <code>grid-area: 1/2</code> would be grid row #1 and column #2. If 4 grid line values are provided, then <code>grid-area</code> treats them as the following:      1. the first value is <code>grid-row-start</code>, what row should this <code>grid-area</code> start in     2. the second value is <code>grid-column-start</code>, what column should this <code>grid-area</code> start in     3. the third value is <code>grid-row-end</code>, when should this row end.     4. the fourth value is <code>grid-column-end</code>, when should this column end.</p> <p>Ex: grid-area: 2 / 1 / 2 / 1</p> <p>Now that we found the parent box, <code>contents</code>, we need to enable the power of CSS grid in this <code>div</code>, so we have to add the <code>display: grid;</code> css property:</p> styles/style.css<pre><code>#contents{\n    grid-area: content;\n    display: grid;\n}\n</code></pre> <p>Take note of the <code>theSurvey</code> selector, which is within the <code>.main</code> class but not affected by the <code>contents</code> div, since it sits above it:</p> <pre><code>#theSurvey{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> <p>Recall the schematic of our HTML and CSS:</p> <pre><code>HTML\n  \u2514BODY\n     \u2514.main\n        \u251c#contents\n        \u2502    \u251c#placeForButtons\n        \u2502    \u2514#theSurvey\n        \u2514#the_map\n</code></pre> <p>Wait a second\u2026 There\u2019s something missing in our CSS file according to that schematic\u2026 Do you know what it is?</p> <p>Our poor <code>placeForButtons</code> and <code>theSurvey</code> doesn\u2019t have a selector!</p> <p>Let\u2019s fix it by adding a CSS selector for them and a <code>grid-area: buttonHome</code>:</p> <pre><code>#theSurvey{\n    grid-area: survey; /* (1)! */\n}\n\n#placeForButtons{\n    grid-area: buttonHome; /* (2)! */\n}\n</code></pre> <ol> <li><code>grid-area</code> gives the name to our area <code>survey</code></li> <li><code>grid-area</code> gives the name to our area <code>buttonHome</code></li> </ol> <p><code>grid-area</code> gives the <code>#placeForButtons</code> selector the name <code>buttonHome</code> that we will use in the <code>grid-template-areas</code>.</p>"}, {"location": "labs/week6/2/#assgining-grid-template-areas", "title": "Assgining Grid-Template Areas", "text": "<p>Go back to the <code>contents</code> selector add these two css properties:     1. <code>grid-template-rows</code>     2. <code>grid-template-areas</code> Set grid<code>template-rows</code> to 1fr 3fr if you want a bigger space for buttons and set the <code>grid-template-areas</code>\u2019s value to <code>\"survey\" \"buttonHome\"</code>, which is the names we assigned above and the space between them <code>\" \"</code> makes the <code>survey</code> and <code>buttonHome</code> on seperate rows:</p> <p>Space <code></code> between <code>grid-template-areas</code></p> <p>Make sure you add a space and <code>\"</code> between the two <code>grid-template-areas</code>!! If you fail to do so, then it will be treated as 1 row!! </p> <p>To recap with <code>grid-template-areas</code>:      <code>\"item-one item-two\"</code> - one row, two columns.     <code>\"item-one\" \"item-two\"</code> - two rows, one column.     <code>\"item-one item-one\" \"item-two item-three\"</code> - two rows, two columns, and item-one spans two rows!</p> <p><pre><code>#contents{\n    display: grid;\n    grid-template-rows: 1fr 3fr; \n    grid-template-areas: \"survey\" \"buttonHome\"\n}\n</code></pre> Try flipping <code>survey</code> and <code>buttonHome</code> in the <code>property value</code>, what happens?</p> Answer <p>The survey showed up on the right-side! Being able to change layouts on-the-fly demonstrates the power of CSS Grid!</p> <p>Because it makes sense for the buttons to go ontop, let\u2019s keep the layout as <code>grid-template-areas: \"buttonHome survey\"</code>:</p> <pre><code>#contents{\n    grid-area: content; /* (1)! */\n    display: grid;/* (2)! */\n    grid-template-rows: 1fr 3fr;/* (3)! */ \n    grid-template-areas: \"buttonHome\" \"survey\"/* (4)! */\n}\n</code></pre> <ol> <li><code>grid-area</code> gives the name to our area <code>content</code> which is used in the <code>.main</code> class\u2019s `grid.</li> <li>This enables <code>css-grid</code> in this <code>contents</code> <code>div</code>.</li> <li>This sets two rows, one being 25% ontop and 75% below. You can customize this as you\u2019d like with <code>fr</code> or <code>%</code> or <code>px</code> units.</li> <li>This allows us to tell <code>css-grid</code> to put the content in the right place.</li> </ol>"}, {"location": "labs/week6/2/#css-grid-debugging-in-firefox", "title": "CSS Grid Debugging in Firefox", "text": "<p>Untested in Chrome or Safari</p> <p><code>CSS grid</code> is relatively new in Chrome or Safari, so I am not sure how robust the debugging is. I highly recommend using Firefox to troubleshoot <code>CSS grid</code>.</p> <p>In Firefox inside of your webpage, Right Button right click then click on <code>Inspect Element</code> and make sure you are on the <code>Inspector</code>: </p> <p>Click on <code>Layout</code>: </p> <p>Look for <code>div#contents</code></p> <p></p> <p>Then make sure <code>div#contents</code> and <code>display area names</code> are checked:</p> <p></p> <p>You will notice that the names of the <code>grid areas</code> will display! Very very helpful when debugging CSS Grid!!!</p> <p></p> <p>If you check the other <code>grid</code> containers like, <code>div.main</code>, you can see the multiple grids overlaying each other:</p> <p></p>"}, {"location": "labs/week6/2/#playing-around-with-the-inspector", "title": "Playing around with the inspector", "text": "<p>If you click on an element with the <code>inspector</code> you can directly edit the CSS:</p> <p></p> <p>For example, clicking on the <code>placeForButtons</code> area allows you to see the CSS styles: </p> <p>You can also use this to navigate up the HTML tree or find specific elements, like the <code>contents</code>:</p> <p></p> <p>You can change the styles by editing this box:</p> <p></p> <p>If you want to save these changes, you\u2019ll have to <code>right click</code> and <code>copy the rule</code>: </p>"}, {"location": "labs/week6/2/#check-point", "title": "\ud83c\udfc1Check point", "text": "<p>Check to see if your CSS looks correct before moving on:</p> styles/style.css<pre><code>body{\n    display: grid;\n    grid-auto-rows: auto 1fr;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n}\n\nheader{\n    grid-area: header;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n    display: grid;\n    grid-template-rows: 1fr 3fr; \n    grid-template-areas: \"buttonHome\" \"survey\"\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n\n#theSurvey{\n    grid-area: survey; /* (1)! */\n}\n\n#placeForButtons{\n    grid-area: buttonHome; /* (2)! */\n}\n</code></pre>"}, {"location": "labs/week6/3/", "title": "Home C-S-Stretch: Layouts!", "text": "<p>Let\u2019s add some text to our header in the HTML:</p> index.html<pre><code>    &lt;body&gt;\n        &lt;header&gt;\n            COVID Vaccination Stories\n        &lt;/header&gt;\n</code></pre> <p>In the <code>style.css</code> file and go to the <code>body</code> selector. Then change <code>grid-template-rows</code> to the following: <code>grid-template-rows: 50px auto auto;</code>.</p> styles/style.css<pre><code>body{\n    display: grid;\n    grid-template-rows: 50px auto auto;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n}\n</code></pre> <p>This creates a small header ontop that is <code>50 pixels</code> tall and <code>auto</code> fits the content for the main page and footer.</p>"}, {"location": "labs/week6/3/#adding-gaps-between-items", "title": "Adding <code>gaps</code> between items", "text": "<p>In <code>CSS-grid</code> you can add a <code>gutter</code> between items that gives a padding in between, as follows:</p> styles/style.css<pre><code>body{\n    display: grid;\n    grid-template-rows: 50px auto auto;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    gap: 10px;\n}\n</code></pre> <p>Vertical scroll bar?</p> <p>If you add a gap to the <code>body</code> there will be a scroll bar now since it extends the page beyond the initial view port. It is recommended to use gap not with containers that are meant to contain the whole page, like <code>HTML</code> or <code>body</code></p> <p>The <code>gap</code> CSS property is very useful for spacing other elements, like buttons!!</p>"}, {"location": "labs/week6/3/#centering-content", "title": "Centering content", "text": "<p>You can center the header by going to the <code>header</code> selector adding the following CSS property <code>justify-self: center</code>:</p> <pre><code>header{\n    grid-area: header;\n    justify-self: center;\n}\n</code></pre> <p>If you want to vertical align, then you need to use <code>align-self:center</code></p> <pre><code>header{\n    grid-area: header;\n    justify-self: center;\n    align-self:center;\n}\n</code></pre> <p>In our <code>grid-template-columns</code> we need one more <code>1fr</code> for our survey in:</p> <p><code>grid-template-columns: 1fr 1fr 1fr</code></p> <p>Finally, we need to add spaces after the <code>\"header\"</code> and <code>\"footer\"</code> template areas too which indicates which row the template is on:</p> <p><code>grid-template-areas: \"header\" \"mappanel contentpanel\" \"footer\"</code></p>"}, {"location": "labs/week6/3/#css-check-point", "title": "\ud83c\udfc1CSS Check point", "text": "<p>Check to see if your <code>body</code> and <code>header</code> selector looks like the following:</p> <pre><code>body{\n    display: grid;\n    grid-template-rows: 50px auto auto;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    gap: 10px;\n}\n\nheader{\n    grid-area: header;\n    justify-self: center;\n    align-self: center;\n}\n</code></pre>"}, {"location": "labs/week6/3/#grid-ception-and-automatically-fitting-content", "title": "Grid-ception and automatically fitting content!", "text": "<p>While named <code>grid-template-areas</code> can be useful, if you have a lot of content, or if the content might grow in number, you can just specify the number that the content should occupy using the <code>grid-column</code> property and <code>repeat</code>. Additionally, we can start a <code>subgrid</code> within a <code>grid</code> element to specify which part of an already existing <code>grid</code> we want to visualize. </p> <ul> <li> <p>More about <code>repeat</code></p> </li> <li> <p>More about <code>subgrid</code></p> </li> </ul> <p>Let\u2019s apply a <code>subgrid</code> and <code>repeated columns</code> of 2 to the <code>#placeForButtons</code> selector:</p> <pre><code>#placeForButtons{\n    grid-area: buttonHome;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n</code></pre> <p>This creates a new column after every 2 evenly spaced item!!!</p> <p></p> <p>It even works when you resize the page! </p> <p>So cool!!! </p> <p>Remember, if you turn on the debugger in Firefox, you can see the multiple grids:</p> <p></p> <p>And there you have it! We\u2019ve only scratched the surface of CSS Grid, but this is enough for you to complete the lab assignment!</p>"}, {"location": "labs/week6/4/", "title": "\u2705 Final Template Code", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Lab 6&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n        &lt;!-- Papa Parse --&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Covid Vaccination Stories\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;div id=\"placeForButtons\"&gt;&lt;/div&gt;\n                &lt;!-- Be sure to use your own survey here!!!!!!! --&gt;\n                &lt;div id=\"theSurvey\"&gt;\n                    &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform?embedded=true\" width=\"100%\" height=\"100%\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n                &lt;/div&gt;\n\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nfunction addMarker(data){\n    // console.log(data)\n    // these are the names of our lat/long fields in the google sheets:\n    L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data['What zip code do you live in?']}&lt;/h2&gt; &lt;h3&gt;${data['Have you been vaccinated?']}&lt;/h3&gt;`)\n    createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    return\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n}\n\nloadData(dataUrl)\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-template-rows: 50px auto auto;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    gap: 10px;\n}\n\nheader{\n    grid-area: header;\n    justify-self: center;\n    align-self: center;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n    display: grid;\n    grid-template-rows: 1fr 3fr; \n    grid-template-areas: \"buttonHome\" \"survey\"\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n\n#theSurvey{\n    grid-area: survey;\n}\n\n#placeForButtons{\n    grid-area: buttonHome;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n</code></pre>"}, {"location": "labs/week7/", "title": "ConditionALs, Map Layers, and Visual Design", "text": "<p>Today we will focus on styling our map through the use of Leaflet <code>Feature groups</code>, which means more JavaScript!</p> <p><code>Feature groups</code> are like containers that you can use to group your map content. For this lab we will be creating two layers for our survey question of <code>\"Is your English your first language?\"</code></p> <p>One group will be for <code>yes</code> and another group for <code>no</code>.</p> <p></p> <p>Goals</p> <ul> <li>Use conditional statements to add content into Leaflet <code>FeatureGroups</code></li> <li>Use Leaflet\u2019s <code>circleMarkers</code> to visualize points</li> <li>Change the basemap for our maps</li> </ul>"}, {"location": "labs/week7/#lab-outline", "title": "Lab outline", "text": "<ol> <li>Conditional statements in JavaScript</li> <li>Adding <code>L.featureGroups()</code> in our <code>addMarker()</code> function</li> <li>Adding <code>circleMarkers</code> to our map</li> <li>Changing the basemap</li> </ol> <p>Start by creating a <code>week7</code> folder in your lab assignments repo.</p> <p>Get ahead start</p> <p>If you finished <code>lab 6</code>, you can also copy the contents of your <code>week_6</code> folder and skip the following setup section.</p>"}, {"location": "labs/week7/#starting-template-code-for-lab-7", "title": "Starting template code for lab #7", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Lab 6&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n        &lt;!-- Papa Parse --&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Covid Vaccination Stories\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;div id=\"placeForButtons\"&gt;&lt;/div&gt;\n                &lt;!-- Be sure to use your own survey here!!!!!!! --&gt;\n                &lt;div id=\"theSurvey\"&gt;\n                    &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform?embedded=true\" width=\"100%\" height=\"100%\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n                &lt;/div&gt;\n\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// use the variables\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nfunction addMarker(data){\n    // console.log(data)\n    // these are the names of our lat/long fields in the google sheets:\n    L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data['What zip code do you live in?']}&lt;/h2&gt; &lt;h3&gt;${data['Have you been vaccinated?']}&lt;/h3&gt;`)\n    createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    return\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n}\n\nloadData(dataUrl)\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-template-rows: 50px auto auto;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    gap: 10px;\n}\n\nheader{\n    grid-area: header;\n    justify-self: center;\n    align-self: center;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n    display: grid;\n    grid-template-rows: 1fr 3fr; \n    grid-template-areas: \"buttonHome\" \"survey\"\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n\n#theSurvey{\n    grid-area: survey;\n}\n\n#placeForButtons{\n    grid-area: buttonHome;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n</code></pre>"}, {"location": "labs/week7/1/", "title": "<code>if</code> Conditional Statements in JavaScript", "text": "<p>Conditional statements are important for being able to tell our code to do or not do something.</p>"}, {"location": "labs/week7/1/#evaluting-an-if-condition", "title": "Evaluting an <code>if</code> condition", "text": "<pre><code>if(){\n    // do something if this is true\n}\n</code></pre> <ol> <li><code>if</code> statments begin with the <code>if</code> keyword.</li> <li>The <code>()</code> contains the evaluating condition.</li> <li>The <code>{}</code> contains the function to do if the statement is true.</li> </ol> <p>The syntax is similar to a <code>function</code> in that they both have parameters and open and close with brackets <code>{}</code>.</p> <pre><code>const hello = \"hi\"\nif (hello){\n    // do something if the `hello` variable exists\n    console.log('this condition is true!')\n    // optional: return something\n} \n</code></pre>"}, {"location": "labs/week7/1/#defined-vs-undefined-variables", "title": "Defined vs. undefined variables", "text": "<p>Variables that do no have a <code>=</code> afterwards, means they have no value and are called <code>undefined</code>:</p> <pre><code>let goodbye\n</code></pre> <p>Undefined variables can also be created with the following variable definitions:</p> <pre><code>let goodbye = null\nlet goodbye = 0\n\n// are all the same as\n// let goodbye\n</code></pre>"}, {"location": "labs/week7/1/#negating-conditions", "title": "Negating conditions", "text": "<p>You can also negate a condition by adding a <code>!</code> in front, for example:</p> <pre><code>const hello = \"hi\"\nlet goodbye\n\nif (!hello){\n    // do something if the `hello` variable is undefined\n    // optional: return something\n    console.log('in a conditional!')\n} \n</code></pre> <p>This statement wouldn\u2019t work since <code>hello</code> is <code>defined</code>, but if we change the <code>if</code> evaluation variable insde the <code>()</code> to <code>goodbye</code>, it will evalue as true since <code>goodbye</code> is <code>undefined</code>:</p> <pre><code>const hello = \"hi\"\nlet goodbye\n\nif (!goodbye){\n    // do something if the `hello` variable is undefined\n    // optional: return something\n    console.log('this condition is true!')\n} \n</code></pre>"}, {"location": "labs/week7/1/#javascript-conditional-evaluation-types", "title": "JavaScript Conditional Evaluation Types", "text": "<p>Recall that the <code>if</code> keyword that evalutes the condition within the <code>()</code>, like the parameters in a JavaScript function.</p> <p>There are different ways to set <code>conditions</code> inside the <code>()</code>, but it must has to either be <code>true</code> or <code>false</code>.</p> <p>Here are some different types of evaluations:</p> Example Meaning <code>if(variable)</code> Does this <code>variable</code> exist? <code>if(variable == \"yes\")</code> Does this <code>variable</code> equal to \u201cyes\u201d <code>if(variable != \"yEs\")</code> Does this <code>variable</code> NOT equal \u201cyEs\u201d <code>if(variable &gt; 10 )</code> Is this <code>variable</code> greater than 10? <code>if(variable == false)</code> Is this <code>variable</code> false? <code>if(variable == null)</code> Is this <code>variable</code> null? <code>if(variable == anotherVariable)</code> Is this <code>variable</code> the same as another variable? <code>if(variable &gt; 1 &amp;&amp; variable &lt; 10)</code> Is this <code>variable</code> greater than 1 AND is <code>variable</code> less than 10? <p>You can check this MDN article on <code>truthy</code> and <code>falsy</code> for more examples:</p> <ul> <li>https://developer.mozilla.org/en-US/docs/Glossary/Truthy</li> <li>https://developer.mozilla.org/en-US/docs/Glossary/Falsy</li> </ul> <p>The <code>&amp;&amp;</code> is a logical <code>AND</code> operator where all statements have to be <code>True</code> in order to be statisfied.</p> <ul> <li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND</li> </ul> <pre><code>const hello = \"hello\"\nconst goodbye\nif (hello &amp;&amp; goodbye){\n    console.log('I dont know why you say goodbye, I say hello')\n}\n</code></pre>"}, {"location": "labs/week7/1/#great-what-else-is-there", "title": "Great, what <code>else</code> is there?", "text": "<p><code>else</code> acts like a default in case the <code>if</code> condition never is true:</p> <pre><code>const hello = \"hello\"\nconst goodbye\nif (hello &amp;&amp; goodbye){\n    // do something IF `hello` and `goodbye` exist \n    console.log('I dont know why you say goodbye, I say hello')\n}\nelse {\n    // do something else\n    console.log('you say goodbye, and i say hello')\n}\n</code></pre>"}, {"location": "labs/week7/1/#class-exercise-1-lets-see-if-you-get-the-idea", "title": "\u26bdClass Exercise #1: Let\u2019s see <code>IF</code> you get the idea!", "text": "<p>Tasks</p> <ol> <li>Create an <code>if-else</code> statement for the dataset in your mapplication within the <code>addMarker()</code> function to only add markers when a certain condition exists</li> </ol> <p>If you are using the lab dataset, filter out answers to the question<code>\"Have you been vaccinated?\"</code></p> <p>Reminder!</p> <p>The <code>key</code> you are using to access the object MUST match identically to the Google Sheet!!! But, you can CHANGE the Google Sheet if you want your <code>keys</code> to be easier to  </p> <pre><code>function addMarker(data){\n    L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data.timestamp}&lt;/h2&gt;`)\n    createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    return data\n}\n</code></pre> <p>Bonus</p> <p>Use an <code>else</code> statement to show the number of those who speak other languages. Hint: You can add variables by using the syntax <code>anyVariable += 1</code></p> Answer js/init.js<pre><code>function addMarker(data){\n    if(data['Have you been vaccinated'] == \"Yes\"){\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`)\n        createButtons(data.lat,data.lng,data.Location)\n    }\n    else{\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Not vaccinated&lt;/h2&gt;`)\n        createButtons(data.lat,data.lng,data.Location)\n        // Bonus:    \n        // notVaccinated += 1\n    }\n    return data\n}\n// let notVaccinated = 0\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n    //document.body.append(\"Number of hidden records:\"+notVaccinated)\n}\n</code></pre>"}, {"location": "labs/week7/1/#explaining-the-recommended-solution", "title": "Explaining the recommended solution", "text": "js/init.js<pre><code>function addMarker(data){ //(1)!\n    if(data['Have you been vaccinated?'] == \"Yes\"){ //(2)!\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`)\n        createButtons(data.lat,data.lng,data.Location)\n    }\n    else{\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Non-Vaccinated&lt;/h2&gt;`)\n        createButtons(data.lat,data.lng,data.Location)\n    }\n    return data\n} \n</code></pre> <ol> <li> <p>The best place to change is the <code>addMarker()</code> function, since the function is already looping through all of our data (as per the previous lab).</p> </li> <li> <p>Put an <code>if(){}</code> statement right at the start of <code>function</code> to indicate that the first thing that should happen is evaluating this function.</p> </li> <li> <p>Then choose the variable to evaluate, which will be a field from our data object called, <code>Have you been vaccinated</code>. Remember, the field MUST match exactly how it is written in the CSV data set!</p> </li> <li> <p>Next we use the <code>==</code> to evaluate the condition as equals to</p> </li> <li> <p>Then we set the evaluation value, in this case \u201cYes\u201d. The quotes is necessary because without it, it treats <code>Yes</code> as a variable called <code>Yes</code>!!</p> </li> <li> <p>We change the pop-up to reflect the <code>True</code> nature of our question.</p> </li> <li> <p>We then add an <code>else{}</code> after the closing <code>}</code> of the <code>if</code> statement.</p> </li> <li> <p>We change the pop-up to reflect the <code>False</code> nature of our question.</p> </li> </ol> What happened to the pop-ups in the solution above? <p>They changed depending on whether \u201cYes\u201d was evaluated or not because of our <code>bindPopUp()</code> change.</p> <p>Before moving on, make sure your JavaScript is similar to the following:</p>"}, {"location": "labs/week7/1/#check-point", "title": "\ud83c\udfc1Check point", "text": "js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\n// define the leaflet map\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`)\n        createButtons(data.lat,data.lng,data.Location)\n    }\n    else{\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Not vaccinated&lt;/h2&gt;`)\n        createButtons(data.lat,data.lng,data.Location)\n    }\n    return data\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n}\n\nloadData(dataUrl)\n</code></pre>"}, {"location": "labs/week7/2/", "title": "<code>Leaflet</code>featureGroups`", "text": "<p>A <code>feature group</code>, which is Leaflet\u2019s container for dealing with multiple groups of data layers.</p> <p>In our <code>js/init.js</code> file we will add some variables to store our groups in:  <pre><code>let vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n</code></pre></p> <p>Important!</p> <p>Important!!! These variables have to be OUTSIDE the function, because <code>Leaflet</code> needs to be able to use them. Remember: A variable outside of a function is said to be in the <code>global scope</code>.</p>"}, {"location": "labs/week7/2/#adding-lfeaturegroups-in-our-addmarker-function", "title": "Adding <code>L.featureGroups()</code> in our <code>addMarker()</code> function", "text": "<p>Next we will need to change our <code>addMarker</code> function to add each marker to their respective groups instead of just directly onto the map:</p> <pre><code>// our Leaflet feature group layers waiting for content!\nlet vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        vaccinated.addLayer(L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        nonVaccinated.addLayer(L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Unvaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n</code></pre> <p>Awesome! Now let\u2019s see our beautiful layers!</p>"}, {"location": "labs/week7/2/#cleaning-up-the-addmarker-function", "title": "Cleaning up the <code>addMarker()</code> function", "text": "<p>We also need to delete the line <code>.addTo(map)</code> after each marker, because we will add the <code>featureGroup</code> to the map instead of individual markers:</p> <pre><code>// our Leaflet feature group layers waiting for content!\nlet vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        vaccinated.addLayer(L.marker([data.lat,data.lng]).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        nonVaccinated.addLayer(L.marker([data.lat,data.lng]).bindPopup(`&lt;h2&gt;Unvaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n</code></pre> Wait\u2026 our markers dispearred after we did that, why? <p>Since we removed <code>addTo(map)</code>, we now need to add the <code>group layers</code> to to map!!</p>"}, {"location": "labs/week7/2/#adding-our-group-layers-to-the-leaflet-map", "title": "Adding our <code>group layers</code> to the <code>Leaflet</code> map", "text": "<p>As alluded to in the answer above, we need to add the grouped layers to our Leaflet map. To do so, we will add the layers to the map, so we need to add this code somewhere:</p> <pre><code>vaccinated.addTo(map)\nnonVaccinated.addTo(map)\n</code></pre>"}, {"location": "labs/week7/2/#where-to-add-the-grouplayers", "title": "Where to add the <code>groupLayers()</code>?", "text": "<p>If you answered, at the end of the <code>processData()</code> function, you are correct (and sneaky if you read ahead during the lab!)!</p> <pre><code>function processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n    vaccinated.addTo(map) // add our layers after markers have been made\n    nonVaccinated.addTo(map) // add our layers after markers have been made  \n}\n</code></pre>"}, {"location": "labs/week7/2/#why", "title": "Why?", "text": "<p>We have to add our layers after the <code>forEach</code> loop finishes, otherwise the code will run only for the first marker.</p>"}, {"location": "labs/week7/2/#layer-controls", "title": "Layer Controls", "text": "<p>One big benefit of using Leaflet <code>FeatureGroups</code> is that we can add <code>controls</code> to the map which allows us to turn on and off layers.</p> <p>Let\u2019s add our list of layers as an <code>object</code>: <pre><code>// define layers\nlet layers = {\n    \"Vaccinated Respondent\": vaccinated,\n    \"Unvaccinated Respondent\": nonVaccinated\n}\n</code></pre></p> <p>The first property name is our <code>alias</code> or what the users will see, and the property key is the Leaflet <code>FeatureGroup</code> that we created earlier.</p> <p>Next we will add a Leaflet <code>controlGroup</code> right after the map is initalized.</p> <pre><code>// add layer control box\nL.control.layers(null,layers).addTo(map)\n</code></pre> <p>You can actually turn on and off layers using buttons outside of Leaflet controls by creating a function to add and remove layers.</p> <p>We can also add a <code>fitBounds</code> to our layers to make sure our map zooms into our layer:</p> <pre><code>// make the map zoom to the extent of markers\nmap.fitBounds(nonVaccinated.getBounds());\n</code></pre> <p>Hmm, that only works for one layer group, so let\u2019s create a new feature group that contains all of our layers:</p> <pre><code>let allLayers = L.featureGroup([vaccinated,nonVaccinated]);\nmap.fitBounds(allLayers.getBounds());     \n</code></pre> <p>That code should go at the end of our <code>processData</code> function so it fits all of our layers and markers.</p> <p>Our <code>processData</code> function should look like the following:</p> <pre><code>function processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n    vaccinated.addTo(map) // add our layers after markers have been made\n    nonVaccinated.addTo(map) // add our layers after markers have been made  \n    let allLayers = L.featureGroup([vaccinated,nonVaccinated]);\n    map.fitBounds(allLayers.getBounds());\n}\n</code></pre> <p>Now that we have the pop-up change based on our fields, let\u2019s actually change how the marker looks!</p>"}, {"location": "labs/week7/2/#check-point", "title": "\ud83c\udfc1Check point", "text": "<p>Before moving on, check to see if your JavaScript looks like the following:</p> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\nlet vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n\nlet layers = {\n    \"Vaccinated Respondent\": vaccinated,\n    \"Unvaccinated Respondent\": nonVaccinated\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\n// define the leaflet map\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\n// add layer control box\nL.control.layers(null,layers).addTo(map)\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        vaccinated.addLayer(L.marker([data.lat,data.lng]).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        nonVaccinated.addLayer(L.marker([data.lat,data.lng]).bindPopup(`&lt;h2&gt;Unvaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n    vaccinated.addTo(map) // add our layers after markers have been made\n    nonVaccinated.addTo(map) // add our layers after markers have been made  \n    let allLayers = L.featureGroup([vaccinated,nonVaccinated]);\n    map.fitBounds(allLayers.getBounds());\n}\n\nloadData(dataUrl)\n</code></pre>"}, {"location": "labs/week7/3/", "title": "Time to Leaflet the <code>markers</code> go, and use <code>circleMarkers!</code>", "text": "<p>The <code>blue</code> Leaflet markers are pretty ICONic to us now (pun intended). While we can change the markers to other icons, instead we will use <code>circle markers</code> because this allows us to have nice colorful markers without finding icons.</p> <p>More about circleMarkers?</p> <p>Circle markers are essentially SVG graphics that are drawn onto the map. If you add a lot of them, like over 100,000 they could start to slow down the browser. You can learn more about <code>circleMarkers</code> on the official documentation here: https://leafletjs.com/reference.html#circlemarker.</p>"}, {"location": "labs/week7/3/#adding-circlemarkers", "title": "Adding circleMarkers", "text": "<p>The format for adding <code>circleMarkers</code> in <code>Leaflet</code> looks like this:</p> <p><code>L.circleMarker(&lt;LatLng&gt;, &lt;CircleMarker options&gt;)</code></p> <p>The <code>latlng</code> is pretty familiar now, but the options for circleMarkers are a bit unexplored, except that one time I mentioned them when covering objects.</p> <pre><code>let circleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n</code></pre> <p>Add the above <code>circleOptions</code> above our code in the variable declaration area in the global namespace and change the <code>L.marker</code> to <code>L.circleMarker</code> as follows:</p> <pre><code>let circleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n\n// ... other variables ...\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        vaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        nonVaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Non-Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n</code></pre> <p>Awesome! We got <code>circleMarkers</code>! But wait.. They are all the same..</p> <p>Now this is where we need to consider design:</p> <ol> <li> <p>Be intentional in our design and choose colors to represent well.</p> </li> <li> <p>Change the colors based on our <code>if-else</code> statement</p> </li> </ol> <p>Let\u2019s make <code>red</code> for <code>Vaccinated</code> and <code>blue</code> for <code>No</code>.</p> <p>Since <code>circleOptions</code> is an object, we can change it\u2019s property value for <code>fillColor</code> when we are in the <code>if-else</code> statement.</p> <p>This should go in the <code>if(data['Have you been vaccinated?'] == \"Yes\")</code> scope:</p> <pre><code>circleOptions.fillColor = \"red\"\n</code></pre> <p>And this should go in the <code>else</code> scope: <pre><code>circleOptions.color = \"blue\"\n</code></pre></p> <p>Your final colorful <code>addMarker</code> function should look like this:</p> <pre><code>function addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        circleOptions.fillColor = \"red\"\n        vaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        circleOptions.fillColor = \"blue\"\n        nonVaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Non-Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n</code></pre>"}, {"location": "labs/week7/3/#check-point", "title": "\ud83c\udfc1Check point", "text": "<p>Before moving on, check to see if your JavaScript looks like the following:</p> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\nlet vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n\nlet layers = {\n    \"Vaccinated Respondent\": vaccinated,\n    \"Unvaccinated Respondent\": nonVaccinated\n}\n\nlet circleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\n// define the leaflet map\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\n// add layer control box\nL.control.layers(null,layers).addTo(map)\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        circleOptions.fillColor = \"red\"\n        vaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        circleOptions.fillColor = \"blue\"\n        nonVaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Non-Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n    vaccinated.addTo(map) // add our layers after markers have been made\n    nonVaccinated.addTo(map) // add our layers after markers have been made  \n    let allLayers = L.featureGroup([vaccinated,nonVaccinated]);\n    map.fitBounds(allLayers.getBounds());\n}\n\nloadData(dataUrl)\n</code></pre>"}, {"location": "labs/week7/4/", "title": "Changing basemaps", "text": "<p>Phew! That was a lot to go over! But now you should take sometime to think about the design choices we have to make as map makers. One important consideration is deciding on which basemap to use.</p> <p>Recall the code here:</p> <pre><code>L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n</code></pre>"}, {"location": "labs/week7/4/#explore-basemap-options", "title": "Explore basemap options", "text": "<p>Go to:</p> <ul> <li>https://leaflet-extras.github.io/leaflet-providers/preview/</li> </ul> <p>And pick a basemap that you like, a simple basemap with few colors is always preferred over a busy basemap:</p> <p>Busy</p> <p></p> <p>Less busy</p> <p></p> <p>API Keys</p> <p>Some may require an API Key and even try to charge you for views, it is recommend to avoid them if they do so, but you can learn more here on how to sign-up and use an API Key for the different Providers: https://github.com/leaflet-extras/leaflet-providers#providers</p> <p>Click on the basemap you prefer:</p> <p></p>"}, {"location": "labs/week7/4/#copy-the-basemap-code", "title": "Copy the basemap code", "text": "<p>Copy the <code>Plain JavaScript</code> in the middle: </p>"}, {"location": "labs/week7/4/#adding-the-basemap", "title": "Adding the basemap", "text": "<p>And put the code after <code>const map</code> delcaration in your <code>js/init.js</code> file:</p> js/init.js<pre><code>const map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map)\n\n// add layer control box\nL.control.layers(null,layers).addTo(map)\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n</code></pre> <p>Change the <code>var</code> to <code>let</code> and be sure to add the <code>variable</code> to your map, like so:</p> js/init.js<pre><code>const map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map)\n\n// add layer control box\nL.control.layers(null,layers).addTo(map)\n\n// L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n//     attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n// }).addTo(map);\n</code></pre> <p>Be sure to delete or comment out the other basemap, as you don\u2019t need two basemaps!</p>"}, {"location": "labs/week7/4/#final-check-point", "title": "\ud83c\udfc1Final check point", "text": "js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\nlet vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n\nlet layers = {\n    \"Vaccinated Respondent\": vaccinated,\n    \"Unvaccinated Respondent\": nonVaccinated\n}\n\nlet circleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\n// define the leaflet map\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\n// add layer control box\nL.control.layers(null,layers).addTo(map)\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map);\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        circleOptions.fillColor = \"red\"\n        vaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        circleOptions.fillColor = \"blue\"\n        nonVaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Non-Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n    vaccinated.addTo(map) // add our layers after markers have been made\n    nonVaccinated.addTo(map) // add our layers after markers have been made  \n    let allLayers = L.featureGroup([vaccinated,nonVaccinated]);\n    map.fitBounds(allLayers.getBounds());\n}\n\nloadData(dataUrl)\n</code></pre>"}, {"location": "labs/week7/4/#lab-assignment", "title": "Lab Assignment", "text": "<p>Alright! Now you should be ready to take on the lab assignment for the week!</p>"}, {"location": "labs/week7/4/#refactor-challenge", "title": "Refactor Challenge", "text": "<p>If you are up for an extra challenge, try to do the refactoring challenge!</p>"}, {"location": "labs/week7/5/", "title": "\u2705 Final Template Code", "text": "<p>Your final code should look like the following:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n        &lt;!-- Papa Parse --&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Covid Vaccination Stories\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;div id=\"placeForButtons\"&gt;&lt;/div&gt;\n                &lt;!-- Be sure to use your own survey here!!!!!!! --&gt;\n                &lt;div id=\"theSurvey\"&gt;\n                    &lt;div id=\"surveyButton\"&gt;\n                        &lt;a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform\"&gt;\ud83d\udcddTake the survey&lt;/a&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-template-rows: 50px auto auto;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    gap: 10px;\n}\n\nheader{\n    grid-area: header;\n    justify-self: center;\n    align-self: center;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n    display: grid;\n    grid-template-rows: 3fr 1fr; \n    grid-template-areas: \"buttonHome\" \"survey\"\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n\n#theSurvey{\n    grid-area: survey;\n    justify-self: center; /* added this to center the button in the div */\n}\n\n/* css for the button */\n#surveyButton{\n    padding: 15px 32px;\n    margin: 10px;\n    background-color: #4CAF50;\n    cursor: pointer;\n}\n\n/* css for button to get rid of the underline */\n#surveyButton a{\n    text-decoration: none; \n}\n\n#placeForButtons{\n    grid-area: buttonHome;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\nlet vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n\nlet layers = {\n    \"Vaccinated Respondent\": vaccinated,\n    \"Unvaccinated Respondent\": nonVaccinated\n}\n\nlet circleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\n// define the leaflet map\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\n// add layer control box\nL.control.layers(null,layers).addTo(map)\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map);\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        circleOptions.fillColor = \"red\"\n        vaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        circleOptions.fillColor = \"blue\"\n        nonVaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Non-Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n    vaccinated.addTo(map) // add our layers after markers have been made\n    nonVaccinated.addTo(map) // add our layers after markers have been made  \n    let allLayers = L.featureGroup([vaccinated,nonVaccinated]);\n    map.fitBounds(allLayers.getBounds());\n}\n\nloadData(dataUrl)\n</code></pre>"}, {"location": "labs/week7/refactor/", "title": "Extra Challenge: Refactoring", "text": "<p>Do you think there\u2019s a better way for us to create the feature groups instead of adding all this code in our <code>formatData</code> function?</p> <p>Yes, we should make a function to add each of the layers!</p> <p>Due to lack of time, we won\u2019t do any refactoring, so for now we will leave the inefficient way of repeating ourselves with the various <code>featureGroups</code>. But we must <code>refactor</code> our code if we want to add our own buttons to interact with the map instead of using the default Leaflet <code>control</code> functions.</p>"}, {"location": "labs/week7/refactor/#remember-refactoring", "title": "Remember refactoring?", "text": "<p>Refactoring code is means improving code so that it is easier to understand and easier to reuse. Refactoring is important because the less we repeat ourselves or hardcode things the less mistakes our code will have when we modify it.</p>"}, {"location": "labs/week7/refactor/#steps-to-refactor-the-group-layers-code", "title": "Steps to refactor the <code>group layers</code> code", "text": "<p>To refactor the <code>group layers</code> code you want to do the following:</p> <ol> <li>Create an array of <code>layers</code> by converting the <code>values</code> in the <code>layers</code> object to an array with <code>Object.values(layers)</code></li> </ol> <pre><code>// let layers = {\n//  \"Speaks English First\": englishFirst,\n//  \"Doesn't Speak English First\": nonEnglishFirst\n// }\n\n//this is the array of layers based on the layers object above\nlet layersArray = Object.values(layers); \n</code></pre> <ol> <li>Create a new <code>function</code> that set layers to the map</li> </ol> <pre><code>function setTheLayer(data){\n    if (data['Is your English your first language?'] == \"Yes\"){\n        return \"Speaks English First\"\n    }\n    else{\n        return \"Doesn't Speak English First\"\n    }\n}\n</code></pre> <ol> <li>Call the function to set the layer inside of the loop for each of the data:</li> </ol> <pre><code>function processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        let layer = setTheLayer(data)\n        addMarker(data)\n    })\n    let allLayers = L.featureGroup([englishFrist,nonEnglishFirst]);\n    map.fitBounds(allLayers.getBounds());  \n}\n</code></pre> <ol> <li>Have the <code>addMarker()</code> function use the <code>layer</code> set by the new function:</li> </ol> <pre><code>function processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        let layer = setTheLayer(data)\n        addMarker(data,layer)\n    })\n    let allLayers = L.featureGroup([englishFrist,nonEnglishFirst]);\n    map.fitBounds(allLayers.getBounds());  \n}\n</code></pre> <ol> <li> <p>Change the <code>addMarker()</code> function to use the <code>Layer</code> name to populate the pop-up title: <pre><code>function addMarker(data,layer){\n    layers[layer].addLayer(L.marker([data.lat,data.lng]).bindPopup(`&lt;h2&gt;${layer}&lt;/h2&gt;`))\n    createButtons(data.lat,data.lng,data.Location)\n    return data\n}\n</code></pre></p> </li> <li> <p>Change <code>allLayers</code> to use <code>layersArray</code> and loop through the layers with a <code>forEach()</code> loop on the <code>layersArray</code> and add them to the map</p> </li> </ol> <pre><code>function processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        let layer = setTheLayer(data)\n        addMarker(data,layer)\n    })\n    let allLayers = L.featureGroup(layersArray);\n    layersArray.forEach(layer =&gt; layer.addTo(map))\n    map.fitBounds(allLayers.getBounds());  \n}\n</code></pre> <p>Your refactored code should look like the following:</p>"}, {"location": "labs/week7/refactor/#final-refactored-code", "title": "Final Refactored Code", "text": "js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\nlet englishFirst = L.featureGroup();\nlet nonEnglishFirst = L.featureGroup();\n\nlet layers = {\n    \"Speaks English First\": englishFirst,\n    \"Doesn't Speak English First\": nonEnglishFirst\n}\n\n//this is the array of layers based on the layers object above\nlet layersArray = Object.values(layers); \n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vS2WyfKTyZJ-_ja3GGrxoAXwranavyDGXYsxeFUO4nvHpCJrkKhChymXQqUEyhdGLnz9VN6BJv5tOjp/pub?gid=1560504149&amp;single=true&amp;output=csv\"\n\n// define the leaflet map\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\n// add layer control box\nL.control.layers(null,layers).addTo(map)\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map);\n\nfunction addMarker(data,layer){\n    layers[layer].addLayer(L.marker([data.lat,data.lng]).bindPopup(`&lt;h2&gt;${layer}&lt;/h2&gt;`))\n    createButtons(data.lat,data.lng,data.Location)\n    return data\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        let layer = setTheLayer(data)\n        addMarker(data,layer)\n    })\n    let allLayers = L.featureGroup(layersArray);\n    layersArray.forEach(layer =&gt; layer.addTo(map))\n    map.fitBounds(allLayers.getBounds());  \n}\n\nfunction setTheLayer(data){\n    if (data['Is your English your first language?'] == \"Yes\"){\n        return \"Speaks English First\"\n    }\n    else{\n        return \"Doesn't Speak English First\"\n    }\n}\n\nloadData(dataUrl)\n</code></pre>"}, {"location": "labs/week8/", "title": "Collaborating with GitHub and Plugins", "text": "<p>The goal of this lab is to get more familiar with coding for your final group projects. l</p> <p>Goals</p> <ul> <li>Clone a new repository</li> <li>Create a new branch</li> <li>Add a new Leaflet plugin</li> <li>Create a pull request</li> <li>Install and test the live share extension</li> </ul>"}, {"location": "labs/week8/#lab-overview", "title": "Lab Overview", "text": "<ol> <li>Cloning a new repository</li> <li>Creating a new branch</li> <li>Adding a new Leaflet plugin</li> <li>Creating a pull request</li> <li>Installing and testing the live share extension</li> </ol> <p>This lab will start by cloning a new repository from the <code>git practicing repo</code> here:</p> <ul> <li>https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing/</li> </ul> <p>The git link to be cloned is here:</p> <pre><code>https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing.git\n</code></pre> <p>Note: This is similar to cloning your group projects repository to your local machine if you have not done so already.</p>"}, {"location": "labs/week8/1/", "title": "Clone a new repo", "text": "<p>We will be working with the terminal a bit today, so let\u2019s open up the terminal by going to the menu bar:</p> <p></p> <p>Then clicking on <code>New Terminal</code>:</p> <p></p> <p>Start by cloning this repo:</p> <pre><code>git clone https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing.git\n</code></pre> <p>Watch where you run terminal commands!</p> <p>Make sure to note that where you run the terminal command is where the <code>git clone</code> will run and thus copy the folder into. DO NOT run this inside of another repository or you will create a lot of problems and break your git capabilities.</p> <p>Navigating the Terminal/Command Prompt</p> <ul> <li>To move up a directory use <code>cd ..</code></li> <li>To see what directory and files type in Mac/Linux: <code>ls</code> or Windows: <code>dir</code> </li> <li>To make a directory use <code>mkdir aNewFolderName</code></li> <li>To move into a directory use <code>cd aNewFolderName</code></li> </ul> <p>Here are the basic git commands for adding new changes:</p> <pre><code>git add .\ngit commit -am \"message\"\ngit push\n</code></pre> <p>These commands are identical to what we do in the source control tab in VS Code:</p> <p></p> <ol> <li>Is the <code>git add .</code></li> <li>Is the <code>git commit</code> with a <code>message</code></li> <li>Is the <code>git push</code></li> </ol>"}, {"location": "labs/week8/2/", "title": "Working with <code>branches</code>", "text": ""}, {"location": "labs/week8/2/#making-a-new-branch", "title": "Making a new branch", "text": "<p><pre><code>git checkout -b helloNewBranch\n</code></pre> This creates a branch called <code>helloNewBranch</code> and switches to it!</p> <p>You can also make a new branch in VS Code by clicking this button:</p> <p></p> <p>You can then create a name for it </p>"}, {"location": "labs/week8/2/#git-add-your-changes-to-the-new-branch", "title": "<code>git add .</code> your changes to the new branch:", "text": "<p>Make some changes and add them to the branch: <pre><code>git add .\n</code></pre></p>"}, {"location": "labs/week8/2/#add-a-message-to-your-commit", "title": "Add a message to your commit", "text": "<pre><code>git commit -am \"message\"\n</code></pre>"}, {"location": "labs/week8/2/#push-your-changes-to-your-new-branch", "title": "Push your changes to your new branch", "text": "<p>This code creates a new branch called <code>helloNewBranch</code> on GitHub to push to:</p> <pre><code>git push --set-upstream origin helloNewBranch\n</code></pre> <p>You only need to run it when the branch DOES NOT exist on GitHub!!! After the branch is on GitHub, use only need to use <code>git push</code>:</p> <pre><code>git push\n</code></pre>"}, {"location": "labs/week8/2/#updating-your-branch", "title": "Updating your branch", "text": "<p>Sometimes you want to make sure your branch is up to date, so you can use the following command: <pre><code>git merge &lt;branch_you_want_to_merge&gt;\n</code></pre> For example this command will <code>merge</code> content from <code>main</code> to the branch I am currently on: <pre><code>git merge main\n</code></pre></p> <p>However!!!</p> <p>What happens when a <code>git push</code> affects in a file that was changed locally but someone else edited on GitHub?</p> <p>Refer to this medium post to learn more about git merges</p>"}, {"location": "labs/week8/2/#merge-conflicts", "title": "Merge Conflicts!!!", "text": "<p>A <code>merge conflict</code> occurs when one file was changed in two places. For example, Person A edits line 1 of <code>readme.md</code> and <code>Person B</code> also edits line 1 of <code>readme.md</code>. A <code>git</code> doesn\u2019t know which changes to keep, so a person needs to take a look and manually <code>merge</code> them.</p> <p>First, do a <code>git pull</code> which will check if you are behind a commit:</p> <pre><code>git pull\n</code></pre> <p>When your commit is behind, you may receive this message:</p> <pre><code>error: Your local changes to the following files would be overwritten by merge:\n        **SOME FILE(S)**\nPlease commit your changes or stash them before you merge.\nAborting\nUpdating 6ac38e2..4dbc13c\n</code></pre> <p>Do a git commit:</p> <pre><code>git add .\ngit commit -am \"message\"\ngit push\n</code></pre> <p>After you try to push, this message should pop-up:</p> <pre><code>error: failed to push some refs to 'https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.```\n</code></pre> <p>Run another <code>git pull</code></p> <pre><code>git pull\n</code></pre> <p>If files didn\u2019t change at the same time, then auto-merging could take place.</p> <p>Then proceed to push as normal:</p> <pre><code>git push\n</code></pre> <p>If files did change at the same time, you have to choose which version to keep:</p> <p></p> <p>After choosing an option, you can can push as normal:</p> <pre><code>git push\n</code></pre> <p>With a better understanding of <code>branches</code> and <code>merge conflicts</code>, now we can go ahead and test some new features without worrying about blowing up our repository!</p>"}, {"location": "labs/week8/3/", "title": "Adding a new Leaflet JavaScript Plugin", "text": "<p>The optional part of the previous lab was to change the basemap. </p> <p>Taking that one step further we can add brand-new functionality to our maps.</p> <p>While the Leaflet provider is a plug-in of basemaps for Leaflet, there are many plugins that we can use to add extra functionality to our mapplication in JavaScript as well. Here are some examples:</p>"}, {"location": "labs/week8/3/#visualizations", "title": "Visualizations", "text": "<ul> <li>Turf.js</li> <li>Charts</li> </ul>"}, {"location": "labs/week8/3/#general-javascript-functions", "title": "General JavaScript Functions", "text": "<ul> <li>Scrollama</li> </ul>"}, {"location": "labs/week8/3/#leaflet-related", "title": "Leaflet Related", "text": "<ul> <li>Leaflet Plugins</li> <li>Leaflet Cluster Markers</li> </ul> <p>To keep things simple, we will add a cluster marker functionality to our Leaflet map. Clustering makes it easier to see when multiple points are in the same area.</p> <p>With just a few changes our map will look as follows: </p> <p>As with when we first used Leaflet we need to include the library, so in our html add the following lines:</p> <p>index.html <pre><code>        &lt;!-- Cluster Marker's CSS --&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css\" /&gt;\n        &lt;!-- Cluster Marker's JavaScript --&gt;\n        &lt;script src=\"https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js\"&gt;&lt;/script&gt;\n</code></pre></p> <p>Next, let\u2019s read the documentation on how to use the <code>cluster maker</code>:</p> <p></p> <p>Judging from this code, we might be able to simply change our group layers for the markers!</p> <p>Head over to our <code>init.js</code> file and find the following lines for our group layers:</p> js/init.js<pre><code>let vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n</code></pre> <p>Change it to:</p> js/init.js<pre><code>let vaccinated = L.markerClusterGroup();\nlet nonVaccinated = L.markerClusterGroup();\n</code></pre> <p>And\u2026 wow that\u2019s it!</p> <p>This flexibility is what makes opensource tools and plugins so great! However, be warned that not all plugins will be as simple to plug and play.</p> <p>Congrats!</p> <p>After you\u2019ve made this change the time has come to make a pull request!</p>"}, {"location": "labs/week8/4/", "title": "Pull Requests on GitHub", "text": "<p>On GitHub you may have seen this nagging icon a few times by now:</p> <p></p> <p>You will then be greeted by a new page where you can title, assign, comment, etc. about the pull request (or PR): </p> <p>and most importantly create a <code>pull request</code>:  After clicking the button to <code>create a new pull request</code> scroll down to the resulting page: </p> <p>You should be able to click on <code>merge</code> if your <code>pull request</code> has no <code>merge conflicts</code>: </p> <p>Click to <code>confirm</code> the auto merge: </p> <p>And now you can delete the branch: </p>"}, {"location": "labs/week8/4/#warning-merge-conflicts-do-not-allow-you-to-auto-merge-a-pull-request", "title": "Warning: Merge Conflicts do not allow you to auto-merge a Pull Request!", "text": "<p>Warning! Merge Conflicts pvrevent auto-merges of a Pull Request!</p> <p>You will be unable to <code>auto-merge</code> if there is a merge conflict, so refer to the <code>merge-conflict</code> steps in order to finish the <code>pull request</code>.</p>"}, {"location": "labs/week8/4/#completed-pull-request", "title": "Completed Pull Request", "text": "<p>Your completed pull request should look like the following: </p>"}, {"location": "labs/week8/5/", "title": "<code>Live Share</code> The VS Code Plugin for Collaboration", "text": "<p>Make sure you have installed the Live Share extension by going to the following link and clicking on \u201cInstall\u201d: </p> <p>https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare</p> <p></p> <p>You can read the documentation to learn more about Live Share and what it does too:</p> <p>https://docs.microsoft.com/en-us/visualstudio/liveshare/</p> <p>After installing Live Share, you can join a session with these steps:</p>"}, {"location": "labs/week8/5/#joining-a-live-share-session", "title": "Joining a live share session", "text": ""}, {"location": "labs/week8/5/#1-click-on-the-join-url", "title": "1. Click on the Join url", "text": "<p>Click the session URL the host sent you, which will open it up in a browser. When prompted, allow your browser to launch VS Code</p>"}, {"location": "labs/week8/5/#2-sign-in-to-github", "title": "2. Sign in to GitHub", "text": "<p>Tip</p> <p>This will only need be done once.</p> <p>Click on the <code>Live Share</code> status bar item or press <code>Ctrl+Shift+P</code> / <code>Cmd+Shift+P</code> and select the <code>Live Share: Sign In With Browser</code> command. </p>"}, {"location": "labs/week8/5/#3-working-the-session", "title": "3. Working the session", "text": "<p>After you join, you\u2019ll be immediately presented with the file that the \u201chost\u201d has open, and can see their cursor and any edits they make.</p>"}, {"location": "labs/week8/5/#4-viewing-a-live-server", "title": "4. Viewing a live server", "text": "<p>If the host is sharing a live server of their website, you can view it on your local machine by clicking on the live share button:</p> <p></p> <p>Then you can click on any server under <code>Shared Servers</code>, such as <code>localhost:8000</code> to open it: </p> <p></p>"}, {"location": "labs/week8/5/#hosting-a-live-share-session", "title": "Hosting a live share session", "text": "<p>Live Server and Live Share</p> <p>To make previewing content easier, always remember to start a <code>Live Server</code> before starting a <code>Live Server</code> session!</p> <p>Click the \u201clive share\u201d button to immediately start sharing your coding session.</p> <p></p> <p>An invitation link will automatically be copied to your clip board, you can invite anyone to join your session by sharing it. </p> <p>You can join your own collaboration session by clicking the link yourself. open it in any browser to join your session.</p>"}, {"location": "labs/week8/5/#saving-changes", "title": "Saving Changes", "text": "<p>The host can commit changes by clicking on the source control tab in VS Code when they are done with the session.</p> <p></p>"}, {"location": "labs/week8/5/#final-checkpoint", "title": "\ud83c\udfc1Final Checkpoint", "text": "<ol> <li> <p>Make sure you have live share and live server installed to make collaboration easier.</p> </li> <li> <p>Be sure to have made a pull request to the GitPracticing repo!</p> </li> </ol> <p>Congrats on finishing the lab! There is no assignment, so you can focus on the Group Assignment #5 due next week.</p>"}, {"location": "labs/week9-10/", "title": "Final Finishing Touches", "text": "<p>The goal of this lab is to get more familiar with coding for your final group projects.</p> <p>Goals</p> <ul> <li>Touch up our map with a legend</li> <li>Revisiting CSS Grid!</li> <li>Add another new Leaflet plugin</li> </ul> <p></p>"}, {"location": "labs/week9-10/#lab-outline", "title": "Lab outline", "text": "<ol> <li>Legendary Additions!</li> <li>Revisiting CSS Grid</li> <li>Adding another Leaflet plugin</li> <li>Final Lab Code</li> </ol>"}, {"location": "labs/week9-10/#starting-template-code-for-final-lab-lab-9", "title": "Starting template code for final lab (lab #9)", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n        &lt;!-- Papa Parse --&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Covid Vaccination Stories\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;div id=\"placeForButtons\"&gt;&lt;/div&gt;\n                &lt;!-- Be sure to use your own survey here!!!!!!! --&gt;\n                &lt;div id=\"theSurvey\"&gt;\n                    &lt;div id=\"surveyButton\"&gt;\n                        &lt;a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform\"&gt;\ud83d\udcddTake the survey&lt;/a&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-template-rows: 50px auto auto;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    gap: 10px;\n}\n\nheader{\n    grid-area: header;\n    justify-self: center;\n    align-self: center;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n    display: grid;\n    grid-template-rows: 3fr 1fr; \n    grid-template-areas: \"buttonHome\" \"survey\"\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n\n#theSurvey{\n    grid-area: survey;\n    justify-self: center; /* added this to center the button in the div */\n}\n\n/* css for the button */\n#surveyButton{\n    padding: 15px 32px;\n    margin: 10px;\n    background-color: #4CAF50;\n    cursor: pointer;\n}\n\n/* css for button to get rid of the underline */\n#surveyButton a{\n    text-decoration: none; \n}\n\n#placeForButtons{\n    grid-area: buttonHome;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5}\n\nlet vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n\nlet layers = {\n    \"Vaccinated Respondent\": vaccinated,\n    \"Unvaccinated Respondent\": nonVaccinated\n}\n\nlet circleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\"\n\n// define the leaflet map\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\n// add layer control box\nL.control.layers(null,layers).addTo(map)\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map);\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        circleOptions.fillColor = \"red\"\n        vaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        circleOptions.fillColor = \"blue\"\n        nonVaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Non-Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n}\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n    vaccinated.addTo(map) // add our layers after markers have been made\n    nonVaccinated.addTo(map) // add our layers after markers have been made  \n    let allLayers = L.featureGroup([vaccinated,nonVaccinated]);\n    map.fitBounds(allLayers.getBounds());\n}\n\nloadData(dataUrl)\n</code></pre>"}, {"location": "labs/week9-10/1/", "title": "Legendary Additions!", "text": "<p>Let\u2019s start by making our legend not collapsable:</p> <p>Change the <code>L.control.layers(null,layers).addTo(map)</code> on line 27 to:</p> <pre><code>L.control.layers(null,layers,{collapsed:false}).addTo(map)\n</code></pre> <p>We can do better though and add an actual legend. Notice the <code>let layers ={}</code> object right above the <code>L.control</code> that we changed. The properties in there <code>Vaccinated</code> and <code>Non-Vaccinated</code> are actually HTML content that controls how the layers are displayed.</p> <p>We will add a <code>&lt;svg&gt;</code> which is an <code>svg</code> element.  Our <code>layers</code> object should look like the following:</p> <pre><code>let layers = {\n    \"Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='red' /&gt;&lt;/svg&gt;\": vaccinated,\n    \"Non-Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='blue' /&gt;&lt;/svg&gt;\": nonVaccinated\n}\n</code></pre> <p>A much more useful legend should appear. As mentioned before, I\u2019m not a big fan of the Leaflet legend, as there are many more user friendly ways to display a legend, like having the a different <code>&lt;div&gt;</code> on the page.</p>"}, {"location": "labs/week9-10/1/#why-are-legends-important", "title": "Why are legends important?", "text": "<p>Legends are an element of cartographic (mapmaking) that provide context into what is represented on the map. This makes sure as we construct our narrative that people know what is represented on the map and do not have to guess what is being shown.</p> <p>Since legends are so important, many people have implemented different versions of a legend on Leaflet!</p> <p>Cartographic Design Principles</p> <p>You can read more about color, type, and other cartographic design principles here:https://saylordotorg.github.io/text_essentials-of-geographic-information-systems/s13-cartographic-principles.html.</p>"}, {"location": "labs/week9-10/2/", "title": "Revisiting layouts with CSS Grid", "text": "<p>Before we get into adding new plugins, CSS Grid is a powerful way to control how functionality relates to each other. Remember that the flexibility of grid helps to make sure that specific <code>rows</code> or <code>columns</code> are able to be targeted no matter what plugins we use.</p> <p>Remember, anytime you see a <code>display: grid</code> in CSS, like the following:</p> <pre><code>body{\n    display: grid;\n}\n</code></pre> <p>This means a <code>CSS grid</code> is in use there.</p> <p>Anytime you see <code>grid-area</code> that means this HTML Element is within a grid container, for example:</p> <pre><code>#the_map{\n    height:80vh;\n    grid-area: main_map;\n    }\n</code></pre> <p>At this point, it may help to think of CSS grid as adding grid-lines to a piece of paper, where the piece of paper is our webpage, and grid-area is the content we wish to add to the grid. </p> <p>!!! note \u201c<code>CSS Grid</code> vs. <code>flexbox</code>     CSS Grid (Grid) is different from flexbox, which is another way to control the layout of content. flexbox only allows you to control \u201crows\u201d or \u201ccolumns\u201d and is good for that. While Grid is good for controlling both \u201crows\u201d and \u201ccolumns\u201d. You can read more about the differences here in this 2017 CSS-tricks article: https://css-tricks.com/css-grid-replace-flexbox/</p> <p>In order to put content that fits in our grid-lines we need to make sure the <code>html content</code> and <code>div</code>s that we want to be aligned are within the areas that the grid covers!</p>"}, {"location": "labs/week9-10/2/#creating-a-css-grid-legend", "title": "Creating a CSS Grid Legend", "text": "<p>Let\u2019s revisit our <code>index.html</code> and create a new <code>div</code> element on the map layer called with an id of <code>legend</code>:</p> index.html<pre><code>        &lt;div id=\"the_map\"&gt;\n            &lt;div id=\"legend\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n</code></pre>"}, {"location": "labs/week9-10/2/#adding-our-legendary-html", "title": "Adding our legendary HTML", "text": "<p>Instead of using Leaflet to populate the legend HTML we can directly create the same legend in our HTML while using <code>div</code>s to make sure the content doesn\u2019t overlap:</p> index.html<pre><code>    &lt;div&gt;\n        Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='red' /&gt;&lt;/svg&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        Non-Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='blue' /&gt;&lt;/svg&gt;\n    &lt;/div&gt;\n</code></pre> <p>This should all go into the <code>div</code> for the <code>legend</code> as follows:</p> index.html<pre><code>        &lt;div id=\"the_map\"&gt;&lt;/div&gt;\n            &lt;div id=\"legend\"&gt;\n                &lt;div&gt;\n                    Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='red' /&gt;&lt;/svg&gt;\n                &lt;/div&gt;\n                &lt;div&gt;\n                    Non-Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='blue' /&gt;&lt;/svg&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n</code></pre>"}, {"location": "labs/week9-10/2/#what-z-heck", "title": "What Z-heck?", "text": "<p>Unfortunately, the Leaflet map has a higher <code>Z-index</code> than our <code>legend</code> div so we need to use CSS to make our <code>Z-index</code> higher for the legend. If you think of a webpage as height being y-value, width being x-values, then the stacking of content is controlled by the Z-index. </p> <p>Basically, a <code>**Z-index**</code> is value that controls which layers are on-top of other layers in a webpage.</p> <p>We will change this in our style.css and make some other nice tweaks in the process:</p> styles/style.css<pre><code>#legend{\n    z-index: 9999;\n    background-color: white;\n    padding: 10px;\n    position: relative;\n}\n</code></pre> <p>In our <code>style.css</code> we will turn the map into a 3 by 3 grid as follows:</p> styles/style.css<pre><code>#the_map{\n    height:80vh;\n    grid-area: main_map;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n} \n</code></pre>"}, {"location": "labs/week9-10/2/#reminder-inspecting-our-grid", "title": "Reminder: <code>Inspecting</code> our grid", "text": "<p>Remember, in FireFox we can right click, choose <code>Iinspect element</code> and in <code>Inspector</code> go to <code>Layout</code> and check our grid to see it:</p> <p></p> <p>When the checkmark is checked, it should look like the following:</p> <p></p>"}, {"location": "labs/week9-10/2/#why-the-minmax01fr-instead-of-just-1fr", "title": "Why the <code>minmax(0,1fr)</code> instead of just <code>1fr</code>?", "text": "<p>If you do <code>1fr</code> then you run the risk of images and other content overflowing and not respecting the grid when it is empty. You can read more about it here:</p> <ul> <li>https://css-tricks.com/preventing-a-grid-blowout/</li> </ul>"}, {"location": "labs/week9-10/2/#reminder-justifying-and-aligning-our-content", "title": "Reminder: Justifying and aligning our content", "text": "<p>While in the <code>#map</code> lets make sure our content fits in the middle of our grid by using <code>align-items: center</code> and <code>justify-items: center</code>. Align is used for horizontal alignment and justify is used for vertical adjustments. You can read more about align and justify here:</p> <ul> <li>https://www.digitalocean.com/community/tutorials/css-align-justify</li> </ul> styles/style.css<pre><code>#the_map{\n    height:80vh;\n    grid-area: main_map;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n    align-items: center;\n    justify-items: center;  \n}  \n</code></pre>"}, {"location": "labs/week9-10/2/#alternative-positions-for-alignjustify", "title": "Alternative positions for align/justify!", "text": "<p>Sometimes you\u2019d want to change your vertical alignment and horizontal justification of an item in CSS grid, so here is a table describing some of the common possibilities:</p> Style Property Target Description <code>align-items:</code> <code>start;</code> vertical top align an item in the row <code>align-items:</code> <code>center;</code> vertical middle align an item in the row <code>align-items:</code> <code>end;</code> vertical bottom align an item in the row <code>justify-items:</code> <code>start;</code> horizontal left justify an item in the column <code>justify-items:</code> <code>left;</code> horizontal left justify an item in the column <code>justify-items:</code> <code>center;</code> horizontal middle justify an item in the column <code>justify-items:</code> <code>end;</code> horizontal right justify an item in the column <code>justify-items:</code> <code>right;</code> horizontal right justify an item in the column <p>For example, if you want the legend in our <code>css-grid</code> to be left aligned, you would need to use the following:</p> styles/style.css<pre><code>#the_map{\n    height:80vh;\n    grid-area: main_map;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n    align-items: center;\n    justify-items: start;  /* \"left\" can also work here */ \n}  \n</code></pre>"}, {"location": "labs/week9-10/2/#positioning-our-grid-html-elements-without-grid-areas", "title": "Positioning our grid HTML elements without <code>grid-areas</code>", "text": "<p>Instead of naming areas  like we have done in the past with <code>grid-areas</code> for the <code>header</code>, <code>main_map</code>, etc.:</p> <p><pre><code>#the_map{\n    height:80vh;\n    grid-area: main_map;\n}\n</code></pre> We can generically specify where HTML elements should go using the <code>grid-column</code> and <code>grid-row</code> CSS attributes.</p> <p>Let\u2019s practice this by adding the legend to the lower right corner of our map 3x3 grid, using the following CSS selector for <code>#legend</code>:</p> styles/style.css<pre><code>#legend{\n    z-index: 9999;\n    background-color: white;\n    padding: 10px;\n    grid-column: 1; /*!(1) */\n    grid-row: 3; /*!(2) */\n    position: relative;\n}\n</code></pre> <ol> <li><code>grid-column: 1;</code> says put this content into the first column!</li> <li><code>grid-row: 3;</code> says put this content into the 3rd row.</li> </ol> <p>Notice how <code>grid-column: 1</code> specifies the first column and <code>grid-row: 3</code> specifies the last row in our 3x3 grid layout.</p> <p>Our legendary style should now look like this:</p> <pre><code>#legend{\n    z-index: 9999;\n    background-color: white;\n    padding: 10px;    \n    grid-column: 1;\n    grid-row: 3;\n    position: relative;\n}\n</code></pre> <p>To span multiple rows or columns ontop of specifying a number you can do <code>grid-column: 1 / span 2;</code> which will make the content span 2 columns from the left to right!</p> styles/style.css<pre><code>#legend{\n    z-index: 9999;\n    background-color: white;\n    padding: 10px;\n    grid-column: 1 / span 2;\n    grid-row: 2;\n    position: relative; \n}\n</code></pre>"}, {"location": "labs/week9-10/2/#in-class-exercise-1-getting-css-griddy-with-it", "title": "\u26bdIn-class Exercise #1 - Getting CSS-Griddy with it!", "text": "<p>Practice using CSS Grid to change the location of the legend to the top right corner where the current Leaflet legend is. Try to make it span more than 1 column or row.</p> <p>Tasks</p> <ol> <li>Move our custom legend to the top right corner of our <code>#map</code> div.</li> <li>Remove the Leaflet Legend in the top right corner</li> <li>Bonus: See if you can right align the legend and make it span 3 columns</li> </ol> Answer styles/style.css<pre><code>#the_map{\n    height:80vh;\n    grid-area: main_map;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n    align-items: center;\n    justify-items: center;  \n}  \n\n#legend{\n    z-index: 9999;\n    background-color: white;\n    padding: 10px;    \n    grid-column: 1;\n    grid-row: 3;\n    position: relative;\n}\n</code></pre> js/init.js<pre><code>// add layer control box\n// L.control.layers(null,layers,{collapsed:false}).addTo(map)\n</code></pre> <p>Bonus answer: styles/style.css<pre><code>#the_map{\n    height:80vh;\n    grid-area: main_map;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n    align-items: center;\n    justify-items: start;  \n}  \n\n#legend{\n    z-index: 9999;\n    background-color: white;\n    padding: 10px;    \n    grid-column: 1 / span 3;\n    grid-row: 1;\n    position: relative;\n}\n</code></pre></p>"}, {"location": "labs/week9-10/2/#adding-an-event-listener", "title": "Adding an <code>event listener</code>", "text": "<p>If you want the legend to have the same functionality of turning on and off layers, we will need to add an event listener to the legend div with JavaScript.</p> <p>Remember: an event listener is a function that gets attached to an element when a particular action is done, usually a mouse \u201cclick\u201d:</p> sample event listener<pre><code>function aFunFunction(){\n    console.log(\"i did something fun!\")\n}\n\nconst element = document.getElementById(\"the_map\");\nelement.addEventListener(\"click\", aFunFunction);\n</code></pre> <p>This event listener will trigger <code>aFunFunction</code> each time the map is clicked!</p> <p>Let\u2019s add a useful event listener to each of our legend divs, but first we have to give a unique ID to each legend element:</p> index.html<pre><code>            &lt;div id=\"legend\"&gt;\n                &lt;div id=\"vaccinatedLegend\"&gt;\n                    Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='red' /&gt;&lt;/svg&gt;\n                &lt;/div&gt;\n                &lt;div id=\"nonvaccinatedLegend\"&gt;\n                    Non-Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='blue' /&gt;&lt;/svg&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n</code></pre>"}, {"location": "labs/week9-10/2/#optional-checkbox", "title": "Optional: Checkbox!", "text": "<p>If you want to completely copy the Leaflet legend style with a check box, you can add the following code in front of the div for the legend:</p> <pre><code>&lt;input type=\"checkbox\" id=\"vaccinatedCheckbox\" checked&gt;\n</code></pre> <p>Checked?</p> <p>We add the <code>checked</code> attribute in <code>&lt;input type=\"checkbox\" id=\"vaccinatedCheckbox\" checked&gt;</code> to ensure that our check box is checked at the beginning of page load.</p> <p>The code should look as follows:</p> index.html<pre><code>            &lt;div id=\"legend\"&gt;\n                &lt;div id=\"vaccinatedLegend\"&gt;\n                    &lt;input type=\"checkbox\" id=\"vaccinatedCheckbox\" checked&gt;\n                    Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='red' /&gt;&lt;/svg&gt;\n                &lt;/div&gt;\n                &lt;div id=\"nonvaccinatedLegend\"&gt;\n                    &lt;input type=\"checkbox\" id=\"nonVaccinatedCheckbox\"&gt;\n                    Non-Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='blue' /&gt;&lt;/svg&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n</code></pre> <p>To make the whole text toggle on and off the checkbox you have to wrap our text and svg in a <code>label</code> tag and tell it which checkbox it is <code>for</code> using the <code>for</code>-attribute:</p> <pre><code>    &lt;div id=\"vaccinatedLegend\"&gt;\n        &lt;input type=\"checkbox\" id=\"vaccinatedCheckbox\"&gt;\n        &lt;label for=\"vaccinatedCheckbox\"&gt;\n            Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='red' /&gt;&lt;/svg&gt;\n        &lt;/label&gt;\n    &lt;/div&gt;\n    &lt;div id=\"nonvaccinatedLegend\"&gt;\n        &lt;input type=\"checkbox\" id=\"nonVaccinatedCheckbox\"&gt;\n        &lt;label for=\"nonVaccinatedCheckbox\"&gt;\n            Non-Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='blue' /&gt;&lt;/svg&gt;\n        &lt;/label&gt;\n    &lt;/div&gt;\n</code></pre> <p>Lastly, we need to change our event listener in our JavaScript to target the check box ID instead of the legend ID:</p> js/init.js<pre><code>const vaccinatedLegendHTML = document.getElementById(\"vaccinatedCheckbox\");\nconst nonvaccinatedLegendHtml = document.getElementById(\"nonVaccinatedCheckbox\");\n</code></pre>"}, {"location": "labs/week9-10/2/#add-layersremove-layers", "title": "Add Layers/Remove Layers", "text": "<p>Since we have feature groups, we can use Leaflet to add or remove them from the map using the following:</p> <p><code>map.removeLayer('Layer I want to remove')</code></p> <p>We will add 2 event listeners, one for each layer and the JavaScript should be as follows:</p> js/init.js<pre><code>// get the legend HTML checkbox 'vaccinatedCheckbox` to target\nconst vaccinatedLegendHTML = document.getElementById(\"vaccinatedCheckbox\");\n\n// add the event listener for the click\nvaccinatedLegendHTML.addEventListener(\"click\",toggleVaccinatedLayer) \n\n// our function to toggle on/off for english legend's group layer\nfunction toggleVaccinatedLayer(){\n    if(map.hasLayer(vaccinated)){\n        map.removeLayer(vaccinated)\n    }\n    else{\n        map.addLayer(vaccinated)\n    }\n}\n\n// target the nonVaccinatedCheckbox div\nconst nonvaccinatedLegendHtml = document.getElementById(\"nonVaccinatedCheckbox\");\n\n// add the event listener for the click\nnonvaccinatedLegendHtml.addEventListener(\"click\",toggleNonVaccinatedLayer) \n\n// toggle the legend for nonvaccinatedLegend grouplayer\nfunction toggleNonVaccinatedLayer(){\n    if(map.hasLayer(nonVaccinated)){\n        map.removeLayer(nonVaccinated)\n    }\n    else{\n        map.addLayer(nonVaccinated)\n    }\n}\n</code></pre>"}, {"location": "labs/week9-10/3/", "title": "Final Lab Code", "text": "<p>Up to this point, your lab code should look like the following:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n        &lt;!-- Papa Parse --&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Covid Vaccination Stories\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n            &lt;div id=\"contents\"&gt;\n                &lt;div id=\"placeForButtons\"&gt;&lt;/div&gt;\n                &lt;!-- Be sure to use your own survey here!!!!!!! --&gt;\n                &lt;div id=\"theSurvey\"&gt;\n                    &lt;div id=\"surveyButton\"&gt;\n                        &lt;a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfcElv5dlXInR7XHQz27_OcYJlWcIUr-GBbc-ocefWlGd1uXg/viewform\"&gt;\ud83d\udcddTake the survey&lt;/a&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div id=\"the_map\"&gt;\n                &lt;div id=\"legend\"&gt;\n                    &lt;div id=\"legend\"&gt;\n                        &lt;div id=\"vaccinatedLegend\"&gt;\n                            &lt;input type=\"checkbox\" id=\"vaccinatedCheckbox\"&gt;\n                            &lt;label for=\"vaccinatedCheckbox\"&gt;\n                                Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='red' /&gt;&lt;/svg&gt;\n                            &lt;/label&gt;\n                        &lt;/div&gt;\n                        &lt;div id=\"nonvaccinatedLegend\"&gt;\n                            &lt;input type=\"checkbox\" id=\"nonVaccinatedCheckbox\"&gt;\n                            &lt;label for=\"nonVaccinatedCheckbox\"&gt;\n                                Non-Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='blue' /&gt;&lt;/svg&gt;\n                            &lt;/label&gt;\n                        &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2023)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'center': [34.0709,-118.444],'zoom':5};\n\nlet vaccinated = L.featureGroup();\nlet nonVaccinated = L.featureGroup();\n\nlet layers = {\n    \"Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='red' /&gt;&lt;/svg&gt;\": vaccinated,\n    \"Non-Vaccinated &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='blue' /&gt;&lt;/svg&gt;\": nonVaccinated\n}\n\nlet circleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n};\n\nconst dataUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSNq8_prhrSwK3CnY2pPptqMyGvc23Ckc5MCuGMMKljW-dDy6yq6j7XAT4m6GG69CISbD6kfBF0-ypS/pub?output=csv\";\n\nconst vaccinatedLegendHTML = document.getElementById(\"vaccinatedCheckbox\");\nconst nonVaccinatedLegendHtml = document.getElementById(\"nonVaccinatedCheckbox\");\n\nconst map = L.map('the_map').setView(mapOptions.center, mapOptions.zoom);\n\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map);\n\n// add layer control box\n// L.control.layers(null,layers,{collapsed:false}).addTo(map)\n\nfunction addMarker(data){\n    if(data['Have you been vaccinated?'] == \"Yes\"){\n        circleOptions.fillColor = \"red\"\n        vaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n        }\n    else{\n        circleOptions.fillColor = \"blue\"\n        nonVaccinated.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Non-Vaccinated&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data['What zip code do you live in?'])\n    }\n    return data\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('placeForButtons')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n\nfunction loadData(url){\n    Papa.parse(url, {\n        header: true,\n        download: true,\n        complete: results =&gt; processData(results)\n    })\n};\n\nfunction processData(results){\n    console.log(results)\n    results.data.forEach(data =&gt; {\n        console.log(data)\n        addMarker(data)\n    })\n    vaccinated.addTo(map) // add our layers after markers have been made\n    nonVaccinated.addTo(map) // add our layers after markers have been made  \n    let allLayers = L.featureGroup([vaccinated,nonVaccinated]);\n    map.fitBounds(allLayers.getBounds());\n};\n\nloadData(dataUrl)\n\n// toggle the legend for vaccinatedLegend grouplayer\nvaccinatedLegendHTML.addEventListener(\"click\",toggleVaccinatedLayer) \n\nfunction toggleVaccinatedLayer(){\n    if(map.hasLayer(vaccinated)){\n        map.removeLayer(vaccinated)\n    }\n    else{\n        map.addLayer(vaccinated)\n    }\n}\n\n// add the event listener for the click\nnonvaccinatedLegendHtml.addEventListener(\"click\",toggleNonVaccinatedLayer) \n\n// toggle the legend for nonvaccinatedLegend grouplayer\nfunction toggleNonVaccinatedLayer(){\n    if(map.hasLayer(nonVaccinated)){\n        map.removeLayer(nonVaccinated)\n    }\n    else{\n        map.addLayer(nonVaccinated)\n    }\n}\n</code></pre> styles/style.css<pre><code>body{\n    display: grid;\n    grid-template-rows: 50px auto auto;\n    grid-template-areas: \"header\" \"main_content\" \"footer\";\n    background-color: aqua;\n    gap: 10px;\n}\n\nheader{\n    grid-area: header;\n    justify-self: center;\n    align-self: center;\n}\n\n#footer{\n    grid-area: footer;\n}\n\n.main{\n    grid-area: main_content;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \"main_map content\";\n    display: grid;\n}\n\n#contents{\n    grid-area: content;\n    display: grid;\n    grid-template-rows: 3fr 1fr; \n    grid-template-areas: \"buttonHome\" \"survey\"\n}\n\n#the_map{\n    height:80vh;\n    grid-area: main_map;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n    align-items: center;\n    justify-items: right;  \n}\n\n#legend{\n    z-index: 9999;\n    background-color: white;\n    padding: 10px;    \n    grid-column: 1 / span 3;\n    grid-row: 1; \n}\n\n#theSurvey{\n    grid-area: survey;\n    justify-self: center; /* added this to center the button in the div */\n}\n\n/* css for the button */\n#surveyButton{\n    padding: 15px 32px;\n    margin: 10px;\n    background-color: #4CAF50;\n    cursor: pointer;\n}\n\n/* css for button to get rid of the underline */\n#surveyButton a{\n    text-decoration: none; \n}\n\n#placeForButtons{\n    grid-area: buttonHome;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n</code></pre>"}, {"location": "labs/week9-10/4/", "title": "Final In-class exercise Prep", "text": "<p>For the in-class exercise, we will use the <code>git practicing repo</code> located here:</p> <ul> <li>https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing/</li> </ul> <p>The <code>git</code> link to clone is here:</p> <pre><code>https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing.git\n</code></pre> <p>Remember: We did this in <code>week 8</code> and this is similar to what you would do for cloning your group projects if you have not done so already!</p>"}, {"location": "labs/week9-10/4/#accept-the-invite-to-collaborate-on-the-repo", "title": "Accept the invite to collaborate on the repo", "text": "<p>You should have recieved an email to collaborate on the repository already, if not click the link below while logged into your GitHub account:</p> <p>https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing/invitations</p> <p>Then click the accept invite button:</p> <p></p>"}, {"location": "labs/week9-10/4/#updating-the-repo", "title": "Updating the repo", "text": "<p>Remember to always run <code>git pull</code> in the terminal to update your <code>git repository</code> with what is on GitHub.</p> <pre><code>git pull\n</code></pre> <p>If you don\u2019t want to use the terminal, you can also click the following button on VS Code to <code>push</code> AND pull updates:</p> <p></p>"}, {"location": "labs/week9-10/4/#update-branches", "title": "Update branches", "text": "<p>If you have other branches on the repo, you can update branches by typing the following command in the terminal:</p> <pre><code>git fetch --all\n</code></pre> <p></p> <p>Now that we have a better sense of how to use CSS grid, we can think about how to fit other libraries and tools.</p> <p>Evaluating the right libraries and tools for the task is an important part of being a web developer that is both ethically minded and able to contribute back to meaningful projects. </p>"}, {"location": "labs/week9-10/4/#turfjs", "title": "Turf.js", "text": "<p> https://turfjs.org/</p> <p>Turfjs is useful for running spatial analysis in our mapplications.</p> <p>Here is my example repo using Turf.js to count the number of points inside a particular boundary:</p> <p>https://github.com/albertkun/leaflet-tufjs-spatial-join</p>"}, {"location": "labs/week9-10/4/#chartjs", "title": "Chart.js", "text": "<p>https://www.chartjs.org/</p> <p>Chartjs is useful (but complex) library for creating charts in our mapplications.</p> <p>Below is an example repository demonstrating how to use Chartjs with your Leaflet data: https://github.com/albertkun/leaflet-chartjs</p>"}, {"location": "labs/week9-10/4/#geojsonio", "title": "GeoJSON.io", "text": "<p>http://geojson.io/</p> <p>Remember this tool? GeoJSON.io is useful for creating, converting, or quickly editing spatial data online.</p>"}, {"location": "labs/week9-10/4/#mapshaper", "title": "MapShaper", "text": "<p>https://mapshaper.org/</p> <p>This online tool helps to reduce file sizes of GeoJSONs and do other geoprocessing of GIS data:</p> <p>Main Tip: Choose the right tool for the job!</p>"}, {"location": "labs/week9-10/4/#w3-schools-for-building-content-from-scratch", "title": "W3 Schools for Building Content from scratch", "text": "<p>https://www.w3schools.com/howto/default.asp</p> <p>Similar to Mozilla Developer Network for documentation, W3 schools provides a lot of nice how-to tutorials on how to implement common website features, interfaces, and functions.</p>"}, {"location": "labs/week9-10/4/#extending-leaflet-with-plugins", "title": "Extending Leaflet with Plugins", "text": "<p>Owing to the opensource nature of Leaflet, people have written many reusable tools to help with common tasks. As a matter of fact, if you have written a function for Leaflet that you think is reusable, you can go ahead and submit to their list of plugins too! Ah, the awesomeness of open source!</p>"}, {"location": "labs/week9-10/4/#remember-balance-open-source-with-an-open-and-ethical-mind", "title": "Remember! Balance Open Source with an open and ethical mind", "text": "<p>Of course, open source has its drawbacks too, learning to customize someone elses poorly written code with poor documentation can be a huge timesink.</p> <p>Balancing the trade-off between trying to reuse someone\u2019s code and creating your own is an important step in becoming a seasoned developer!</p> <p>Working within and with other projects bring us to our final lab topic of utilizing other people\u2019s Leaflet widgets and plugins.</p>"}, {"location": "labs/week9-10/5/", "title": "Final Lab Assignment \ud83d\udc69\u200d\ud83d\udcbb", "text": "<p>Note</p> <p>This is a group assignment. Only one person per group needs to do this.</p> <p>Join up with your group. With the remaining time, look at some of the plugins below and try to implement them into your mapplication or your own group projects:</p>"}, {"location": "labs/week9-10/5/#due-68-if-not-done-in-class", "title": "Due 6/8 (if not done in class)", "text": ""}, {"location": "labs/week9-10/5/#instructions", "title": "Instructions", "text": "<ol> <li>Go to the Git Practicing repo and do a <code>git pull</code> (if you have not cloned it already, then clone it). If you run into errors on the branch, you may need to run <code>git pull --rebase</code></li> <li>Try out one of the following Leaflet plugins from the list below OR explore one from this list and add to the end of the table: https://leafletjs.com/plugins.html</li> <li>Find your group in the table, put the tool name, and comments about the tool, Plugin Review section below.</li> <li>Optional: If you were able to get the example up and running, put your GitHub pages example under the \u201cExample Implementation\u201d.</li> <li>Make a Pull Request to this Git Practing Repo and contribute your changes!</li> </ol>"}, {"location": "labs/week9-10/5/#plugin-list", "title": "Plugin List", "text": "Plugin Name Link UI Sidebar v2 https://github.com/noerw/leaflet-sidebar-v2 Sidebar v2 https://github.com/turbo87/sidebar-v2/ Leaflet Control Window https://github.com/mapshakers/leaflet-control-window Leaflet Sleep https://cliffcloud.github.io/Leaflet.Sleep/ Markers Beautify Marker https://github.com/masajid390/BeautifyMarker Icon Pulse https://github.com/mapshakers/leaflet-icon-pulse Parallax Marker https://dagjomar.github.io/Leaflet.ParallaxMarker/ Leaflet Swoopy https://wbkd.github.io/leaflet-swoopy/ Others Leaflet Hex Timeslider https://github.com/albertkun/leaflet_hex_timeslider <p>Leave a review of one of them in the Git-Practicing Repo:</p> <ul> <li>https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing/blob/main/review.md</li> </ul> <p>Feel free to try others not in this list and add it to the doc.</p> <p>Pay attention to how important good documentation is and how your own group projects <code>readme.md</code> should be structured. Creating a <code>branch</code> will be helpful when testing new features. Refer to lab 8 for a refresher on branches.</p>"}, {"location": "labs/week9-10/5/#submission", "title": "Submission", "text": "<p>As a group, have one person make a pull request in the following repo with your comments on a plugin:</p> <ul> <li>https://github.com/albertkun/23S-ASIAAM-191A-Git-Practicing/blob/main/review.md</li> </ul>"}, {"location": "weekly_materials/", "title": "Summary", "text": ""}, {"location": "weekly_materials/#weekly-overview", "title": "Weekly overview", "text": "Week Topic #1 GIS, Data, and Ethics  #2 Humanizing Technology  #3 Open Source and Web Mapping  #4 Science, Technology, and Ethics  #5 Community Development for Civil Society  #6 Human-Centered Design  #7 Our roles as facilitators  #8 Mentorship and collaboration  #9 Connecting activism, technology, and social change  #10 Beyond Web Development and GIS for social Change"}, {"location": "weekly_materials/#course-materials", "title": "Course Materials", "text": "Week Title Content Slides Recording 1 Introducing the course, GIS, data, and ethics Lecture Here Here 1 Hello World (Wide) Web Development Lab Here Here 2 Critical Cartography and Civil Society Lecture Here Here 2 JavaSCrypt of the Necrodancer Lab Here Here 3 Ethical Software and Developing for Civil Society Lecture Here Here 3 A little UX/I(e) and Geo-J-cieON Lab Here Here 4 Science, Technology, and Ethics Lecture Here Here 4 Google FORMulating Community Empowerment - 1 Lab Here Here 5 Connecting us with Community development Lecture Here Here 5 Loops and Google FORMulating Data Lab + Lecture Here Here 6 Lab #5 wrap-up &amp; Designing for Civil Society Lecture Here Here 6 Design DeciCSSions Lab Here Here 7 Putting the \u201cus\u201d in Design Justice Lecture Here Here 7 Conditionals, Map Layers, and Visual Design Lecture Here Here 8 Working together towards social change Lab/Lecture Here Here 8 Collaborating with GitHub and plugins Lab Here Here 9 Building and Sustaining Connections with Civil Society Lecture Here Here 9 Final Finishing Touches Lab Here Here"}, {"location": "weekly_materials/week01/", "title": "Week 1 - GIS, Data, and Ethics", "text": "Date Type Description Slides Recording 4/4 Lecture Introducing the course, GIS, data, and ethics Here Here 4/6 Lab GITting Used to Web Development and JavaScript Here Here"}, {"location": "weekly_materials/week01/#lecture", "title": "Lecture", "text": "<p>Charting the course for the class and how it relates to GIS, data, and ethics.</p> <p>Lecture 1 Slides</p>"}, {"location": "weekly_materials/week01/#introducing-the-course-gis-data-and-ethics", "title": "Introducing the course, GIS, data, and ethics", "text": ""}, {"location": "weekly_materials/week01/#lab", "title": "Lab", "text": "<p>Learning how to use GitHub, VSCode, and some JavaScript.</p> <ul> <li>GITting Used to Web Development and JavaScript</li> </ul> <p>Lab 1 Mini-Lecture Slides</p>"}, {"location": "weekly_materials/week01/#group-work", "title": "Group Work", "text": "<p>Info</p> <p>Due to running out of time on lab, we will spend part of next Tuesday (4/11) with group work.</p> <p>Start to form teams based on initially pre-assigned groups on this spreadsheet: </p> <ul> <li>https://tinyurl.com/23s-aa191-groups</li> </ul>"}, {"location": "weekly_materials/week01/#getting-started-help", "title": "Getting Started help", "text": "<ol> <li>Signing-up with GitHub</li> <li>Git Cloning: Downloading a repo to your computer</li> <li>Git Committing: Saving your changes to a repo</li> <li>Git Creating: Creating a new repo and inviting group members</li> <li>Submitting assginments</li> <li>Subtmitting Thinking Caps</li> </ol>"}, {"location": "weekly_materials/week01/#assignments", "title": "Assignments", "text": "<p>Warning</p> <p>Unless specified otherwise, all assignments are due at the beginning of class. Late assignments will be given half credit up until a week.</p>"}, {"location": "weekly_materials/week01/#due-tuesday-44", "title": "Due Tuesday 4/4", "text": "<ul> <li>Pre-course Servey</li> </ul>"}, {"location": "weekly_materials/week01/#due-thursday-46", "title": "Due Thursday 4/6", "text": "<ul> <li>Pre-lab #1</li> </ul>"}, {"location": "weekly_materials/week01/#due-tuesday-411", "title": "Due Tuesday 4/11", "text": "<ul> <li>Thinking Cap: What are problems with the way we use data and GIS?</li> <li>Finish the weekly reading [PDF]</li> </ul>"}, {"location": "weekly_materials/week01/#due-thursday-413", "title": "Due Thursday 4/13", "text": "<ul> <li>Lab #1: Portfolio</li> <li>Group Assignment #1: Repository and Readme</li> <li>Pre-lab</li> </ul>"}, {"location": "weekly_materials/week02/", "title": "Week 2 - Humanizing Technology", "text": "Date Type Description Slides Recording 4/11 Critical Cartography and Civil Society Lecture Here Here 4/13 [JavaSCrypt of the Necrodancer] Lab Here Here"}, {"location": "weekly_materials/week02/#lecture", "title": "Lecture", "text": "<ul> <li>Critical Cartography and Civil Society</li> </ul>"}, {"location": "weekly_materials/week02/#visiting-voice-mariah-tso", "title": "Visiting Voice: Mariah Tso", "text": "<p>Mariah Tso is a Din\u00e9 woman, artist, and GIS Specialist for the Ralph J. Bunche Center and the Million Dollar Hoods Project.</p> <ul> <li>Discussion #1 - Document</li> <li>Discussion #1 - Submission</li> </ul>"}, {"location": "weekly_materials/week02/#lab", "title": "Lab", "text": "<ul> <li>JavaScript of the Necrodancer</li> </ul>"}, {"location": "weekly_materials/week02/#assignments", "title": "Assignments", "text": ""}, {"location": "weekly_materials/week02/#due-tuesday-411", "title": "Due Tuesday 4/11", "text": "<ul> <li>Thinking Cap: What are problems with the way we use data and GIS?</li> <li>Finish the weekly reading [PDF]</li> </ul>"}, {"location": "weekly_materials/week02/#due-thursday-413", "title": "Due Thursday 4/13", "text": "<ul> <li>Lab #1: Portfolio</li> <li>Group Assignment #1: Repository and Readme</li> <li>Pre-lab</li> </ul>"}, {"location": "weekly_materials/week02/#due-tuesday-418", "title": "Due Tuesday 4/18", "text": "<ul> <li>Whose map? Who is empowered and who is disempowered?</li> <li>Thinking Cap #2</li> </ul>"}, {"location": "weekly_materials/week02/#due-thursday-420", "title": "Due Thursday 4/20", "text": "<ul> <li>Lab Assignment #2</li> <li>Optional: Pre-lab</li> </ul>"}, {"location": "weekly_materials/week02/#due-thursday-427", "title": "Due Thursday 4/27", "text": "<ul> <li>Group Assignment #2</li> </ul>"}, {"location": "weekly_materials/week03/", "title": "Week 3 - Open Source and Web Mapping", "text": "Date Type Description Slides Recording 4/18 Ethical Software and Developing for Civil Society Lecture Here Here 4/20 A little UX/I(e) and Geo-J-cieON Lab Here Here"}, {"location": "weekly_materials/week03/#lecture", "title": "Lecture", "text": "<ul> <li>Ethical Software and Developing for Civil Society</li> </ul>"}, {"location": "weekly_materials/week03/#lab", "title": "Lab", "text": "<ul> <li>A little UX/I(e) and Geo-J-cieON</li> </ul>"}, {"location": "weekly_materials/week03/#assignments", "title": "Assignments", "text": ""}, {"location": "weekly_materials/week03/#due-thursday-420", "title": "Due Thursday 4/20", "text": "<ul> <li>Lab Assignment #2</li> <li>Submit using the discussion post!!</li> <li>Optional: Pre-lab Reading</li> </ul>"}, {"location": "weekly_materials/week03/#due-tuesday-425", "title": "Due Tuesday 4/25", "text": "<ul> <li>Readings about looking beyond Open Source</li> <li>Thinking Cap #3</li> </ul>"}, {"location": "weekly_materials/week03/#due-thursday-427", "title": "Due Thursday 4/27", "text": "<ul> <li>Group Assignment #2</li> <li>Lab Assignment #3</li> </ul>"}, {"location": "weekly_materials/week04/", "title": "Week 4 - Society, Technology and Ethics", "text": "Date Type Description Slides Recording 4/25 Connecting the dots of technology and ethics Lecture Here Here 4/27 Google FORMulating Community-Based Empowerment Lab Here Here"}, {"location": "weekly_materials/week04/#lecture", "title": "Lecture", "text": "<ul> <li>Connecting the dots of technology and ethics</li> </ul>"}, {"location": "weekly_materials/week04/#lab", "title": "Lab", "text": "<ul> <li>Google FORMulating Community-Based Empowerment</li> </ul>"}, {"location": "weekly_materials/week04/#assignments", "title": "Assignments", "text": ""}, {"location": "weekly_materials/week04/#due-thursday-427", "title": "Due Thursday 4/27", "text": "<ul> <li>Group Assignment #2</li> <li>Lab Assignment #3</li> </ul>"}, {"location": "weekly_materials/week04/#due-tuesday-52", "title": "Due Tuesday 5/2", "text": "<ul> <li>Technology and Ethics</li> <li>What are your ethics with technology and society?</li> </ul>"}, {"location": "weekly_materials/week04/#due-thursday-54", "title": "Due Thursday 5/4", "text": "<ul> <li>Group Assignment #3</li> </ul>"}, {"location": "weekly_materials/week05/", "title": "Week 5 - Community-based Empowerment", "text": "Date Type Description Slides Recording 5/2 Connecting us with Community development Lecture Here Here 5/4 Loops and Google FORMulating Data Lab + Lecture Here Here", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week05/#lecture", "title": "Lecture", "text": "<ul> <li>Connecting us with Community development</li> </ul>", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week05/#visiting-voices-nancy-yap-and-farrah-su", "title": "Visiting Voices: Nancy Yap and Farrah Su", "text": "<p>Nancy Yap is the Executive Director of the Center for Asian Americans United for Self Empowerment (CAUSE), a nonprofit organization that is committed to advancing the political and civic engagement of leaders in the Asian and Pacific Islander (API) community and President of the Arts District Little Tokyo Neighborhood Council and the Co-Founder of two programs in Little Tokyo, Community Feeding Community.</p> <p></p> <p>Farrah Su is the Marketing and Communications Manager at CAUSE, where she has worked on mapping projects and other civic engagement initiatives and she also freelances as a photographer and filmmaker during her spare time.</p>", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week05/#visiting-voice-presentation-slides", "title": "Visiting Voice Presentation Slides", "text": "<p>Web Development and GIS x CAUSE</p>", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week05/#lab", "title": "Lab", "text": "<ul> <li>Google FORMulating Community-Based Empowerment</li> </ul>", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week05/#assignments", "title": "Assignments", "text": "", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week05/#due-tuesday-52", "title": "Due Tuesday 5/2", "text": "<ul> <li>Technology and Ethics</li> <li>What are your ethics with technology and society?</li> </ul>", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week05/#due-thursday-59", "title": "Due Thursday 5/9", "text": "", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week05/#due-thursday-54", "title": "Due Thursday 5/4", "text": "<ul> <li>Group Assignment #3 Survey</li> </ul>", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week05/#due-thursday-511", "title": "Due Thursday 5/11", "text": "<ul> <li>Lab Assignment #4</li> </ul>", "tags": ["Week 5", "CAUSE"]}, {"location": "weekly_materials/week06/", "title": "Week 6 - Human-Centered Design", "text": "Date Type Description Slides Recording 5/9 Lab #5 wrap-up &amp; Designing for Civil Society Lab/Lecture Here Here 5/11 Design DeciCSSions Lab Here Here"}, {"location": "weekly_materials/week06/#lecture", "title": "Lecture", "text": "<ul> <li>Lab #5 wrap-up &amp; Designing for Civil Society</li> </ul>"}, {"location": "weekly_materials/week06/#lab", "title": "Lab", "text": "<ul> <li>Design DeciCSSions</li> </ul>"}, {"location": "weekly_materials/week06/#visiting-voice-yoh-kawano", "title": "Visiting Voice: Yoh Kawano", "text": "<p>Yoh Kawano is a digital humanist, Lead Computation Scientist at UCLA\u2019s Institute for Digital Research and Technology, and associate professor at Reitaku University Japan(Japanese). His community empowerment is on narratives in Japan\u2019s Fukushima prefecture following the 2011 Tsunami.</p> <p>Email: yohman@gmail.com</p>"}, {"location": "weekly_materials/week06/#assignments", "title": "Assignments", "text": ""}, {"location": "weekly_materials/week06/#due-thursday-511", "title": "Due Thursday 5/11", "text": "<ul> <li>Survey</li> <li>Memo Revision</li> <li>Submit using this Google form!!</li> <li>CSS Pre-lab</li> </ul>"}, {"location": "weekly_materials/week06/#due-tuesday-516", "title": "Due Tuesday 5/16", "text": "<ul> <li>Lab Assignment #4</li> <li>Weekly Reading: Design Justice</li> <li>Thinking Cap #5</li> </ul>"}, {"location": "weekly_materials/week06/#due-thursday-518", "title": "Due Thursday 5/18", "text": "<ul> <li>Lab Assignment #5</li> </ul>"}, {"location": "weekly_materials/week06/#due-tuesday-523", "title": "Due Tuesday 5/23", "text": "<ul> <li>Group Assignment #4</li> </ul>"}, {"location": "weekly_materials/week07/", "title": "Week 7 - Our role as facilitators", "text": "Date Type Description Slides Recording 5/16 Putting the \u201cus\u201d in Design JUStice Lecture Here Here 5/18 Conditionals, Map Layers, and Visual Design Lecture Here Here"}, {"location": "weekly_materials/week07/#lecture", "title": "Lecture", "text": "<ul> <li>Putting the \u201cus\u201d in Design JUStice</li> </ul>"}, {"location": "weekly_materials/week07/#visiting-voice-joyce-nguy", "title": "Visiting Voice: Joyce Nguy", "text": "<p>Joyce Nguy is a first-generation PhD student and Cota-Robles Fellow in the department of political science at the University of California, Los Angeles. She has worked on data for UCLA MAAPP and her current research focuses broadly on immigrant political socialization and Asian American political behavior. Passionate about creating space for diverse voices in the political science field, she hopes to pursue a career in academia, and serve as a mentor for other first-generation emerging scholars.</p> <ul> <li> <p>Joyce\u2019s Slides</p> </li> <li> <p>Contact: joycenguy@g.ucla.edu</p> </li> </ul>"}, {"location": "weekly_materials/week07/#lab", "title": "Lab", "text": "<ul> <li>Conditionals, Map Layers, and Visual Design</li> </ul>"}, {"location": "weekly_materials/week07/#assignments", "title": "Assignments", "text": ""}, {"location": "weekly_materials/week07/#due-thursday-518", "title": "Due Thursday 5/18", "text": "<ul> <li>Lab Assignment #5</li> </ul>"}, {"location": "weekly_materials/week07/#due-tuesday-523", "title": "Due Tuesday 5/23", "text": "<ul> <li>Survey Diagram and Wireframe</li> <li>Design Justice</li> <li>Thinking Cap #5</li> <li>Memo Revision #3 (email to submit)</li> </ul>"}, {"location": "weekly_materials/week07/#due-thursday-525", "title": "Due Thursday 5/25", "text": "<ul> <li>Lab Assignment #6</li> <li>Survey Revisions</li> </ul>"}, {"location": "weekly_materials/week07/#readings", "title": "Readings:", "text": "<ol> <li>Dencik, L., Redden, J., and Trer\u00e9, E. (2019) Exploring Data Justice: Conceptions, Applications and Directions</li> </ol>"}, {"location": "weekly_materials/week08/", "title": "Week 8 - Mentorship and Collaboration", "text": "Date Type Description Slides Recording 5/23 Working together towards social change Lab/Lecture Here Here 5/25 Collaborating with GitHub and plugins Lab Here Here"}, {"location": "weekly_materials/week08/#lecture", "title": "Lecture", "text": "<ul> <li>Working together towards social change</li> </ul>"}, {"location": "weekly_materials/week08/#visiting-voice-nina-kin", "title": "Visiting Voice: Nina Kin", "text": "<p>Nina Kin works as the Technical Lead at Los Angeles Metro and active in spaces of civic tech and mapping. She is a full stack programmer and technology generalist who is passionate about improving the way government works.</p> <p>Contact: KinN@metro.net</p>"}, {"location": "weekly_materials/week08/#lab", "title": "Lab", "text": "<ul> <li>Working together with GitHub and plugins</li> <li>Group Surveys</li> <li>Remember to take each survey as the memo\u2019s persona (or as yourself if it\u2019s applicable) and make sure as a group you take it 3 times total. If your group has 3 people, then everyone just needs to take the survey once.</li> </ul>"}, {"location": "weekly_materials/week09/", "title": "Week 9 - Connecting activism, technology, and social change", "text": "Date Type Description Slides Recording 5/30 Building and Sustaining Connections with Civil Society Lecture Here Here 6/1 Final Finishing Touches Lab Here Here"}, {"location": "weekly_materials/week09/#lecture", "title": "Lecture", "text": "<ul> <li>Building and Sustaining Connections with Civil Society</li> </ul>"}, {"location": "weekly_materials/week09/#visiting-voice-rapi-castillo", "title": "Visiting Voice: Rapi Castillo", "text": "<p>Rapi Castillo is a tech worker, community organizer, and (amateur) baker. He is laser-focused on creating technology that empower people to learn more about the issues and do something impactful. He has worked on projects that have been used by grassroots campaigns like Alexandria Ocasio Cortez, Bernie Sanders, and others. He is also the founder of Progressive Coders Network.</p> <p>Contact</p>"}, {"location": "weekly_materials/week09/#lab", "title": "Lab", "text": "<ul> <li>Final Finishing Touches</li> </ul>"}, {"location": "weekly_materials/week10/", "title": "Week 10 - Beyond Web Development and GIS for Social Change", "text": "<ul> <li>Yearbook</li> </ul> Date Type Description Slides Recording 6/6 Final Finishing Touches Lab Here Here 6/8 Beyond Web Development and GIS for Social Change Lecture None None"}, {"location": "weekly_materials/week10/#lab", "title": "Lab", "text": "<ul> <li>Final Finishing Touches</li> </ul>"}, {"location": "weekly_materials/week10/#lecture", "title": "Lecture", "text": "<ul> <li>Beyond Web Development and GIS for Social Change</li> </ul>"}]}